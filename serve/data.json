[{"path":"/posts/css高度单位的区别.html","title":"em,rem,vh,wh,height的区别","date":"2020-03-10","fontNum":514,"description":"\r\n em\r\n\r\n- 设置当前的div的字体大小为1.5em，\r\n- 则当前的div的字体大小为：当前div继承的字体大小的1.5倍\r\n- 但是当div进行嵌套的时候，em始终是按照当前div继承的字体大小来缩放。\r\n\r\n rem\r\n\r\n- 这里的r就是root的意思，意思是相对于根节点来进行缩放，\r\n- 当有嵌套关系的时候，\r\n- 嵌套关系的元素的字体大小始终按照根节点的字体大小进行","tags":["css"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<h3>em</h3>\n<ul>\n<li>设置当前的div的字体大小为1.5em，</li>\n<li>则当前的div的字体大小为：当前div继承的字体大小的1.5倍</li>\n<li>但是当div进行嵌套的时候，em始终是按照当前div继承的字体大小来缩放。</li>\n</ul>\n<h3>rem</h3>\n<ul>\n<li>这里的r就是root的意思，意思是相对于根节点来进行缩放，</li>\n<li>当有嵌套关系的时候，</li>\n<li>嵌套关系的元素的字体大小始终按照根节点的字体大小进行缩放。</li>\n</ul>\n<h3>vh</h3>\n<ul>\n<li>1vh就是当前屏幕可见高度的1%，</li>\n<li>也就是说height:100vh == height:100%;</li>\n<li>但是有个好处是当元素没有内容时候，设置height:100%该元素不会被撑开，</li>\n<li>但是设置height:100vh，该元素会被撑开屏幕高度一致。</li>\n</ul>\n<h3>vw</h3>\n<ul>\n<li>1vw就是当前屏幕宽度的1%</li>\n<li>补充一句，当设置width:100%，被设置元素的宽度是按照父元素的宽度来设置，</li>\n<li>但是100vw是相对于屏幕可见宽度来设置的，所以会出现50vw 比50%大的情况</li>\n</ul>\n<h3>height指容器的高度</h3>\n<h3>line-height每行字体的高度</h3>\n"},{"path":"/posts/js一次性设置多个css.html","title":"js一次性设置多个css","date":"2020-07-26","fontNum":68,"description":"\r\njavascript\r\ndiv.style.cssText = 'width:100px;height:100px'\r\n","tags":["javascript"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">div.style.cssText = 'width:100px;height:100px'\n</code></pre>\n"},{"path":"/posts/element_ui日期组件.html","title":"element ui 日期组件当前月份显示在右侧","date":"2020-11-10","fontNum":5231,"description":"\r\n 网上的方法是通过 default-value来设置\r\n\r\n但是这种方式在默认值的情况下或者选择值的情况下失效\r\n\r\njavascript\r\n<template>\r\n  <el-date-picker\r\n    v-model=\"value\"\r\n    type=\"daterange\"\r\n    range-separator=\"至\"\r\n    start-placeholder=\"","tags":["element_ui"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<h2>网上的方法是通过 default-value来设置</h2>\n<p>但是这种方式在默认值的情况下或者选择值的情况下失效</p>\n<pre><code class=\"language-javascript\">&lt;template&gt;\n  &lt;el-date-picker\n    v-model=&quot;value&quot;\n    type=&quot;daterange&quot;\n    range-separator=&quot;至&quot;\n    start-placeholder=&quot;开始日期&quot;\n    end-placeholder=&quot;结束日期&quot;\n    format=&quot;yyyyMMdd&quot;\n    value-format=&quot;yyyyMMdd&quot;\n    :default-value=&quot;defaultTime&quot;\n  &gt;\n  &lt;/el-date-picker&gt;\n&lt;/template&gt;\n \n&lt;script&gt;\nexport default {\n  data() {\n    return {\n      value: [],\n      defaultTime: &quot;&quot;,\n    };\n  },\n  created() {\n    this.defaultTime = new Date();\n    this.defaultTime.setMonth(new Date().getMonth() - 1);\n  },\n  methods: {},\n};\n&lt;/script&gt;\n</code></pre>\n<h2>由于v-model的原因会导致月份表根据v-model的值进行渲染，导致default-value的值失效。这边提供了一种解决思路，通过更改饿了么源码的方式</h2>\n<pre><code class=\"language-javascript\">element-ui.common.js\n/* harmony default export */ var date_picker = ({\n        mixins: [picker],\n \n        name: 'ElDatePicker',\n \n        props: {\n          rightCurrentMonth: {},//******获取传入的值******\n          type: {\n            type: String,\n            default: 'date'\n          },\n          timeArrowControl: Boolean,\n \n        },\n \n \nelement-ui.common.js\n \n  mountPicker: function mountPicker() {\n            var _this3 = this;\n            this.picker = new external_vue_default.a(this.panel).$mount();\n           \n            this.picker.rightCurrentMonth = this.rightCurrentMonth;//******将值往下传递******\n \n            this.picker.defaultValue = this.defaultValue;\n            this.picker.defaultTime = this.defaultTime;\n            this.picker.popperClass = this.popperClass;\n            this.popperElm = this.picker.$el;\n            this.picker.width = this.reference.getBoundingClientRect().width;\n\n</code></pre>\n<h2>data中需要增加 rightCurrentMonth: false</h2>\n<pre><code class=\"language-javascript\">element-ui.common.js\n \ndata: function data() {\n          return {\n            rightCurrentMonth: false,\n            popperClass: '',\n            value: [],\n            defaultValue: null,\n            defaultTime: null,\n            minDate: '',\n            maxDate: '',\n            leftDate: new Date(),\n            rightDate: Object(date_util_[&quot;nextMonth&quot;])(new Date()),\n            rangeState: {\n              endDate: null,\n              selecting: false,\n              row: null,\n              column: null\n            },\n            showTime: false,\n</code></pre>\n<h2>重写后的value方法</h2>\n<pre><code class=\"language-javascript\"> value: function value(newVal) {\n            console.log('rightCurrentMonth', this.rightCurrentMonth);\n            if (!newVal) {\n              this.minDate = null;\n              this.maxDate = null;\n            } else if (Array.isArray(newVal)) {\n              this.minDate = Object(date_util_[&quot;isDate&quot;])(newVal[0]) ? new Date(newVal[0]) : null;\n              this.maxDate = Object(date_util_[&quot;isDate&quot;])(newVal[1]) ? new Date(newVal[1]) : null;\n              //*******************************************************\n              //*******************************************************\n              if (!this.rightCurrentMonth) {\n                if (this.minDate) {\n                  this.leftDate = this.minDate;\n                  if (this.unlinkPanels &amp;&amp; this.maxDate) {\n                    var minDateYear = this.minDate.getFullYear();\n                    var minDateMonth = this.minDate.getMonth();\n                    var maxDateYear = this.maxDate.getFullYear();\n                    var maxDateMonth = this.maxDate.getMonth();\n                    this.rightDate = minDateYear === maxDateYear &amp;&amp; minDateMonth === maxDateMonth ? Object(date_util_[&quot;nextMonth&quot;])(this.maxDate) : this.maxDate;\n                  } else {\n                    this.rightDate = Object(date_util_[&quot;nextMonth&quot;])(this.leftDate);\n                  }\n                } else {\n                  this.leftDate = date_rangevue_type_script_lang_js_calcDefaultValue(this.defaultValue)[0];\n                  this.rightDate = Object(date_util_[&quot;nextMonth&quot;])(this.leftDate);\n                }\n              } else {\n                if (this.maxDate) {\n                  this.rightDate = this.maxDate;\n                  if (this.unlinkPanels &amp;&amp; this.minDate) {\n                    console.log('111111');\n                    const minDateYear = this.minDate.getFullYear();\n                    const minDateMonth = this.minDate.getMonth();\n                    const maxDateYear = this.maxDate.getFullYear();\n                    const maxDateMonth = this.maxDate.getMonth();\n                    this.leftDate = minDateYear === maxDateYear &amp;&amp; minDateMonth === maxDateMonth ? Object(date_util_[&quot;prevMonth&quot;])(this.maxDate) : this.minDate;\n                  } else {\n                    console.log('222222');\n                    this.leftDate = Object(date_util_[&quot;prevMonth&quot;])(this.rightDate);\n                  }\n                } else {\n                  console.log('333333');\n                  this.leftDate = date_rangevue_type_script_lang_js_calcDefaultValue(this.defaultValue)[0];\n                  this.rightDate = Object(date_util_[&quot;nextMonth&quot;])(this.leftDate);\n                }\n                //*******************************************************\n                //*******************************************************\n              }\n \n            }\n          },\n</code></pre>\n"},{"path":"/posts/dom操作记录.html","title":"dom操作记录","date":"2020-11-11","fontNum":436,"description":"\r\n\r\nquerySelectorAll返回的是一个静态的快照\r\n\r\ndocument.activeElement始终包含当前拥有焦点的dom元素\r\n\r\n HTMLDocument扩展\r\n\r\n1.readyState属性\r\n\r\ndocument.readyState\r\n\r\n返回值 loading 表示文档正在加载 complete 表示文档加载完成\r\n\r\n作用 用于判断文档是否加载","tags":["javascript"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code>querySelectorAll返回的是一个静态的快照\n\ndocument.activeElement始终包含当前拥有焦点的dom元素\n\n##### HTMLDocument扩展\n\n1.readyState属性\n\ndocument.readyState\n\n返回值 loading 表示文档正在加载 complete 表示文档加载完成\n\n作用 用于判断文档是否加载完毕\n\n基本用法\n\nif(document.readyState == &quot;complete&quot;){\n    //execute action\n\n}\n\n2.compatMode\n\ndocument.compatMode\n\n返回值 标准模式‘CSS1Compat’ 混杂模式‘BackCompat’\n\n作用 用于指示浏览器当前处于什么渲染模式\n\n3.head属性\n\ndocument.head\n\n指向文档的head元素\n</code></pre>\n"},{"path":"/posts_javascript/手写promise.html","title":"promise基本原理 简略","date":"2020-11-12","fontNum":2818,"description":"\r\njavascript\r\nclass Commitment {\r\n    //定义状态\r\n    static PENDING = 'pending'\r\n    static FULFILLED = 'resolved'\r\n    static REJECTED = 'rejected'\r\n\r\n    constructor(func) {\r\n        //初始化状态\r\n      ","tags":["javascript"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">class Commitment {\n    //定义状态\n    static PENDING = 'pending'\n    static FULFILLED = 'resolved'\n    static REJECTED = 'rejected'\n\n    constructor(func) {\n        //初始化状态\n        this.status = Commitment.PENDING;\n        //存储结果\n        this.result = null;\n        //回调队列\n        this.resolveCallbacks = [];\n        this.rejectCallbacks = [];\n        // 拒绝异常\n        try {\n            func(this.resolve.bind(this), this.reject.bind(this))\n        } catch (error) {\n            this.reject(error)\n        }\n    }\n\n    resolve(result) {\n        setTimeout(() =&gt; {\n            if (this.status === Commitment.PENDING) {\n                this.status = Commitment.FULFILLED\n                this.result = result\n                this.resolveCallbacks.forEach(callback =&gt; {\n                    callback(result)\n                })\n            }\n        })\n    }\n\n    reject(result) {\n        setTimeout(() =&gt; {\n            if (this.status === Commitment.PENDING) {\n                this.status = Commitment.REJECTED\n                this.result = result\n                this.rejectCallbacks.forEach(callback =&gt; {\n                    callback(result)\n                })\n            }\n        })\n    }\n\n    then(onFULFILLED, onREJECTED) {\n        return new Commitment((resolve, reject) =&gt; {\n            onFULFILLED = typeof onFULFILLED === 'function' ? onFULFILLED : () =&gt; {}\n            onREJECTED = typeof onREJECTED === 'function' ? onREJECTED : () =&gt; {}\n            if (this.status === Commitment.PENDING) {\n                this.resolveCallbacks.push(onFULFILLED)\n                this.rejectCallbacks.push(onREJECTED)\n            }\n            if (this.status === Commitment.FULFILLED) {\n                setTimeout(() =&gt; {\n                    onFULFILLED(this.result)\n                })\n            }\n\n            if (this.status === Commitment.REJECTED) {\n                setTimeout(() =&gt; {\n                    onREJECTED(this.result)\n                })\n            }\n        })\n    }\n}\nconsole.log('1');\nconst commitment = new Commitment((resolve, reject) =&gt; {\n    console.log('2');\n    setTimeout(() =&gt; {\n        resolve('resolve')\n        console.log('4');\n    })\n})\ncommitment.then(result =&gt; {\n    console.log('a', result);\n})\n\nconsole.log('3');\n//resolve , reject 要在事件循环末尾执行\n//执行顺序  console.log('1'); -&gt; new Commitment -&gt; console.log('2'); -&gt; setTimeout -&gt; commitment.then -&gt; console.log('3');\n//事件队列 [resolve('resolve') ,console.log('4')]\n//事件队列 [console.log('4'), callback(result)]\n//事件队列 [callback(result)]\n\n// const pro = new Promise((resolve, reject) =&gt; {\n//     resolve('22')\n// })\n\n// pro.then(res =&gt; {\n//     console.log(res);\n//     return pro\n// }).then(res =&gt; {\n//     console.log(res);\n// })\n</code></pre>\n"},{"path":"/posts/判断对象为空.html","title":"判断一个对象是否为空对象","date":"2020-12-13","fontNum":1000,"description":"\r\njavascript\r\nvar foo = {\r\n    a: 'name',\r\n    b: null,\r\n    c: undefined,\r\n    d: function () { },\r\n    e: Symbol(),\r\n    [Symbol('bar')]: 25\r\n}\r\n \r\nObject.defineProperty(foo, 'f', {\r\n    value: 4","tags":["javascript"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">var foo = {\n    a: 'name',\n    b: null,\n    c: undefined,\n    d: function () { },\n    e: Symbol(),\n    [Symbol('bar')]: 25\n}\n \nObject.defineProperty(foo, 'f', {\n    value: 42,\n    enumerable: false\n});\n \nfoo.__proto__ = {\n    g: 233\n}\n \n// console.log(Object.values(foo));\n[ 'name', null, undefined, [Function: key4], Symbol() ] （不包括不可枚举属性但不包括Symbol值作为名称的属性）\n \nObject.getOwnPropertyNames()方法返回一个由指定对象的所有自身属性的属性名（包括不可枚举属性但不包括Symbol值作为名称的属性）组成的数组。\n \n \nObject.getOwnPropertyDescriptors() 方法用来获取一个对象的所有自身属性的描述符。 （包括Symbol属性和不可枚举属性）\n// const baz = Object.getOwnPropertyDescriptors(foo)\n \n// console.log(Reflect.ownKeys(foo)); //[ 'a', 'b', 'c', 'd', 'e', 'f', Symbol(bar) ]\n// Reflect.ownKeys 方法返回一个由目标对象自身的属性键组成的数组。它的返回值等同于Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target))。\n \n判断一个对象是否为空对象\nfunction isEmptyObj(obj) {\n    return Reflect.ownKeys(obj).length &gt; 0 ? false : true\n}\nconsole.log(isEmptyObj(foo)); // false\n</code></pre>\n"},{"path":"/posts_old/array的find.html","title":"Array.find","date":"2021-01-01","fontNum":543,"description":"javascript\r\nlet arr = [1, 2, 3, 4, 5, 6]\r\n\r\narr.find((element, index, array) => {\r\n    console.log('element', element);\r\n    console.log('index', index);\r\n    console.log('array', array);\r\n})\r\n\r\n//","tags":["javascript"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">let arr = [1, 2, 3, 4, 5, 6]\n\narr.find((element, index, array) =&gt; {\n    console.log('element', element);\n    console.log('index', index);\n    console.log('array', array);\n})\n\n// element 1\n// index 0\n// array [ 1, 2, 3, 4, 5, 6 ]\n// element 2\n// index 1\n// array [ 1, 2, 3, 4, 5, 6 ]\n// element 3\n// index 2\n// array [ 1, 2, 3, 4, 5, 6 ]\n// element 4\n// index 3\n// array [ 1, 2, 3, 4, 5, 6 ]\n// element 5\n// index 4\n// array [ 1, 2, 3, 4, 5, 6 ]\n// element 6\n// index 5\n// array [ 1, 2, 3, 4, 5, 6 ]\n</code></pre>\n"},{"path":"/posts_old/flower_animation.html","title":"花朵动画特效","date":"2021-01-01","fontNum":5170,"description":"html\r\n<html>\r\n\r\n<head></head>\r\n<style>\r\n    .petal {\r\n        position: fixed;\r\n        top: 30%;\r\n        left: 50%;\r\n        background: rgba(123, 104, 236, 0.3);\r\n        opacity: 0.4;\r\n        ","tags":["html"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-html\">&lt;html&gt;\n\n&lt;head&gt;&lt;/head&gt;\n&lt;style&gt;\n    .petal {\n        position: fixed;\n        top: 30%;\n        left: 50%;\n        background: rgba(123, 104, 236, 0.3);\n        opacity: 0.4;\n        width: 300px;\n        height: 300px;\n        border-radius: 300px 0px;\n        /* 旋转基点 */\n        transform-origin: 0px 300px;\n        /* 逆时针旋转45度 */\n        transform: rotate(-45deg);\n    }\n    \n    .div2 {\n        /* 动画名称 持续时间 时间函数 延迟时间 循环次数 动画方向 播放装态 填充模式 */\n        animation: a2 2s ease 1 forwards;\n    }\n    \n    .div3 {\n        animation: a3 2s ease 1 forwards;\n    }\n    \n    .div4 {\n        animation: a4 2s ease 1 forwards;\n    }\n    \n    .div5 {\n        animation: a5 2s ease 1 forwards;\n    }\n    \n    .div6 {\n        animation: a6 2s ease 1 forwards;\n    }\n    \n    .div7 {\n        animation: a7 2s ease 1 forwards;\n    }\n    \n    .div8 {\n        animation: a8 2s ease 1 forwards;\n    }\n    \n    .div9 {\n        animation: a9 2s ease 1 forwards;\n    }\n    \n    .div10 {\n        animation: a10 2s ease 1 forwards;\n    }\n    \n    .div11 {\n        animation: a11 2s ease 1 forwards;\n    }\n    \n    .div12 {\n        animation: a12 2s ease 1 forwards;\n    }\n    \n    .div13 {\n        animation: a13 2s ease 1 forwards;\n    }\n    \n    .div14 {\n        animation: a14 2s ease 1 forwards;\n    }\n    \n    .div15 {\n        animation: a15 2s ease 1 forwards;\n    }\n    \n    .div16 {\n        animation: a16 2s ease 1 forwards;\n    }\n    \n    .div17 {\n        animation: a17 2s ease 1 forwards;\n    }\n    \n    .div18 {\n        animation: a18 2s ease 1 forwards;\n    }\n    \n    @keyframes a2 {\n        from {\n            transform: rotate(-45deg);\n        }\n        to {\n            transform: rotate(-25deg);\n        }\n    }\n    \n    @keyframes a3 {\n        from {\n            transform: rotate(-45deg);\n        }\n        to {\n            transform: rotate(-5deg);\n        }\n    }\n    \n    @keyframes a4 {\n        from {\n            transform: rotate(-45deg);\n        }\n        to {\n            transform: rotate(15deg);\n        }\n    }\n    \n    @keyframes a5 {\n        from {\n            transform: rotate(-45deg);\n        }\n        to {\n            transform: rotate(35deg);\n        }\n    }\n    \n    @keyframes a6 {\n        from {\n            transform: rotate(-45deg);\n        }\n        to {\n            transform: rotate(55deg);\n        }\n    }\n    \n    @keyframes a7 {\n        from {\n            transform: rotate(-45deg);\n        }\n        to {\n            transform: rotate(75deg);\n        }\n    }\n    \n    @keyframes a8 {\n        from {\n            transform: rotate(-45deg);\n        }\n        to {\n            transform: rotate(95deg);\n        }\n    }\n    \n    @keyframes a9 {\n        from {\n            transform: rotate(-45deg);\n        }\n        to {\n            transform: rotate(115deg);\n        }\n    }\n    \n    @keyframes a10 {\n        from {\n            transform: rotate(-45deg);\n        }\n        to {\n            transform: rotate(135deg);\n        }\n    }\n    \n    @keyframes a11 {\n        from {\n            transform: rotate(-45deg);\n        }\n        to {\n            transform: rotate(155deg);\n        }\n    }\n    \n    @keyframes a12 {\n        from {\n            transform: rotate(-45deg);\n        }\n        to {\n            transform: rotate(175deg);\n        }\n    }\n    \n    @keyframes a13 {\n        from {\n            transform: rotate(-45deg);\n        }\n        to {\n            transform: rotate(195deg);\n        }\n    }\n    \n    @keyframes a14 {\n        from {\n            transform: rotate(-45deg);\n        }\n        to {\n            transform: rotate(215deg);\n        }\n    }\n    \n    @keyframes a15 {\n        from {\n            transform: rotate(-45deg);\n        }\n        to {\n            transform: rotate(235deg);\n        }\n    }\n    \n    @keyframes a16 {\n        from {\n            transform: rotate(-45deg);\n        }\n        to {\n            transform: rotate(255deg);\n        }\n    }\n    \n    @keyframes a17 {\n        from {\n            transform: rotate(-45deg);\n        }\n        to {\n            transform: rotate(275deg);\n        }\n    }\n    \n    @keyframes a18 {\n        from {\n            transform: rotate(-45deg);\n        }\n        to {\n            transform: rotate(295deg);\n        }\n    }\n&lt;/style&gt;\n\n&lt;body&gt;\n    &lt;div class=&quot;div1 petal&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;div2 petal&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;div3 petal&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;div4 petal&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;div5 petal&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;div6 petal&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;div7 petal&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;div8 petal&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;div9 petal&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;div10 petal&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;div11 petal&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;div12 petal&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;div13 petal&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;div14 petal&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;div15 petal&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;div16 petal&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;div17 petal&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;div18 petal&quot;&gt;&lt;/div&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>\n"},{"path":"/posts_old/input聚焦选中.html","title":"input聚焦选中","date":"2021-01-01","fontNum":517,"description":"html\r\n<html>\r\n\r\n<head></head>\r\n\r\n<body>\r\n    <form action=\"\">\r\n        <input type=\"text\" size=\"25\" maxlength=\"50\" name=\"inputOne\" id=\"\" value=\"initial value\">\r\n    </form>\r\n    <script>\r\n        /","tags":["html"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-html\">&lt;html&gt;\n\n&lt;head&gt;&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;form action=&quot;&quot;&gt;\n        &lt;input type=&quot;text&quot; size=&quot;25&quot; maxlength=&quot;50&quot; name=&quot;inputOne&quot; id=&quot;&quot; value=&quot;initial value&quot;&gt;\n    &lt;/form&gt;\n    &lt;script&gt;\n        //默认值为选中\n        const textbox = document.forms[0].elements['inputOne']\n\n        // textbox.select()\n        //聚焦选中\n        textbox.addEventListener('focus', (event) =&gt; {\n            console.log('event.target', event.target);\n            event.target.select()\n        })\n    &lt;/script&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>\n"},{"path":"/posts_old/二叉树层序遍历.html","title":"二叉树层序遍历","date":"2021-01-01","fontNum":938,"description":"javascript\r\nconst input = [3, 9, 20, null, null, 15, 7]\r\n\r\nfunction bfs(input) {\r\n    const res = []\r\n    const root = input[0]\r\n    if (root === null) return res\r\n    const q = []\r\n    q.unshift({","tags":["javascript"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">const input = [3, 9, 20, null, null, 15, 7]\n\nfunction bfs(input) {\n    const res = []\n    const root = input[0]\n    if (root === null) return res\n    const q = []\n    q.unshift({ index: 0, value: input[0] })\n\n    while (q.length &gt; 0) {\n        let len = q.length\n        const list = []\n        while (len &gt; 0) {\n            const cur = q.pop()\n\n            list.push(cur.value)\n            const i = cur.index\n            const left = 2 * i + 1\n            const right = 2 * i + 2\n            if (input[left] &amp;&amp; input[left] !== null) {\n                q.unshift({ index: left, value: input[left] })\n            }\n            if (input[right] &amp;&amp; input[right] !== null) {\n                q.unshift({ index: right, value: input[right] })\n            }\n            len -= 1\n        }\n        res.push(list)\n    }\n    return res\n}\nconsole.log(bfs(input));\n// [ [ 3 ], [ 9, 20 ], [ 15, 7 ] ]\n</code></pre>\n"},{"path":"/posts_old/循环展开.html","title":"循环展开","date":"2021-01-01","fontNum":395,"description":" 展开前\r\n\r\nlet b = new Date()\r\n\r\nlet a = 1\r\n\r\nfor (let i = 0; i < 1000000000; i) {\r\n    a\r\n}\r\n\r\nlet c = new Date() - b\r\n\r\nconsole.log(c); //568ms\r\n\r\n 展开后\r\n\r\nlet b = new Date()\r\n\r\nlet a","tags":["javascript"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<h3>展开前</h3>\n<pre><code>let b = new Date()\n\nlet a = 1\n\nfor (let i = 0; i &lt; 1000000000; i++) {\n    a++\n}\n\nlet c = new Date() - b\n\nconsole.log(c); //568ms\n</code></pre>\n<h3>展开后</h3>\n<pre><code>let b = new Date()\n\nlet a = 1\n\nfor (let i = 0; i &lt; 100000000; i++) {\n    a++\n    a++\n    a++\n    a++\n    a++\n    a++\n    a++\n    a++\n    a++\n    a++\n}\n\nlet c = new Date() - b\n\nconsole.log(c); //57ms\n</code></pre>\n"},{"path":"/posts_old/数组打平.html","title":"数组打平","date":"2021-01-01","fontNum":767,"description":" [Symbol.isConcatSpreadable]: true,可以强制打平数组\r\njavascript\r\nlet colors = ['red', 'green', 'blue']\r\nlet newColors = ['black', 'brown']\r\n\r\nlet moreNewColors = {\r\n    [Symbol.isConcatSpreadable]: true","tags":["javascript"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<h3>[Symbol.isConcatSpreadable]: true,可以强制打平数组</h3>\n<pre><code class=\"language-javascript\">let colors = ['red', 'green', 'blue']\nlet newColors = ['black', 'brown']\n\nlet moreNewColors = {\n    [Symbol.isConcatSpreadable]: true,\n    length: 2,\n    0: 'pink',\n    1: 'cyan'\n}\nnewColors[Symbol.isConcatSpreadable] = false\n\n//强制不打平数组\nlet colors2 = colors.concat('yellow', newColors)\n\nconsole.log('colors2', colors2);\nconsole.log('colors2[4][1]', colors2[4][1]);\n\n\n// colors2 [\n//     'red',\n//     'green',\n//     'blue',\n//     'yellow',\n//     [ 'black', 'brown', [Symbol(Symbol.isConcatSpreadable)]: false ]\n//   ]\n// colors2[4][1] brown\n\n//强制打平数类数组对象\n\nlet colors3 = colors.concat(moreNewColors)\nconsole.log(colors3);\n//[ 'red', 'green', 'blue', 'pink', 'cyan' ]\n</code></pre>\n"},{"path":"/posts_old/读pdf.html","title":"读pdf","date":"2021-01-01","fontNum":133,"description":"javascript\r\nconst fs = require('fs')\r\n\r\nconst res = fs.readFileSync('./我的简历3.0.pdf', 'utf-8').toString()\r\n\r\nconsole.log(res);\r\n","tags":["node"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">const fs = require('fs')\n\nconst res = fs.readFileSync('./我的简历3.0.pdf', 'utf-8').toString()\n\nconsole.log(res);\n</code></pre>\n"},{"path":"/posts/js实现sleep.html","title":"js实现sleep","date":"2021-01-12","fontNum":277,"description":"\r\njavascript\r\nasync function sleep(delay) {\r\n    return new Promise(resolve => {\r\n        setTimeout(resolve, delay)\r\n    })\r\n}\r\n \r\nasync function foo(delay) {\r\n    const t0 = Date.now()\r\n    await","tags":["javascript"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">async function sleep(delay) {\n    return new Promise(resolve =&gt; {\n        setTimeout(resolve, delay)\n    })\n}\n \nasync function foo(delay) {\n    const t0 = Date.now()\n    await sleep(delay)\n    console.log(Date.now() - t0);\n}\nfoo(5000)//5006\n</code></pre>\n"},{"path":"/posts/css什么操作下会脱离文档流.html","title":"css什么操作下会脱离文档流","date":"2021-03-09","fontNum":187,"description":"\r\n css操作脱离文档流\r\n\r\n1、float 浮动布局\r\n2、position:absolute;绝对定位\r\n3、position:fixed;固定定位 \r\n\r\n position:relative 相对定位 不会脱离文档流\r\n\r\n相对定位不会影响元素本身的特性，不会使元素脱离文档流；如果没有定位偏移量，对元素本身没有任何影响。\r\n\r\n","tags":["css"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<h2>css操作脱离文档流</h2>\n<pre><code>1、float 浮动布局\n2、position:absolute;绝对定位\n3、position:fixed;固定定位 \n</code></pre>\n<h2>position:relative 相对定位 不会脱离文档流</h2>\n<pre><code>相对定位不会影响元素本身的特性，不会使元素脱离文档流；如果没有定位偏移量，对元素本身没有任何影响。\n</code></pre>\n"},{"path":"/posts/蛇形矩阵.html","title":"蛇形矩阵","date":"2021-03-15","fontNum":434,"description":"\r\n 蛇形矩阵\r\n\r\njavascript\r\n//蛇形矩阵\r\nfunction getSnakeMatrix(num) {\r\n    let dp = [];\r\n    let n = 1;\r\n    for(let i = 0; i < num; i) {\r\n        for(let j = i; j >= 0; j--) {\r\n            if(!dp[j])","tags":["数据结构与算法"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<h3>蛇形矩阵</h3>\n<pre><code class=\"language-javascript\">//蛇形矩阵\nfunction getSnakeMatrix(num) {\n    let dp = [];\n    let n = 1;\n    for(let i = 0; i &lt; num; i++) {\n        for(let j = i; j &gt;= 0; j--) {\n            if(!dp[j]) dp[j] = [];\n            dp[j].push(n++)\n        }\n    }\n    for(let i = 0; i &lt; num; i++) {\n        console.log(dp[i].join(' '))\n    }\n}\n \ngetSnakeMatrix(5)\n//输出\n1 3 6 10 15\n2 5 9 14   \n4 8 13     \n7 12       \n11\n</code></pre>\n"},{"path":"/posts/element_ui_table_row点击变色.html","title":"element ui table 点击行变色","date":"2021-03-23","fontNum":1492,"description":"\r\njavascript\r\n<template>\r\n  <el-table\r\n    :data=\"tableData\"\r\n    style=\"width: 100%\"\r\n    :row-class-name=\"tableRowClassName\"\r\n    @row-click=\"rowClick\"\r\n    :row-style=\"selectedstyle\"\r\n  >\r\n    <","tags":["element_ui"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">&lt;template&gt;\n  &lt;el-table\n    :data=&quot;tableData&quot;\n    style=&quot;width: 100%&quot;\n    :row-class-name=&quot;tableRowClassName&quot;\n    @row-click=&quot;rowClick&quot;\n    :row-style=&quot;selectedstyle&quot;\n  &gt;\n    &lt;el-table-column prop=&quot;date&quot; label=&quot;日期&quot; width=&quot;180&quot;&gt; &lt;/el-table-column&gt;\n    &lt;el-table-column prop=&quot;name&quot; label=&quot;姓名&quot; width=&quot;180&quot;&gt; &lt;/el-table-column&gt;\n    &lt;el-table-column prop=&quot;address&quot; label=&quot;地址&quot;&gt; &lt;/el-table-column&gt;\n  &lt;/el-table&gt;\n&lt;/template&gt;\n \n  &lt;script&gt;\nexport default {\n  data() {\n    return {\n      getIndex: null,\n      tableData: [\n        {\n          date: &quot;2016-05-02&quot;,\n          name: &quot;王小虎&quot;,\n          address: &quot;上海市普陀区金沙江路 1518 弄&quot;,\n        },\n        {\n          date: &quot;2016-05-04&quot;,\n          name: &quot;王小虎&quot;,\n          address: &quot;上海市普陀区金沙江路 1517 弄&quot;,\n        },\n        {\n          date: &quot;2016-05-01&quot;,\n          name: &quot;王小虎&quot;,\n          address: &quot;上海市普陀区金沙江路 1519 弄&quot;,\n        },\n        {\n          date: &quot;2016-05-03&quot;,\n          name: &quot;王小虎&quot;,\n          address: &quot;上海市普陀区金沙江路 1516 弄&quot;,\n        },\n      ],\n    };\n  },\n  methods: {\n    //设置行对象(row)的样式(style)\n    selectedstyle({ row, rowIndex }) {\n      if (this.getIndex === rowIndex) {\n        return {\n          &quot;background-color&quot;: &quot;#f0f9eb&quot;,\n        };\n      }\n    },\n    //为行对象(row)设置index属性\n    tableRowClassName({ row, rowIndex }) {\n      row.index = rowIndex;\n    },\n    //行点击事件,这里获取到的行对象(row)是没有index属性的\n    rowClick(row) {\n      this.getIndex = row.index;\n    },\n  },\n};\n&lt;/script&gt;\n</code></pre>\n"},{"path":"/posts/js事件循环.html","title":"js事件循环","date":"2021-03-24","fontNum":2857,"description":"\r\n1.事件循环EventLoop\r\n事件循环就是一个程序启动期间的死循环，Node代码虽然运行在单线程中，但仍然能依靠事件循环实现高并发。\r\n\r\n例子：以Ajax请求为例，当JavaScript执行到对应的代码时，就为这句代码注册了一个事件，在发出请求后该语句就执行完毕了，后续的操作会交给回调函数来处理。此时，浏览器背后的循环正在不断遍历事件队列，在Ajax操作完成之前，事件队列里还是空的（并不","tags":["javascript"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<p>1.事件循环EventLoop\n事件循环就是一个程序启动期间的死循环，Node代码虽然运行在单线程中，但仍然能依靠事件循环实现高并发。</p>\n<p>例子：以Ajax请求为例，当JavaScript执行到对应的代码时，就为这句代码注册了一个事件，在发出请求后该语句就执行完毕了，后续的操作会交给回调函数来处理。此时，浏览器背后的循环正在不断遍历事件队列，在Ajax操作完成之前，事件队列里还是空的（并不是发出请求这一动作被加入事件队列，而是请求完成这一事件才会加入队列）。如果Ajax操作完成了，这个队列中就会增加一个事件，随后被循环遍历到，如果这个事件绑定了一个回调方法，那么循环就会去调用这个方法。</p>\n<p>1.1node中的事件循环\n事件循环同样运行在单线程环境下，JavaScript的事件循环是依靠浏览器实现的，而Node作为另一种运行时，事件循环由底层的libuv实现。</p>\n<p><img src=\"/sjxh1.png\" alt=\"事件循环\"></p>\n<p>事件循环分成6个不同的阶段：</p>\n<p>1.1.1 Timers：这个阶段主要用来处理定时器相关的回调，当一个定时器超时后，一个事件就会加入到队列中，事件循环会跳转至这个阶段会执行对应的回调函数。定时器的回调会在触发后尽可能早地被调用，这表示实际的延时可能会比定时器规定的时间要长。如果事件循环，此时正在执行一个比较耗时的回调，或者是处理一个比较耗时的循环，那么定时器的回调只能等当前回调执行结束了才会被执行，即被阻塞。事实上，timers阶段的执行受到poll阶段控制。</p>\n<p>1.1.2 I/O callbacks：大多数的回调方法在这个阶段执行，除了timers、 close和setImmediate事件的回调。事实上从源码来看，该阶段只是用来执行pending callback，例如TCP 的 error。而一些常见的回调，例如fs.readFile的回调是放在poll阶段来执行的。</p>\n<p>1.1.3 idle, prepare：仅仅在内部使用。</p>\n<p>1.1.4 Poll：轮询，不断检查有没有新的IO事件，事件循环可能会在这里阻塞。poll阶段的主要任务是等待新的事件出现（该阶段使用epoll来获取新的事件），如果没有，事件循环可能会在此阻塞。Poll阶段主要有两个步骤如下：（1）如果有到期的定时器，那么就执行定时器的回调方法。（2）如果这时没有要处理的定时器的回调方法，则会进行下面的判断：（1）如果poll队列不为空，则事件循环会按照顺序遍历执行队列中的回调函数，这个过程是同步的。（2）如果poll队列为空，会接着进行如下判断：如果当前代码定义了setImmediate方法，事件循环会离开poll阶段，然后进入check阶段去执行setImmediate方法定义的回调方法。如果当前代码没有定义setImmediate方法，那么事件循环可能会进入等待状态，并等待新的事件出现，这也是该阶段为什么会被命名为poll（轮询）的原因。此外，还会不断检查是否有相关的定时器超时，如果有，就会跳转到timers阶段，然后执行对应的回调。</p>\n<p>1.1.5 Check：处理setImmediate()事件的回调。setImmediate是一个特殊的定时器方法，它占据了事件循环的一个阶段，整个check阶段就是为setImmediate方法而设置的。一般情况下，当事件循环到达poll阶段后，就会检查当前代码是否调用了setImmediate，但如果一个回调函数是被setImmediate方法调用的，事件循环就会跳出poll阶段进而进入check阶段。</p>\n<p>1.1.6 close callbacks：处理一些close相关的事件，例如socket.on('close', ...)。如果一个socket或者一个句柄被关闭，那么就会产生一个close事件，该事件会被加入到对应的队列中。close阶段执行完毕后，本轮事件循环结束，循环进入到下一轮。</p>\n<p>注意：这些方法本质上是顺序调用，用代码描述一下大约就是这种结构：</p>\n<p><img src=\"/sjxh2.png\" alt=\"事件循环\"></p>\n<p>假设事件循环现在进入了某个阶段（即开始执行上面其中一个方法），即使在这期间有其他队列中的事件就绪，也会先将当前阶段队列里的全部回调方法执行完毕后，再进入到下个阶段。</p>\n<p>1.2 process.nextTick\nprocess.nextTick就是定义出一个异步动作，并且让这个动作在事件循环当前阶段结束后执行。</p>\n<p>process.nextTick并不是事件循环的一部分，但它的回调方法也是由事件循环调用的，该方法定义的回调方法会被加入到名为nextTickQueue的队列中。</p>\n<p>在事件循环的任何阶段，如果nextTickQueue不为空，都会在当前阶段操作结束后优先执行nextTickQueue中的回调函数，当nextTickQueue中的回调方法被执行完毕后，事件循环才会继续向下执行。</p>\n<p>Node限制了nextTickQueue的大小，如果递归调用了process.nextTick，那么当nextTickQueue达到最大限制后会抛出一个错误。</p>\n<p>nextTick定义的回调也是由事件循环执行的，如果nextTick的回调方法中出现了阻塞操作，后面的要执行的回调同样会被阻塞。</p>\n<p>setImmediate方法不属于ECMAScript标准，而是Node提出的新方法。</p>\n<p>它同样将一个回调函数加入到事件队列中，不同于setTimeout和setInterval，setImmediate并不接受一个时间作为参数。</p>\n<p>setImmediate的事件会在当前事件循环的结尾触发，对应的回调方法会在当前事件循环末尾（check阶段）执行。</p>\n<p>setImmediate方法和process.nextTick方法很相似，二者经常被拿来放在一起比较，由于process.nextTick会在当前操作完成后立刻执行，因此总会在setImmediate之前执行。</p>\n<p>此外，当有递归的异步操作时只能使用setImmediate，不能使用process.nextTick，但可以使用setImmediate因为setImmediate不会生成call stack。</p>\n<p>setImmediate方法会在poll阶段结束后执行，而setTimeout会在规定的时间到期后执行，当代码中同时存在这两个方法时，回调函数的执行顺序不是固定的。</p>\n<p>但如果将二者放在一个IO操作的回调中，则永远是setImmediate先执行，这是因为readFile的回调执行时，事件循环位于poll阶段，因此事件循环会先进入check阶段执行setImmediate的回调，然后再进入timers阶段执行setTimeout的回调。</p>\n<p>--《新时期的node.js入门》</p>\n"},{"path":"/posts/node同步异步阻塞非阻塞.html","title":"node的同步/异步/阻塞/非阻塞","date":"2021-03-24","fontNum":2741,"description":"\r\n1.node 是什么\r\n\r\nnode是JavaScript的一个运行环境\r\n\r\nnode底层使用c实现\r\n\r\n语法遵循ECMAScript\r\n\r\nnode中例如fs模块和Buffer是对ECMAScript的扩展\r\n\r\n \r\n\r\n2.node内部机制\r\n\r\n在cpu完成任务之前cpu任何情况下都不会暂停或者停止执行\r\n\r\ncpu如何执行和同步或是异步，阻塞或是非阻塞都是没有必然关系\r\n\r\n","tags":["javascript"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<p>1.node 是什么</p>\n<p>node是JavaScript的一个运行环境</p>\n<p>node底层使用c++实现</p>\n<p>语法遵循ECMAScript</p>\n<p>node中例如fs模块和Buffer是对ECMAScript的扩展</p>\n<p>2.node内部机制</p>\n<p>在cpu完成任务之前cpu任何情况下都不会暂停或者停止执行</p>\n<p>cpu如何执行和同步或是异步，阻塞或是非阻塞都是没有必然关系</p>\n<p>操作系统始终保证cpu处在运行状态，是通过调度来实现的，</p>\n<p>具体一点就是通过在不同的进程和线程间切换实现的</p>\n<p>3.回调是什么</p>\n<p>回调值通过函数参数的参数传递到其他代码，某段可执行代码的引用</p>\n<p>(简单说就是将一个函数作为参数传递给另一个函数，并且作为参数的函数可以被执行)</p>\n<p>本质上是一个高阶函数</p>\n<p>高阶函数: (1)接受一个或多个函数作为输入(2)输出一个函数</p>\n<p>主程序调用-&gt;底层调用调用-&gt;回调函数</p>\n<p>回调方法和主线程处于同一层级</p>\n<p>***回调函数调用既可以是同步的例如map方法，也可以是异步的例如setTimeout中的异步回调</p>\n<p>单线程语言例如php在完成i/o前会阻塞</p>\n<p>而node遇到i/o 操作后会发起一个调用然后继续向下执行</p>\n<p>等待i/o操做完成后再执行对应的回调函数，即异步</p>\n<p>虽然在单线程的情况下依靠异步+回调的方式，也能实现对高并发的支持</p>\n<p>4.同步/异步/阻塞/非阻塞</p>\n<p>同步和异步描述的是进程/线程的调用方式</p>\n<p>同步指进程/线程发起调用后 一直等到调用返回后才继续执行下一步的操作</p>\n<p>这并不代表cpu在这一段时间内也会一直等待</p>\n<p>操作系统会切换到另一个进程/线程上去</p>\n<p>等到调用返回后再切换回原来的进程/线程</p>\n<p>异步就是与之相反，发起调用后，进程/线程继续向下执行</p>\n<p>当调用返回后，通过<strong>某种手段</strong>来通知调用者</p>\n<p>注意：<strong>同步异步中的调用返回</strong>是指内核进程将数据复制到调用进程（linux环境下）</p>\n<p>**javaScript的异步是依靠浏览器内部的runtime（解释器/运行环境）内部其他线程来实现的</p>\n<p>并非JavaScript本身的功能，是浏览器让javaScript看起来像是一个异步的语言**</p>\n<p>4.1阻塞/非阻塞</p>\n<p>阻塞与非阻塞是针对i/o状态而言的</p>\n<p>关注程序在等待i/o调用返回的这段时间的状态</p>\n<p>阻塞/非阻塞 和 同步/异步 完全是两组概念</p>\n<p>他们之间没有必然的联系</p>\n<p>除了存粹的<strong>AIO</strong>之外阻塞和非阻塞i/o都是同步的</p>\n<p>i/o即输入输出 是指在内存和外部设备（磁盘，终端，网络）之间复制数据的过程</p>\n<hr>\n<p>在node中i/o特指node程序在libuv支持下与系统磁盘和网络交互的过程</p>\n<p>i/o调用的结果如何返回给调用的进程/线程</p>\n<p>是通过内核进程复制给调用进程</p>\n<p>linux下用户无法访问内核空间</p>\n<p>通常采用copy_to_user方法来传递数据</p>\n<p>大致流程就是i/o的数据会先被内核空间读取</p>\n<p>然后内核将数据复制给用户进程</p>\n<p>（零复制技术，内核进程和用户进程共享一块内存地址，这避免的内存的复制）</p>\n<p>4.2 i/o编程模型</p>\n<p>编程模型是指  操作系统在处理i/o时所 采用的方式</p>\n<p>为了解决i/o 速度比较慢</p>\n<p>编程模型有以下几种</p>\n<p>1.阻塞i/o</p>\n<p>2.非阻塞i/o 和阻塞i/o的区别是用户进程会不断查询内核的状态，这个过程是同步的</p>\n<p>3.事件驱动i/o 以轮询的方式来查询内核的运行状态</p>\n<p>和非阻塞i/o 的区别是一个进程可能会管理多个i/o请求</p>\n<p>注：select和poll都是i/o服用的机制</p>\n<p>node使用epoll（改进后的poll）</p>\n<p>4.异步i/o 当进程发出调用后，内核会立刻返回结果</p>\n<p>进程会继续做其他的事情，知道操作系统返回数据</p>\n<p>给用户进程发送一个信号</p>\n<p>注意**************异步i/o并没有涉及任何关于回调函数的概念</p>\n<p>这里的异步i/o只存在于linux系统下</p>\n<p>node是真实的非阻塞而node中的异步i/o是依靠libuv模拟出来的</p>\n<hr>\n<p>总结：同步调用会造成调用进程的i/o阻塞</p>\n<p>异步调用不会造成调用进程的阻塞</p>\n<p>5.单线程多线程~~~~~~~~~~</p>\n<p>node并没有提供多线程的支持</p>\n<p>用于运行代码的事件循环也是单线程运行的</p>\n<p>开发者无法在一个独立的进程中增加新的线程</p>\n<p>但可以派生出多个进程来达到并行完成工作的目的</p>\n<p>另一方面node的底层实现并非单线程</p>\n<p>libuv会通过类似的线程池的实现来模拟不同操作系统下的异步操作</p>\n<p>总结： 开发者的代码是运行在单线程环境中</p>\n<p>因为libuv中是有线程池的概念存在</p>\n<p>所以node都是依靠单线程运行的说法是错误的*******************</p>\n<p>libuv是一个跨平台的异步i/o库</p>\n<p>结合了unix下的libev和windows下的iopc的特性</p>\n<p>专门为node提供多平台下的异步i/o支持</p>\n<p>libuv是用c++实现的</p>\n<p>node中的非阻塞i/o以及事件循环的底层机制都是由libuv来实现的</p>\n<p>在windows环境下libuv使用iocp（i/o completion port）来实现异步i/o</p>\n<p>在非windows环境下libuv使用多线程来模拟异步i/o</p>\n<p>例如readFile 读取文件的系统室友libuv来完成的node只负责调用libuv的接口</p>\n<p>等数据返回后再执行对应的回调方法</p>\n<p>6.并发和并行</p>\n<p>并发是希望计算机做更多的事情</p>\n<p>并行是希望计算机能更快地完成任务</p>\n<p>d单线程的高并发通常是依靠 异步+事件驱动（循环）来实现的</p>\n<p>异步使得代码在面对多个请求时不会发生阻塞</p>\n<p>事件循环提供了i/o调用结束后调用回调函数的能力</p>\n<hr>\n<p>总结：除了你的代码一切都是并行的***************************</p>\n"},{"path":"/posts/为什么require加载模块是同步的.html","title":"为什么require()加载模块是同步的","date":"2021-03-26","fontNum":288,"description":"\r\n一方面，由于模块的个数往往有限，且Node会自动缓存已经加载的模块，\r\n再加上访问的都是本地文件，产生的IO开销几乎可以忽略。\r\n再有，Node程序运行在服务器端，很少遇到需要频繁重启服务的情况，\r\n那么就算在服务启动时在加载上花点时间（几秒）也没有什么影响。\r\n\r\nNode会自动缓存经过require引入的文件，\r\n\r\n使得下次再引入不需要经过文件系统而是直接从缓存中读取。\r\n这种缓存是基于","tags":["javascript"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<p>一方面，由于模块的个数往往有限，且Node会自动缓存已经加载的模块，\n再加上访问的都是本地文件，产生的IO开销几乎可以忽略。\n再有，Node程序运行在服务器端，很少遇到需要频繁重启服务的情况，\n那么就算在服务启动时在加载上花点时间（几秒）也没有什么影响。</p>\n<p>Node会自动缓存经过require引入的文件，</p>\n<p>使得下次再引入不需要经过文件系统而是直接从缓存中读取。\n这种缓存是基于文件路径定位的，这表示即使有两个完全相同的文件，</p>\n<p>但它们位于不同的路径下，也会在缓存中维持两份。\n可以通过console.log(require.cache) 查看</p>\n"},{"path":"/posts/node脚本中的this返回.html","title":"为什么node脚本中的this返回{}","date":"2021-03-27","fontNum":674,"description":"\r\n在Node Repl（控制台，命令行）环境中，全局的this指向global对象。\r\n浏览器环境下指向window\r\nvar a = 3\r\nconsole.log(global.a) //3\r\n使用var声明会成为global的属性\r\n\r\n脚本中（文件中） 打印全局this 输出{}\r\nconsole.log(this) // {}\r\nvar a = 3\r\nconsole.log(global","tags":["javascript"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<p>在Node Repl（控制台，命令行）环境中，全局的this指向global对象。\n浏览器环境下指向window\nvar a = 3\nconsole.log(global.a) //3\n使用var声明会成为global的属性</p>\n<p>脚本中（文件中） 打印全局this 输出{}\nconsole.log(this) // {}\nvar a = 3\nconsole.log(global.a)//undefined\nNode脚本文件中定义的全局this又指向module.exports。</p>\n<p>总结：在Node repl环境中控制台的全局this和global可以看作是同一对象，而在脚本文件中，二者并不等价。</p>\n<p>全局作用域中，如果一个变量没有用var、let或者const之类的关键字修饰，那么它就是属于全局作用域，\n定义在全局作用域上的变量可以通过global对象访问到。\na = 3\nconsole.log(global.a)//3\n在代码文件顶层（不在任何方法，对象中）使用var、let或者const修饰的变量都位于模块作用域中，\n不同模块作用域之间的作用域是隔离的。模块作用域中的this指向module.exports\nthis.a = 3\nconsole.log(module.exports.a)//3</p>\n<p>Node Repl和脚本文件执行会有不同的结果，这是因为Node会将所有的脚本文件进行包装\n(function(......){undefined\n......\n})</p>\n"},{"path":"/posts/禁用es_lint.html","title":"禁用es-lint","date":"2021-03-27","fontNum":47,"description":"\r\n 禁用es-lint\r\n\r\n![禁用es-lint](/es-lint.png)\r\n","tags":["javascript"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<h3>禁用es-lint</h3>\n<p><img src=\"/es-lint.png\" alt=\"禁用es-lint\"></p>\n"},{"path":"/posts/css宽度区别.html","title":"width：100%和width：auto的区别","date":"2021-03-29","fontNum":120,"description":"\r\n width：100% 是指子元素的content的内容和父元素content的内容一样宽\r\n\r\n width：auto是指子元素的contentpaddingbordermargin值等于parent的content","tags":["javascript"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<h3>width：100% 是指子元素的content的内容和父元素content的内容一样宽</h3>\n<h3>width：auto是指子元素的content+padding+border+margin值等于parent的content</h3>\n"},{"path":"/posts/vue2自定义组件.html","title":"vue2.0 自定义组件","date":"2021-04-01","fontNum":524,"description":"\r\njavascript\r\n方式一\r\n \r\n \r\n<!DOCTYPE html>\r\n<html>\r\n \r\n<head></head>\r\n \r\n<body>\r\n    <div id=\"app\">\r\n        <custom-button></custom-button>\r\n    </div>\r\n    <script src=\"https://cdn.jsdelivr.net/npm","tags":["javascript"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">方式一\n \n \n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n \n&lt;head&gt;&lt;/head&gt;\n \n&lt;body&gt;\n    &lt;div id=&quot;app&quot;&gt;\n        &lt;custom-button&gt;&lt;/custom-button&gt;\n    &lt;/div&gt;\n    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;\n    &lt;script type=&quot;text/javascript&quot;&gt;\n        const CustomButton = {\n            template: '&lt;button&gt;自定义按钮&lt;/button&gt;'\n        }\n        new Vue({\n            el: '#app',\n            components: {\n                CustomButton\n            }\n        })\n    &lt;/script&gt;\n&lt;/body&gt;\n \n&lt;/html&gt;\n</code></pre>\n"},{"path":"/posts/vue2自定义事件.html","title":"vue2 自定义事件","date":"2021-04-03","fontNum":660,"description":"\r\njavascript\r\n<!DOCTYPE html>\r\n<html>\r\n \r\n<head></head>\r\n \r\n<body>\r\n    <div id=\"app\">\r\n    </div>\r\n    <script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\r\n    <script type=\"text/","tags":["javascript"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n \n&lt;head&gt;&lt;/head&gt;\n \n&lt;body&gt;\n    &lt;div id=&quot;app&quot;&gt;\n    &lt;/div&gt;\n    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;\n    &lt;script type=&quot;text/javascript&quot;&gt;\n        const events = new Vue()\n        let count = 0\n        function logCount() {\n            count++\n            console.log(`打印了-${count}-次`);\n        }\n        events.$on('test-event', logCount) //监听事件\n        setInterval(() =&gt; {\n            events.$emit('test-event')//每秒 触发事件\n        }, 1000)\n        setTimeout(() =&gt; {\n            events.$off('test-event')//十秒后 移除事件\n        }, 10000)\n    &lt;/script&gt;\n&lt;/body&gt;\n \n&lt;/html&gt;\n</code></pre>\n"},{"path":"/posts/node使用fork创建子进程.html","title":"node使用fork创建子进程","date":"2021-04-05","fontNum":830,"description":"\r\njavascript\r\n//master.js\r\n \r\nconst child_process = require('child_process')\r\n//使用fork创建子进程  子进程worker.js 参数['args1']\r\nconst worker = child_process.fork('worker.js', ['args1'])\r\n//监听exit 事件\r\nworker","tags":["javascript"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">//master.js\n \nconst child_process = require('child_process')\n//使用fork创建子进程  子进程worker.js 参数['args1']\nconst worker = child_process.fork('worker.js', ['args1'])\n//监听exit 事件\nworker.on('exit', () =&gt; {\n    console.log('child progress exit');\n})\n//向子进程发送\nworker.send({ hello: 'child' })\n//监听子进程发来的信息\nworker.on('message', (msg) =&gt; {\n    console.log('from child', msg);\n})\n \n//**************************************\n \n//worker.js\n \n//process.argv为一个数组 0 存放node.exe的路径 , 1存放worker.js ,2 存放master里fork传来的参数\nconsole.log('process.argv', process.argv);\n//子进程\nconst begin = process.argv[2]\n \nconsole.log('i am worker ' + begin);\n//监听master传来的message\nprocess.on('message', (msg) =&gt; {\n    console.log('from parent', msg);\n    process.exit();\n})\n//向master发送信息\nprocess.send({ hello: 'parent' })\n</code></pre>\n"},{"path":"/posts/forof遍历iterator.html","title":"给对象部署iterator 来使用for of遍历","date":"2021-04-07","fontNum":601,"description":"\r\njavascript\r\n//部署iterator\r\nfunction MyIter(array) {\r\n    this.array = array\r\n}\r\nMyIter.prototype[Symbol.iterator] = function () {\r\n    let index = 0\r\n    let next = () => {\r\n        if (index < th","tags":["javascript"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">//部署iterator\nfunction MyIter(array) {\n    this.array = array\n}\nMyIter.prototype[Symbol.iterator] = function () {\n    let index = 0\n    let next = () =&gt; {\n        if (index &lt; this.array.length) {\n            return {\n                value: this.array[index++],\n                done: false\n            }\n        } else {\n            return { value: undefined, done: true }\n        }\n    }\n    return { next }\n}\n \nconst myIter = new MyIter([&quot;a&quot;, &quot;b&quot;])\nconsole.log(myIter); //MyIter { array: [ 'a', 'b' ] }\n \nfor (let i of myIter) {\n    console.log(i);//a,b\n}\n</code></pre>\n"},{"path":"/posts/js中子类的静态方法能够通过super来调用父类的静态方法.html","title":"js中子类的静态方法能够通过super来调用父类的静态方法","date":"2021-04-09","fontNum":273,"description":"\r\njavascript\r\n//js中子类的静态方法能够通过super来调用父类的静态方法\r\nclass Person {\r\n    static getName() {\r\n        return 'lear'\r\n    }\r\n}\r\n \r\nclass Student extends Person {\r\n    static getName2() {\r\n        return su","tags":["javascript"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">//js中子类的静态方法能够通过super来调用父类的静态方法\nclass Person {\n    static getName() {\n        return 'lear'\n    }\n}\n \nclass Student extends Person {\n    static getName2() {\n        return super.getName() + ',hi'\n    }\n}\n \nconsole.log(Student.getName2());\n</code></pre>\n"},{"path":"/posts/js柯里化.html","title":"js柯里化","date":"2021-04-09","fontNum":1291,"description":"\r\njavascript\r\n//js柯里化\r\n//部分求值\r\n//通过闭包保存传入的参数\r\n//在真正需要求值的时候，之前传入的所有参数都会被一次性求值\r\n \r\n//eg 计算每月开销\r\n \r\n//普通写法\r\n// let mothlyCost = 0\r\n// const cost = function (money) {\r\n//     mothlyCost = money\r\n// }\r","tags":["javascript"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">//js柯里化\n//部分求值\n//通过闭包保存传入的参数\n//在真正需要求值的时候，之前传入的所有参数都会被一次性求值\n \n//eg 计算每月开销\n \n//普通写法\n// let mothlyCost = 0\n// const cost = function (money) {\n//     mothlyCost += money\n// }\n// 柯里化\n// const cost = (function () {\n//     const args = []//存放传入的值\n//     return function () {\n//         if (arguments.length === 0) {\n//             let money = 0\n//             for (let i = 0, l = args.length; i &lt; l; i++) {\n//                 money += args[i]\n//             }\n \n//             return money\n//         } else {\n//             [].push.apply(args,arguments)\n//         }\n//     }\n// })()\n \n// cost(100)\n// cost(200)\n// cost(300)\n \n// console.log(cost());\n \n \nconst curring = function (fn) {\n    const args = []\n    return function () {\n        if (arguments.length === 0) { //不传参时调用fn\n            return fn.apply(this, args)\n        } else {\n            [].push.apply(args, arguments) //将参数push进args\n        }\n    }\n}\n \nconst cost = (function () {\n    let money = 0\n    return function () {\n        for (let i = 0, l = arguments.length; i &lt; l; i++) {\n            money += arguments[i]\n        }\n        return money\n    }\n})()\n \nconst total = curring(cost)\n \ntotal(100)\ntotal(200)\ntotal(300)\n \nconsole.log(total());\n</code></pre>\n"},{"path":"/posts/node通过events.EventEmitter注册事件.html","title":"node通过events.EventEmitter注册事件","date":"2021-04-10","fontNum":319,"description":"\r\njavascript\r\nconst events = require('events')\r\nconst eventEmitter = events.EventEmitter\r\nclass Producer extends eventEmitter {\r\n \r\n}\r\n \r\nconst producer = new Producer();\r\n//注册监听事件\r\nproducer.on('st","tags":["javascript"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">const events = require('events')\nconst eventEmitter = events.EventEmitter\nclass Producer extends eventEmitter {\n \n}\n \nconst producer = new Producer();\n//注册监听事件\nproducer.on('start', () =&gt; {\n    console.log('start game');\n    console.log('this:', this);\n})\n//触发事件\nproducer.emit('start')\n</code></pre>\n"},{"path":"/posts/两数之和.html","title":"两数之和","date":"2021-04-10","fontNum":395,"description":"\r\njavascript\r\nvar twoSum = function (nums, target) {\r\n \r\n    const arr = JSON.parse(JSON.stringify(nums))\r\n    const len = nums.length\r\n    for (let i = 0; i < len; i) {\r\n        let one = arr.sh","tags":["javascript"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">var twoSum = function (nums, target) {\n \n    const arr = JSON.parse(JSON.stringify(nums))\n    const len = nums.length\n    for (let i = 0; i &lt; len; i++) {\n        let one = arr.shift()\n        if (arr.includes(target - one)) {\n            return [i, arr.findIndex(val =&gt; {\n                return val === target - one\n            }) + i + 1]\n        }\n    }\n \n};\n</code></pre>\n"},{"path":"/posts/js 动态规划法.html","title":"js 动态规划法","date":"2021-04-11","fontNum":341,"description":"\r\njavascript\r\nfunction fb(n) {\r\n    if (n < 2) return n\r\n    const store = new Array(n).fill(0)\r\n    store[0] = 1\r\n    store[1] = 1\r\n    for (let i = 2; i < n; i) {\r\n        store[i] = store[i - ","tags":["动态规划"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">function fb(n) {\n    if (n &lt; 2) return n\n    const store = new Array(n).fill(0)\n    store[0] = 1\n    store[1] = 1\n    for (let i = 2; i &lt; n; i++) {\n        store[i] = store[i - 1] + store[i - 2]\n    }\n    return store[n - 1]\n}\n \nconsole.log(fb(100));\n</code></pre>\n<h3>js动态规划法求斐波那契额数列，代码如上。100的斐波那契结果354224848179262000000</h3>\n"},{"path":"/posts/最长回文子串_中心扩散法.html","title":"最长回文子串-中心扩散法","date":"2021-04-12","fontNum":835,"description":"\r\njavascript\r\nvar longestPalindrome = function (s) {\r\n \r\n    const strArr = []\r\n \r\n    const len = s.length\r\n \r\n    if (len < 2) return s\r\n \r\n    for (let i = 0; i < len; i) {\r\n        let j = 0,","tags":["中心扩散法"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">var longestPalindrome = function (s) {\n \n    const strArr = []\n \n    const len = s.length\n \n    if (len &lt; 2) return s\n \n    for (let i = 0; i &lt; len; i++) {\n        let j = 0, k = 0\n \n        while (s[i - j] &amp;&amp; s[i + j] &amp;&amp; s[i - j] === s[i + j]) {\n            j++\n        }\n        strArr.push(s.slice(i - j + 1, i + j))\n        j = 0\n \n        while (s[i + 1] &amp;&amp; s[i + 1] === s[i] &amp;&amp; s[i - k] &amp;&amp; s[i + 1 + k] &amp;&amp; s[i - k] === s[i + 1 + k]) {\n            k++\n        }\n        strArr.push(s.slice(i - k + 1, i + k + 1))\n        k = 0\n    }\n \n    return strArr.sort((a, b) =&gt; {\n        return b.length - a.length\n    })[0]\n};\n \n \nconsole.log(longestPalindrome('bb'));\nconsole.log(longestPalindrome('bab'));\nconsole.log(longestPalindrome('b'));\nconsole.log(longestPalindrome('baba'));\n</code></pre>\n"},{"path":"/posts/传统命令模式js实现.html","title":"传统命令模式js实现","date":"2021-04-14","fontNum":1000,"description":"\r\njavascript\r\n<!DOCTYPE html>\r\n<html>\r\n \r\n<head></head>\r\n \r\n<body>\r\n    <button id=\"execute\">打开</button>\r\n    <button id=\"undo\">关闭</button>\r\n</body>\r\n<script>\r\n    //接收者(执行者)\r\n    const TV = {\r\n   ","tags":["javascript"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n \n&lt;head&gt;&lt;/head&gt;\n \n&lt;body&gt;\n    &lt;button id=&quot;execute&quot;&gt;打开&lt;/button&gt;\n    &lt;button id=&quot;undo&quot;&gt;关闭&lt;/button&gt;\n&lt;/body&gt;\n&lt;script&gt;\n    //接收者(执行者)\n    const TV = {\n        open: function () {\n            console.log('打开电视机');\n        },\n        close: function () {\n            console.log('关闭电视机');\n        }\n    }\n    //调用者\n    const OpenTvCommand = function (receiver) {\n        this.receiver = receiver\n    }\n    OpenTvCommand.prototype.execute = function () {\n        this.receiver.open()\n    }\n    OpenTvCommand.prototype.undo = function () {\n        this.receiver.close()\n    }\n    //执行\n    const setCommand = function (command) {\n        document.getElementById('execute').onclick = function () {\n            command.execute()\n        }\n        document.getElementById('undo').onclick = function () {\n            command.undo()\n        }\n    }\n \n    setCommand(new OpenTvCommand(TV))\n&lt;/script&gt;\n \n&lt;/html&gt;\n</code></pre>\n<h3>调用者-接收者(执行者)-执行</h3>\n"},{"path":"/posts/最长回文子串.html","title":"最长回文子串","date":"2021-04-14","fontNum":1410,"description":"\r\njavascript\r\n//最长回文子串动态规划法解决\r\n \r\nlet longestPalindrome = function (s) {\r\n    let len = s.length;\r\n    if (len < 2) return s\r\n \r\n    //记录最长子串长度和开始位置\r\n    let maxLen = 1;\r\n    let begin = 0;\r\n \r\n   ","tags":["动态规划"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">//最长回文子串动态规划法解决\n \nlet longestPalindrome = function (s) {\n    let len = s.length;\n    if (len &lt; 2) return s\n \n    //记录最长子串长度和开始位置\n    let maxLen = 1;\n    let begin = 0;\n \n    //生成二维数组len x len初始化为null\n    let store = new Array(len).fill(0).map(() =&gt; {\n        return new Array(len).fill(0)\n    })\n \n    //store[i][j]代表：[i,j]区间的string是否回文，是1否0\n \n    // 对角线部分都是单个字母 值置为 1\n    for (let i = 0; i &lt; len; i++) {\n        store[i][i] = 1;\n    }\n \n \n \n    // 求次对角线 dp[i][i+1] 核心dp[i][j]=dp[i+1][j−1]&amp;&amp;(s[i]==s[j])\n    for (let j = 1; j &lt; len; j++) {\n        for (let k = 0; k &lt; j; k++) {\n            if (s[j] != s[k]) {    //s[k]的值和s[j]不相等 就置为 0 这种情况下肯定不会出现回文\n                store[k][j] = 0;\n            } else {\n                // 两个字符相同的情况 即s[j] === s[k] 且j - k &lt; 3必然为回文\n                if (j - k &lt; 3) {\n                    store[k][j] = 1;\n                } else {\n                    // s[j] === s[k] 两端值相等，其子串是回文，则其也是回文\n                    store[k][j] = store[k + 1][j - 1]; // 根据核心 dp[i][j]=dp[i+1][j−1] 由二维数组左下角推导右上角\n                }\n            }\n \n            if (store[k][j] &amp;&amp; j - k + 1 &gt; maxLen) { //store[k][j]为1 并且 j - k + 1 &gt; maxLen 差值大于maxLen\n                maxLen = j - k + 1;\n                begin = k; //字符串开始的位置\n            }\n        }\n        // console.log(maxLen, begin)\n    }\n    return s.substring(begin, begin + maxLen);\n}\n</code></pre>\n"},{"path":"/posts/Z字形变换.html","title":"Z 字形变换","date":"2021-04-15","fontNum":1336,"description":"\r\njavascript\r\nvar convert = function (s, numRows) {\r\n    //numRows行\r\n    if (numRows < 2) {\r\n        return s\r\n    }\r\n    const mid = numRows - 2 //中间列\r\n    const len = s.length\r\n    //求列\r\n \r\n    i","tags":["javascript"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">var convert = function (s, numRows) {\n    //numRows行\n    if (numRows &lt; 2) {\n        return s\n    }\n    const mid = numRows - 2 //中间列\n    const len = s.length\n    //求列\n \n    if (len &lt; 2) {\n        return s\n    }\n    let count = Math.floor(len / (numRows + mid)) * (mid + 1)\n \n    // console.log(count, 'count');\n    const tmp = len % (numRows + mid)\n    // console.log(tmp, 'tmp');\n    if (tmp &lt; numRows) {\n        count = count + 1\n    } else {\n        count = count + 1 + (tmp - numRows)\n    }\n    console.log(count);\n    //生成二维数组 numRows行 count列\n    const store = new Array(numRows).fill('').map(() =&gt; {\n        return new Array(count).fill('')\n    })\n    let j = 0, k = 0, flag = true\n    for (let i = 0; i &lt; len; i++) {\n        if (j === numRows) {\n            flag = false\n            j = j - 2\n            k++\n        }\n        if (j === 0) {\n            flag = true\n        }\n        if (flag) {\n            store[j][k] = s[i]\n            j++\n        } else {\n            store[j][k] = s[i]\n            j--\n            k++\n        }\n \n    }\n    const result = []\n    for (const e of store) {\n        for (const f of e) {\n            if (f !== '') {\n                result.push(f)\n            }\n        }\n    }\n \n \n    return result.join('')\n \n \n};\n</code></pre>\n"},{"path":"/posts/整数反转.html","title":"整数反转","date":"2021-04-16","fontNum":401,"description":"\r\njavascript\r\nvar reverse = function (x) {\r\n    let flag = true\r\n    if (x < 0) {\r\n        flag = false\r\n        x = Math.abs(x)\r\n    }\r\n    let result = Number(x.toString().split('').reverse().joi","tags":["javascript"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">var reverse = function (x) {\n    let flag = true\n    if (x &lt; 0) {\n        flag = false\n        x = Math.abs(x)\n    }\n    let result = Number(x.toString().split('').reverse().join(''))\n    if (result &gt; Math.pow(2, 31) - 1 || result &lt; Math.pow(-2, 31)) {\n        return 0\n    }\n    if (flag) {\n        return result\n    } else {\n        return 0 - result\n    }\n \n};\n</code></pre>\n"},{"path":"/posts/AOP面向切面编程.html","title":"js AOP(面向切面编程)","date":"2021-04-17","fontNum":977,"description":"\r\njavascript\r\n//AOP(面向切面编程)\r\n//把一些和核心业务逻辑模块无关的功能抽离出来\r\n//例如 日志统计，安全控制，异常处理模块\r\n// 通常实现方式，将函数动态织入到另一个函数中\r\n// 这里通过扩展Function.prototype来实现\r\n \r\nFunction.prototype.before = function (beforeFn) {\r\n    cons","tags":["javascript"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">//AOP(面向切面编程)\n//把一些和核心业务逻辑模块无关的功能抽离出来\n//例如 日志统计，安全控制，异常处理模块\n// 通常实现方式，将函数动态织入到另一个函数中\n// 这里通过扩展Function.prototype来实现\n \nFunction.prototype.before = function (beforeFn) {\n    const that = this // 保存原函数的引用\n \n    return function () { // 返回包含了原函数和新函数的‘代理’函数\n        beforeFn.apply(this) // 执行新函数，修正this\n \n        that.apply(this) //执行原函数\n    }\n}\n \nFunction.prototype.after = function (afterFn) {\n    const that = this // 保存原函数的引用\n \n    return function () {\n        that.apply(this) // 执行原函数，修正this\n \n        afterFn.apply(this) // 执行新函数\n    }\n}\n \nlet fun = function () {\n    console.log(2);\n}\n \nfun = fun.before(function () {\n    console.log(1);\n}).after(function () {\n    console.log(3);\n})\n \nfun()\n \n// fun = function () {\n//   console.log(2);\n//}\n \n// function() {\n//     console.log(1);\n//     console.log(2);\n// }\n \n// function() {\n//     console.log(1);\n//     console.log(2);\n//     console.log(3);\n// }\n</code></pre>\n"},{"path":"/posts/字符串转换为整数.html","title":"字符串转换为整数","date":"2021-04-17","fontNum":659,"description":"\r\njavascript\r\nvar myAtoi = function (s) {\r\n    let t = s.trim()\r\n    let str = ''\r\n    s = s.trim()\r\n    if (t[0] === '-') {\r\n        str = '-'\r\n        s = s.slice(1)\r\n    }\r\n \r\n    if (t[0] === ","tags":["javascript"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">var myAtoi = function (s) {\n    let t = s.trim()\n    let str = ''\n    s = s.trim()\n    if (t[0] === '-') {\n        str += '-'\n        s = s.slice(1)\n    }\n \n    if (t[0] === '+') {\n        s = s.slice(1)\n    }\n \n    for (const e of s) {\n        const t = e.charCodeAt()\n        if (t &gt;= 48 &amp;&amp; t &lt;= 57) {\n            str += e\n        } else {\n            break\n        }\n \n    }\n    if (str &gt; Math.pow(2, 31) - 1) {\n        return Math.pow(2, 31) - 1\n    }\n \n    if (str &lt; Math.pow(-2, 31)) {\n        return Math.pow(-2, 31)\n    }\n \n    if (str === '-') {\n        return 0\n    }\n    return Number(str)\n};\n</code></pre>\n"},{"path":"/posts/斐波那契_不同路径问题.html","title":"斐波那契-不同路径问题","date":"2021-04-17","fontNum":978,"description":"\r\njavascript\r\n// 暴力递归-斐波那契\r\nfunction fb(n) {\r\n    if (n < 2) return n\r\n    return fb(n - 1)  fb(n - 2)\r\n}\r\n \r\nconsole.log(fb(2));\r\n \r\n//动态规划法-斐波那契\r\nfunction fb(n) {\r\n    if (n < 2) return n\r\n    c","tags":["动态规划"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">// 暴力递归-斐波那契\nfunction fb(n) {\n    if (n &lt; 2) return n\n    return fb(n - 1) + fb(n - 2)\n}\n \nconsole.log(fb(2));\n \n//动态规划法-斐波那契\nfunction fb(n) {\n    if (n &lt; 2) return n\n    const store = new Array(n).fill(0)\n    store[0] = 1\n    store[1] = 1\n    for (let i = 2; i &lt; n; i++) {\n        store[i] = store[i - 1] + store[i - 2]\n    }\n    return store[n - 1]\n}\n \nconsole.log(fb(100));\n \n//动态规划法相当于对 store[100] = store[99]+store[98]......+store[1] 求和\n//而普通的递归相当于对1-100的每一个值都执行了一遍上述的操作\n \n//动态规划法-不同路径问题\nfunction path(x, y) {\n    const store = new Array(x).fill(new Array(y).fill(0))\n    store[0][0] = 0\n    store[0][1] = 1\n    store[1][0] = 1\n \n    for (let i = 1; i &lt; x; i++) {\n        for (let j = 1; j &lt; y; j++) {\n            store[i][j] = store[i - 1][j] + store[i][j - 1]\n        }\n    }\n \n \n    return store[x - 1][y - 1]\n}\n \nconsole.log(path(7, 3));\n//******动态规划法核心思想******\n//1.建立状态转移方程\n//2.缓存并复用以往结果\n//3.按顺序从小往大算\n</code></pre>\n"},{"path":"/posts/回文数.html","title":"回文数","date":"2021-04-18","fontNum":192,"description":"\r\njavascript\r\n var isPalindrome = function (x) {\r\n    if (Number(x.toString().split('').reverse().join('')) === x) {\r\n        return true\r\n    } else {\r\n        return false\r\n    }\r\n};\r\n","tags":["javascript"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\"> var isPalindrome = function (x) {\n    if (Number(x.toString().split('').reverse().join('')) === x) {\n        return true\n    } else {\n        return false\n    }\n};\n</code></pre>\n"},{"path":"/posts/正则表达式匹配.html","title":"正则表达式匹配","date":"2021-04-19","fontNum":122,"description":"\r\njavascript\r\nvar isMatch = function (s, p) {\r\n    const reg = new RegExp(^${p}$)\r\n    return reg.test(s)\r\n \r\n};\r\n","tags":["javascript"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">var isMatch = function (s, p) {\n    const reg = new RegExp(`^${p}$`)\n    return reg.test(s)\n \n};\n</code></pre>\n"},{"path":"/posts/双指针法求盛最多水的容器.html","title":"双指针法求盛最多水的容器","date":"2021-04-20","fontNum":561,"description":"\r\njavascript\r\n //双指针法\r\nvar maxArea = function (height) {\r\n    let max = 0\r\n    const len = height.length\r\n    let left = 0\r\n    let right = len - 1\r\n \r\n \r\n \r\n    while (true) {\r\n        if (Math.mi","tags":["javascript"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\"> //双指针法\nvar maxArea = function (height) {\n    let max = 0\n    const len = height.length\n    let left = 0\n    let right = len - 1\n \n \n \n    while (true) {\n        if (Math.min(height[left], height[right]) * (right - left) &gt; max) {\n            max = Math.min(height[left], height[right]) * (right - left)\n        }\n        if (height[left] &lt; height[right]) {\n            left++\n        } else {\n            right--\n        }\n \n        if (left === right) {\n            break\n        }\n    }\n \n \n    return max\n \n};\n</code></pre>\n"},{"path":"/posts/整数转罗马数字.html","title":"整数转罗马数字","date":"2021-04-21","fontNum":533,"description":"\r\njavascript\r\n var intToRoman = function (num) {\r\n    if (num > 3999 || num < 1) {\r\n        return\r\n    }\r\n \r\n    const nums = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\r\n    const roma","tags":["javascript"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\"> var intToRoman = function (num) {\n    if (num &gt; 3999 || num &lt; 1) {\n        return\n    }\n \n    const nums = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    const roman = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I'];\n    let result = '';\n    while (num) {\n        if (num &gt;= nums[0]) {\n            result += roman[0];\n            num -= nums[0];\n        } else {\n            nums.shift();\n            roman.shift();\n        }\n    }\n    return result;\n \n};\n</code></pre>\n"},{"path":"/posts/罗马数字转整数.html","title":"罗马数字转整数","date":"2021-04-22","fontNum":455,"description":"\r\njavascript\r\n var romanToInt = function (s) {\r\n    const map = {\r\n        I: 1,\r\n        V: 5,\r\n        X: 10,\r\n        L: 50,\r\n        C: 100,\r\n        D: 500,\r\n        M: 1000\r\n    }\r\n    let re","tags":["javascript"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\"> var romanToInt = function (s) {\n    const map = {\n        I: 1,\n        V: 5,\n        X: 10,\n        L: 50,\n        C: 100,\n        D: 500,\n        M: 1000\n    }\n    let result = 0;\n    for (let i = 0; i &lt; s.length; i++) {\n        let val = map[s[i]]\n        if (val &lt; map[s[i + 1]]) {\n            val = map[s[i + 1]] - val;\n            i++;\n        }\n        result += val;\n    }\n    return result\n};\n&lt;/script&gt;\n</code></pre>\n"},{"path":"/posts/最长公共前缀.html","title":"最长公共前缀","date":"2021-04-23","fontNum":527,"description":"javascript\r\nvar longestCommonPrefix = function (strs) {\r\n    if (strs.length === 0) return ''\r\n \r\n    if (strs.length === 1) return strs[0]\r\n \r\n    strs.sort((a, b) => a.length - b.length)\r\n    con","tags":["javascript"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">var longestCommonPrefix = function (strs) {\n    if (strs.length === 0) return ''\n \n    if (strs.length === 1) return strs[0]\n \n    strs.sort((a, b) =&gt; a.length - b.length)\n    const min = strs[0]\n    const len = min.length\n \n    let i = 0, flag = false\n    for (i; i &lt; len; i++) {\n        for (const e of strs) {\n            if (e[i] !== min[i]) {\n                flag = true\n                break\n            }\n        }\n        if (flag) break\n    }\n \n \n    return min.slice(0, i)\n};\n</code></pre>\n"},{"path":"/posts/element_ui搭建复杂表格.html","title":"element ui 搭建复杂表格","date":"2021-04-24","fontNum":5626,"description":"![域名配置](/ympz1.png)\r\njavascript\r\n <template>\r\n  <div>\r\n    <el-table\r\n      :data=\"tableData\"\r\n      :span-method=\"arraySpanMethod\"\r\n      style=\"width: 100%; margin-top: 20px\"\r\n      :header-cell-","tags":["element_ui"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<p><img src=\"/ympz1.png\" alt=\"域名配置\"></p>\n<pre><code class=\"language-javascript\"> &lt;template&gt;\n  &lt;div&gt;\n    &lt;el-table\n      :data=&quot;tableData&quot;\n      :span-method=&quot;arraySpanMethod&quot;\n      style=&quot;width: 100%; margin-top: 20px&quot;\n      :header-cell-style=&quot;headerStyle&quot;\n    &gt;\n      &lt;el-table-column\n        prop=&quot;id&quot;\n        label=&quot;123&quot;\n        ref=&quot;pj&quot;\n        colspan=&quot;2&quot;\n        align=&quot;center&quot;\n      &gt;\n      &lt;/el-table-column&gt;\n \n      &lt;el-table-column&gt;\n        &lt;el-table-column prop=&quot;f1&quot;&gt; &lt;/el-table-column&gt;\n        &lt;el-table-column prop=&quot;f2&quot;&gt; &lt;/el-table-column&gt;\n      &lt;/el-table-column&gt;\n \n      &lt;el-table-column prop=&quot;rrr&quot; label=&quot;444&quot; align=&quot;center&quot;&gt; &lt;/el-table-column&gt;\n \n      &lt;el-table-column prop=&quot;amount1&quot; label=&quot;555&quot; align=&quot;center&quot;&gt;\n        &lt;el-table-column prop=&quot;amount1&quot; label=&quot;666&quot; align=&quot;center&quot;&gt;\n          &lt;el-table-column prop=&quot;amount1&quot; label=&quot;77&quot; align=&quot;center&quot;&gt;\n          &lt;/el-table-column&gt;\n          &lt;el-table-column prop=&quot;amount1&quot; label=&quot;88&quot; align=&quot;center&quot;&gt;\n          &lt;/el-table-column&gt;\n        &lt;/el-table-column&gt;\n        &lt;el-table-column prop=&quot;amount1&quot; label=&quot;99&quot; align=&quot;center&quot;&gt;\n          &lt;el-table-column prop=&quot;amount1&quot; label=&quot;1111&quot; align=&quot;center&quot;&gt;\n          &lt;/el-table-column&gt;\n          &lt;el-table-column prop=&quot;amount1&quot; label=&quot;222&quot; align=&quot;center&quot;&gt;\n          &lt;/el-table-column&gt;\n        &lt;/el-table-column&gt;\n      &lt;/el-table-column&gt;\n \n      &lt;el-table-column prop=&quot;amount3&quot; label=&quot;cccc&quot; align=&quot;center&quot;&gt;\n      &lt;/el-table-column&gt;\n    &lt;/el-table&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n \n  &lt;script&gt;\nexport default {\n  name: &quot;HelloWorld&quot;,\n  data() {\n    return {\n      formData: {},\n      tableData: [\n        {\n          f1: &quot;xxxxxx&quot;,\n          id: &quot;qqqqq&quot;,\n          name: &quot;王小虎&quot;,\n          amount1: &quot;234&quot;,\n          amount2: &quot;3.2&quot;,\n          amount3: 10,\n        },\n        {\n          f1: &quot;sssss&quot;,\n          id: &quot;&quot;,\n          name: &quot;王小虎&quot;,\n          amount1: &quot;165&quot;,\n          amount2: &quot;4.43&quot;,\n          amount3: 12,\n        },\n        {\n          f1: &quot;dddddddddd&quot;,\n          id: &quot;&quot;,\n          name: &quot;王小虎&quot;,\n          amount1: &quot;324&quot;,\n          amount2: &quot;1.9&quot;,\n          amount3: 9,\n        },\n        {\n          f1: &quot;rrrrrrr&quot;,\n          f2: &quot;ddddd&quot;,\n          id: &quot;&quot;,\n          name: &quot;王小虎&quot;,\n          amount1: &quot;621&quot;,\n          amount2: &quot;2.2&quot;,\n          amount3: 17,\n        },\n        {\n          id: &quot;&quot;,\n          f2: &quot;fffffffffff&quot;,\n          name: &quot;cccccccccccc&quot;,\n          amount1: &quot;539&quot;,\n          amount2: &quot;4.1&quot;,\n          amount3: 15,\n        },\n        {\n          id: &quot;&quot;,\n          f2: &quot;22222222&quot;,\n          name: &quot;王小虎&quot;,\n          amount1: &quot;539&quot;,\n          amount2: &quot;4.1&quot;,\n          amount3: 15,\n        },\n        {\n          id: &quot;rrrrrrr&quot;,\n          name: &quot;mmmmmm&quot;,\n          amount1: &quot;539&quot;,\n          amount2: &quot;4.1&quot;,\n          amount3: 15,\n        },\n        {\n          f1: &quot;xxxxxxx&quot;,\n          id: &quot;ggggggg&quot;,\n          name: &quot;王小虎&quot;,\n          amount1: &quot;539&quot;,\n          amount2: &quot;4.1&quot;,\n          amount3: 15,\n        },\n        {\n          id: &quot;&quot;,\n          f1: &quot;nnnnnnnn&quot;,\n          name: &quot;王小虎&quot;,\n          amount1: &quot;539&quot;,\n          amount2: &quot;4.1&quot;,\n          amount3: 15,\n        },\n        {\n          id: &quot;&quot;,\n          f1: &quot;vvvvvvvvvv&quot;,\n          name: &quot;王小虎&quot;,\n          amount1: &quot;539&quot;,\n          amount2: &quot;4.1&quot;,\n          amount3: 15,\n        },\n        {\n          id: &quot;&quot;,\n          f1: &quot;ggg&quot;,\n          f2: &quot;bbbb&quot;,\n          name: &quot;王小虎&quot;,\n          amount1: &quot;539&quot;,\n          amount2: &quot;4.1&quot;,\n          amount3: 15,\n        },\n        {\n          id: &quot;&quot;,\n          f2: &quot;hhhhhh&quot;,\n          name: &quot;王小虎&quot;,\n          amount1: &quot;539&quot;,\n          amount2: &quot;4.1&quot;,\n          amount3: 15,\n        },\n        {\n          id: &quot;&quot;,\n          f2: &quot;tttttttt&quot;,\n \n          name: &quot;王小虎&quot;,\n          amount1: &quot;539&quot;,\n          amount2: &quot;4.1&quot;,\n          amount3: 15,\n        },\n      ],\n    };\n  },\n  methods: {\n    headerStyle({ row, column, rowIndex, columnIndex }) {\n      if (rowIndex === 1 &amp;&amp; columnIndex === 0) {\n        return { display: &quot;none&quot; };\n      }\n \n      if (rowIndex === 1 &amp;&amp; columnIndex === 1) {\n        return { display: &quot;none&quot; };\n      }\n \n      if (rowIndex === 0 &amp;&amp; columnIndex === 1) {\n        return { display: &quot;none&quot; };\n      }\n \n      if (rowIndex === 0 &amp;&amp; columnIndex === 0) {\n        this.$nextTick(() =&gt; {\n          document\n            .getElementsByClassName(column.id)[0]\n            .setAttribute(&quot;colSpan&quot;, 3);\n        });\n      }\n    },\n    arraySpanMethod({ row, column, rowIndex, columnIndex }) {\n      if (columnIndex === 0) {\n        if (rowIndex === 0) {\n          return [6, 1];\n        } else if (rowIndex === 6) {\n          return [1, 3];\n        } else if (rowIndex === 7) {\n          return [6, 1];\n        } else {\n          return [0, 0];\n        }\n      }\n \n      if (columnIndex === 1) {\n        if (rowIndex === 0 || rowIndex === 1 || rowIndex === 2) {\n          return [1, 2];\n        } else if (rowIndex === 3) {\n          return [3, 1];\n        } else if (rowIndex === 7 || rowIndex === 8 || rowIndex === 9) {\n          return [1, 2];\n        } else if (rowIndex === 10) {\n          return [3, 1];\n        } else {\n          return [0, 0];\n        }\n      } else if (columnIndex === 2) {\n        if (\n          rowIndex === 0 ||\n          rowIndex === 1 ||\n          rowIndex === 2 ||\n          rowIndex === 6 ||\n          rowIndex === 7 ||\n          rowIndex === 8 ||\n          rowIndex === 9\n        ) {\n          return [0, 0];\n        } else {\n          return [1, 1];\n        }\n      }\n    },\n  },\n};\n&lt;/script&gt;\n</code></pre>\n"},{"path":"/posts/三数之和嵌套循环求四数之和.html","title":"三数之和嵌套循环求四数之和","date":"2021-04-29","fontNum":995,"description":"\r\njavascript\r\nvar fourSum = function (nums, target) {\r\n    const len = nums.length\r\n    nums = nums.sort((a, b) => a - b)\r\n    if (len < 4) return []\r\n    const result = new Set()\r\n \r\n    for (let ","tags":["javascript"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">var fourSum = function (nums, target) {\n    const len = nums.length\n    nums = nums.sort((a, b) =&gt; a - b)\n    if (len &lt; 4) return []\n    const result = new Set()\n \n    for (let j = 0; j &lt; len; j++) {\n        const value = nums[j]\n        for (let i = j + 1; i &lt; len; i++) {\n            const item = nums[i]\n \n            const aim = target - item - value\n            let left = i + 1\n            let right = len - 1\n            while (left &lt; right) {\n                const sum = nums[left] + nums[right]\n \n                if (sum === aim) {\n                    result.add([value, item, nums[left], nums[right]].toString())\n                    left++\n                    right--\n                } else if (sum &gt; aim) {\n                    right--\n                } else if (sum &lt; aim) {\n                    left++\n                }\n            }\n        }\n    }\n \n    return Array.from(result).map(item =&gt;\n        item.split(',')\n    )\n \n};\n</code></pre>\n"},{"path":"/posts/移除元素.html","title":"移除元素","date":"2021-04-29","fontNum":360,"description":"\r\njavascript\r\nconst del = function (nums, val) {\r\n    const len = nums.length\r\n    for (let i = 0; i < len; i) {\r\n        if (nums[i] === val) {\r\n            nums.splice(i, 1)\r\n            return","tags":["javascript"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">const del = function (nums, val) {\n    const len = nums.length\n    for (let i = 0; i &lt; len; i++) {\n        if (nums[i] === val) {\n            nums.splice(i, 1)\n            return del(nums, val)\n        }\n    }\n}\nvar removeElement = function (nums, val) {\n    del(nums, val)\n    // console.log(nums);\n    return nums.length\n};\n</code></pre>\n"},{"path":"/posts/排序双指针法求最接近的三数和.html","title":"排序双指针法求最接近的三数和","date":"2021-05-06","fontNum":1049,"description":"\r\njavascript\r\nvar threeSumClosest = function (nums, target) {\r\n    const len = nums.length\r\n    nums = nums.sort((a, b) => a - b)\r\n    if (len < 3) {\r\n        return []\r\n    }\r\n \r\n    let min = Mat","tags":["javascript"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">var threeSumClosest = function (nums, target) {\n    const len = nums.length\n    nums = nums.sort((a, b) =&gt; a - b)\n    if (len &lt; 3) {\n        return []\n    }\n \n    let min = Math.abs(target - (nums[0] + nums[1] + nums[2])) //假设最小差值\n    let result = 0\n    for (let i = 0; i &lt; len; i++) {\n        const item = nums[i]\n \n        let left = i + 1\n        let right = len - 1\n \n        while (left &lt; right) {\n            const sum = item + nums[left] + nums[right]//求和\n            const diff = Math.abs(target - sum) //求差值的绝对值\n            if (sum &lt; target) {\n                if (diff &lt;= min) {\n                    min = diff\n                    result = sum\n                }\n                left++\n            } else if (sum &gt; target) {\n                if (diff &lt;= min) {\n                    min = diff\n                    result = sum\n                }\n                right--\n            } else if (sum === target) {\n                return sum\n            }\n        }\n    }\n    return result\n};\n</code></pre>\n"},{"path":"/posts/排序双指针解决三数之和问题.html","title":"排序双指针解决三数之和问题","date":"2021-05-08","fontNum":899,"description":"\r\njavascript\r\nvar threeSum = function (nums) {\r\n    const len = nums.length\r\n    nums = nums.sort((a, b) => a - b)\r\n    if (len < 3) {\r\n        return []\r\n    }\r\n \r\n    const result = new Set()\r\n \r","tags":["javascript"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">var threeSum = function (nums) {\n    const len = nums.length\n    nums = nums.sort((a, b) =&gt; a - b)\n    if (len &lt; 3) {\n        return []\n    }\n \n    const result = new Set()\n \n    for (let i = 0; i &lt; len; i++) {\n        const item = nums[i]\n        if (item &gt; 0) {\n            break\n        }\n        const target = 0 - item\n        let left = i + 1\n        let right = len - 1\n        while (left &lt; right) {\n            const sum = nums[left] + nums[right]\n \n            if (sum === target) {\n                result.add([item, nums[left], nums[right]].toString())\n                left++\n                right--\n            } else if (sum &gt; target) {\n                right--\n            } else if (sum &lt; target) {\n                left++\n            }\n        }\n    }\n \n    return Array.from(result).map(item =&gt;\n        item.split(',')\n    )\n};\n</code></pre>\n"},{"path":"/posts/删除有序数组中的重复项.html","title":"删除有序数组中的重复项","date":"2021-05-15","fontNum":314,"description":"\r\njavascript\r\nvar removeDuplicates = function (nums) {\r\n    const dic = {}\r\n    for (let i = 0; i < nums.length; i) {\r\n        const e = nums[i]\r\n        if (!dic[e]) {\r\n            dic[e] = 1\r\n ","tags":["javascript"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">var removeDuplicates = function (nums) {\n    const dic = {}\n    for (let i = 0; i &lt; nums.length; i++) {\n        const e = nums[i]\n        if (!dic[e]) {\n            dic[e] = 1\n        } else {\n            nums.splice(i, 1)\n            i--\n        }\n    }\n    return nums.length\n};\n</code></pre>\n"},{"path":"/posts/DFS递归求解电话号码的字母组合.html","title":"DFS递归求解 电话号码的字母组合","date":"2021-05-17","fontNum":1004,"description":"\r\njavascript\r\n//找所有的解 ------ 搜索算法 ------ 深度优先/广度优先\r\n \r\n//深度优先\r\nconst dic = {\r\n    0: ' ',\r\n    1: '',\r\n    2: ['a', 'b', 'c'],\r\n    3: ['d', 'e', 'f'],\r\n    4: ['g', 'h', 'i'],\r\n    5: ['j', 'k', '","tags":["javascript"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">//找所有的解 ------ 搜索算法 ------ 深度优先/广度优先\n \n//深度优先\nconst dic = {\n    0: ' ',\n    1: '',\n    2: ['a', 'b', 'c'],\n    3: ['d', 'e', 'f'],\n    4: ['g', 'h', 'i'],\n    5: ['j', 'k', 'l'],\n    6: ['m', 'n', 'o'],\n    7: ['p', 'q', 'r', 's'],\n    8: ['t', 'u', 'v'],\n    9: ['w', 'x', 'y', 'z'],\n \n}\n \nvar letterCombinations = function (digits) {\n    const result = []\n    let str = ''\n    const len = digits.length\n    if (len &lt; 1) return []\n \n    handle(digits, index = 0, result, str)\n \n    return result\n};\n \nfunction handle(digits, index, result, str) {\n    let self = str // 保存一个str 的备份\n    if (index === digits.length) {\n        result.push(str)\n        return\n    }  //递归终止条件\n    const digit = digits[index] //遍历digits\n    const letters = dic[digit] //查找字典\n    for (const e of letters) {//遍历对应的字母 a b c\n        str += e\n        handle(digits, index + 1, result, str)\n        str = self //重置str\n    }\n}\n \nconsole.log(letterCombinations('23'));\n</code></pre>\n"},{"path":"/posts/git基础操作.html","title":"git 基础操作 拉取 / 删除 / 查看commit / 撤销commit","date":"2021-05-17","fontNum":396,"description":"\r\ngit 拉取远程分支\r\n \r\n1. 在远程新建分支\r\n \r\n2. git fetch //更新本地的远程分支\r\n \r\n3. git branch -r 查看远程分支是否存在\r\n \r\n4. git checkout -b 本地分支 远程分支 //例子 git checkout -b bendi origin/bendi   会自动创建本地分支并关联到远程分支\r\n \r\ngit 删除远程分支\r\n \r","tags":["git"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<p>git 拉取远程分支</p>\n<ol>\n<li>\n<p>在远程新建分支</p>\n</li>\n<li>\n<p>git fetch //更新本地的远程分支</p>\n</li>\n<li>\n<p>git branch -r 查看远程分支是否存在</p>\n</li>\n<li>\n<p>git checkout -b 本地分支 远程分支 //例子 git checkout -b bendi origin/bendi   会自动创建本地分支并关联到远程分支</p>\n</li>\n</ol>\n<p>git 删除远程分支</p>\n<ol>\n<li>git push origin --delete 远程分支名(不带origin)</li>\n</ol>\n<p>git 删除本地分支</p>\n<ol>\n<li>git branch -D 本地分支名</li>\n</ol>\n<p>查看以往的commit</p>\n<p>git log</p>\n<p>撤销最上层的commit\ngit reset --soft HEAD~</p>\n<p>撤销n次commit\ngit reset --soft HEAD~n</p>\n"},{"path":"/posts/括号生成.html","title":"括号生成","date":"2021-05-21","fontNum":937,"description":"\r\njavascript\r\nvar generateParenthesis = function (n) {\r\n    let outArr = []\r\n    handle(1, '(', outArr, 1, n)\r\n    return outArr\r\n};\r\n//layers为括号层次\r\n//str为符合的字符串\r\n//outArr为返回的数组\r\n//currentNums为当前的括","tags":["javascript"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">var generateParenthesis = function (n) {\n    let outArr = []\n    handle(1, '(', outArr, 1, n)\n    return outArr\n};\n//layers为括号层次\n//str为符合的字符串\n//outArr为返回的数组\n//currentNums为当前的括号对数\n//totalNums为总共的括号对数\nfunction handle(layers, str, outArr, currentNums, totalNums) {\n    if (currentNums === totalNums) { //判断当前括号对数是否 与总括号对数相等\n        while (layers &gt; 0) {//根据括号层次来补')'\n            str += &quot;)&quot;\n            layers--\n        }\n        outArr.push(str)\n        return\n    }\n    if (layers &gt; 0) { //判断括号层次是否大于0\n        handle(layers + 1, str + '(', outArr, currentNums + 1, totalNums) //大于0 补'(' 层次加1 字符串加 '(' 括号对数加1\n        handle(layers - 1, str + ')', outArr, currentNums, totalNums) //另一种情况 大于0 补')' 层次减1 字符串加 ')' 括号对数不变\n    } else {\n        handle(layers + 1, str + '(', outArr, currentNums + 1, totalNums) //当前字符串已存在'(' ')' 匹配的情况下 只能添加'(' 层次加1 括号对数加1\n    }\n}\nconsole.log(generateParenthesis(3));\n</code></pre>\n"},{"path":"/posts/递归实现indexof实现strStr.html","title":"递归实现indexof 实现 strStr()","date":"2021-05-22","fontNum":1426,"description":"\r\njavascript\r\nvar strStr = function (haystack, needle) {\r\n \r\n    if (needle === '') {\r\n        return 0\r\n    }\r\n \r\n    if (haystack === '' && needle !== '') {\r\n        return -1\r\n    }\r\n \r\n \r\n    i","tags":["javascript"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">var strStr = function (haystack, needle) {\n \n    if (needle === '') {\n        return 0\n    }\n \n    if (haystack === '' &amp;&amp; needle !== '') {\n        return -1\n    }\n \n \n    if (haystack === '' &amp;&amp; needle === '') {\n        return 0\n    }\n    let result = []\n \n    for (let i = 0; i &lt; haystack.length; i++) {\n        const arr = [0, 0]\n \n        if (haystack[i] === needle[0]) {\n            let tmpStr = haystack.slice(i)\n            if (tmpStr.length &gt;= needle.length) {\n                result.push(handle(haystack.slice(i), needle, arr, i))\n            }\n        } else {\n            result.push(-1)\n        }\n \n    }\n    const out = []\n    for (const e of result) {\n        if (e &gt; -1) {\n            out.push(e)\n        }\n    }\n    if (out.length === 0) {\n        return -1\n    }\n    return Math.min(...out)\n};\nfunction handle(haystack, needle, arr, index) {\n    if (arr[0] === haystack.length &amp;&amp; arr[1] !== needle.length) {\n        return -1\n    }\n \n    if (arr[1] === needle.length) {\n \n        return arr[0] - arr[1] + index\n    }\n \n    const i = arr[0]\n    const j = arr[1]\n \n    if (haystack[i] === needle[j]) {\n        arr[1]++\n    }\n    if (haystack[i] !== needle[j]) {\n        arr[1] = 0\n    }\n \n    arr[0]++\n \n    return handle(haystack, needle, arr, index)\n}\n \n// console.log(strStr(&quot;hello&quot;, &quot;ll&quot;));\nconsole.log(strStr(&quot;a&quot;, &quot;a&quot;));\n</code></pre>\n"},{"path":"/posts/两数相除.html","title":"两数相除","date":"2021-05-24","fontNum":841,"description":"\r\njavascript\r\nvar divide = function (dividend, divisor) {\r\n    //dividend 为被除数 divisor 为除数\r\n    //记录符号\r\n    let flag1 = dividend >= 0\r\n    let flag2 = divisor >= 0\r\n    //转换成正数\r\n    dividend = Math","tags":["动态规划法"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">var divide = function (dividend, divisor) {\n    //dividend 为被除数 divisor 为除数\n    //记录符号\n    let flag1 = dividend &gt;= 0\n    let flag2 = divisor &gt;= 0\n    //转换成正数\n    dividend = Math.abs(dividend)\n    divisor = Math.abs(divisor)\n    //对除数进行翻倍 存储待用\n    let count = 1\n    const arr = []\n    while (dividend &gt;= divisor) {\n        arr.push([count, divisor])\n        divisor += divisor\n        count += count\n    }\n    //让被除数不断减去arr中小于它的除数,从arr中最大的值开始减\n    let sum = 0 //记录除数的个数\n    const len = arr.length\n    for (let i = len - 1; i &gt;= 0 &amp;&amp; dividend &gt; 0; i--) {\n        let [count, divisor] = arr[i]\n        if (dividend &gt;= divisor) {\n            dividend -= divisor\n            sum += count\n        }\n    }\n \n    return flag1 === flag2 ? Math.min(sum, 2147483648 - 1) : -Math.min(sum, 2147483648)\n};\n</code></pre>\n"},{"path":"/posts/快速排序.html","title":"快速排序","date":"2021-05-27","fontNum":627,"description":"\r\njavascript\r\nfunction quickSort(arr) {\r\n    const len = arr.length\r\n    //递归调用退出的条件\r\n    if (len <= 1) return arr\r\n    //设置参考值\r\n    let index = Math.floor(len / 2)\r\n    let standard = arr[index]\r\n","tags":["javascript"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">function quickSort(arr) {\n    const len = arr.length\n    //递归调用退出的条件\n    if (len &lt;= 1) return arr\n    //设置参考值\n    let index = Math.floor(len / 2)\n    let standard = arr[index]\n \n    //从原数组截取这个值\n    arr.splice(index, 1)\n \n    const leftArr = [] //存放比standard小的值\n    const rightArr = []//存放比standard大的值\n    //与standard比较大小\n    for (const e of arr) {\n        e &lt; standard ? leftArr.push(e) : rightArr.push(e)\n    }\n    //递归调用\n    return [...quickSort(leftArr), standard, ...quickSort(rightArr)]\n}\n \n \nconst arr = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\n \nconsole.log(quickSort(arr));\n&lt;/style&gt;\n</code></pre>\n"},{"path":"/posts/串联所有单词的子串.html","title":"串联所有单词的子串","date":"2021-05-30","fontNum":1030,"description":"\r\njavascript\r\nvar findSubstring = function (s, words) {\r\n    const res = []\r\n    if (s.length === 0 || words.length === 0) return res\r\n    const sLen = s.length //字符串s的长度\r\n    const wordsLen = word","tags":["javascript"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">var findSubstring = function (s, words) {\n    const res = []\n    if (s.length === 0 || words.length === 0) return res\n    const sLen = s.length //字符串s的长度\n    const wordsLen = words.join('').length//words元素组成字符串的长度\n    const wordLen = words[0].length//每个word的长度\n    const len = sLen - wordsLen//字符串s和和words元素组成字符串的长度的差值(外层循环的次数)\n    if (sLen &lt; wordsLen) return res\n \n    for (let left = 0; left &lt;= len; left++) {//如果len为0也得循环1次所以是小于等于\n        const tempArr = words.slice()//创建一个words的副本\n        for (let right = left; right &lt; left + wordsLen; right += wordLen) { //截取每个字符串中word长度判断tempArr中是否存在,存在即删除该元素\n            const str = s.slice(right, right + wordLen)\n            const index = tempArr.indexOf(str);\n            if (index &gt; -1) {\n                tempArr.splice(index, 1);\n            } else {\n                break;\n            }\n        }\n \n        if (tempArr.length === 0) {//最终判断tempArr的长度是否为空，为空即表示每个word都存在\n            res.push(left);\n        }\n    }\n \n    return res\n}\n</code></pre>\n"},{"path":"/posts/webpack打包vue项目.html","title":"webpack打包vue项目","date":"2021-06-05","fontNum":1566,"description":"\r\ncnpm 安装\r\n\r\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\r\n\r\n或者 npm install -g cnpm\r\n\r\n \r\n\r\n创建如下文件目录\r\n\r\n \r\n\r\nwebpackDemo\r\n\r\n app\r\n\r\n main.js\r\n\r\n app.js\r\n\r\n common\r\n\r\n","tags":["javascript"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<p>cnpm 安装</p>\n<p>npm install -g cnpm --registry=https://registry.npm.taobao.org</p>\n<p>或者 npm install -g cnpm</p>\n<p>创建如下文件目录</p>\n<p>webpackDemo</p>\n<h2>app</h2>\n<h4>main.js</h4>\n<h4>app.js</h4>\n<h2>common</h2>\n<h4>index.html</h4>\n<h2>webpack.config.js</h2>\n<p>安装依赖</p>\n<p>npm install webpack@4 --save-dev</p>\n<p>npm install webpack@4 webpack-cli --save-dev</p>\n<p>main.js</p>\n<pre><code class=\"language-javascript\">const greeter = require('./app.js');\n\ndocument.querySelector(&quot;#root&quot;).appendChild(greeter());\n\n//将dom对象添加到document对象上\n</code></pre>\n<p>app.js</p>\n<pre><code class=\"language-javascript\">module.exports = function () {\n    const greet = document.createElement('div');\n\n    greet.textContent = &quot;welcome to use webpack!&quot;;\n\n    return greet;\n\n}//创建一个dom对象\n</code></pre>\n<p>index.html</p>\n<pre><code class=\"language-html\">&lt;!doctype html&gt;\n\n&lt;html lang=&quot;en&quot;&gt;\n\n \n\n&lt;head&gt;\n\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n\n    &lt;title&gt;Document&lt;/title&gt;\n\n&lt;/head&gt;\n\n \n\n&lt;body&gt;\n\n    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;\n\n    &lt;script type=&quot;text/javascript&quot; src=&quot;index.js&quot;&gt;&lt;/script&gt; //通过webpack打包生成的index.js文件\n\n&lt;/body&gt;\n\n \n\n&lt;/html&gt;\n</code></pre>\n<pre><code class=\"language-javascript\">webpack.config.js\n\n//配置webpack打包的入口和打包后文件存放的位置\n\nmodule.exports = {\n    // webpack4需要添加这个配置，development为开发环境，production为生产环境\n\n    mode: 'development',\n\n    entry: __dirname + '\\\\app\\\\main.js', // 入口文件\n\n    output: {\n        path: __dirname + '\\\\common', // 打包后的文件存放的地方\n\n        filename: 'index.js' // 打包后输出文件的文件名\n\n    }\n\n}\n</code></pre>\n<p>node_modules/.bin/webpack .\\app\\main.js .\\common\\index.js      需要保证两个文件存在</p>\n<p>node_modules/.bin/webpack      需要在webpack.config.js进行配置</p>\n<p>打包成功后运行index.html即可看到效果</p>\n"},{"path":"/posts/js连续赋值问题.html","title":"js连续赋值问题","date":"2021-06-07","fontNum":436,"description":"\r\njavascript\r\nlet a = {\r\n    b: 42\r\n}\r\n \r\nlet d = a\r\na.x = a = { c: 44 } //最先调用的是 a.x (因为 . 的优先级高于 = ) a.x 为undefined 这里的a指向 { b: 42 }\r\n// 然后a指向{ c: 44 } 再把指向{ b: 42 }也就是之前的a的x赋值为{ c: 44 }\r\n \r\ncons","tags":["javascript"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">let a = {\n    b: 42\n}\n \nlet d = a\na.x = a = { c: 44 } //最先调用的是 a.x (因为 . 的优先级高于 = ) a.x 为undefined 这里的a指向 { b: 42 }\n// 然后a指向{ c: 44 } 再把指向{ b: 42 }也就是之前的a的x赋值为{ c: 44 }\n \nconsole.log('a.x', a.x); //这里的a指向赋值之后的a即{ c: 44 }\nconsole.log('d', d); //d { b: 42, x: { c: 44 } }\n \n \nlet a = { n: 1 };\n \nlet b = a\n \na.n = a = { n: 2 };\nconsole.log(a.n); // 输出2\nconsole.log(b);// 输出{ n: { n: 2 } }\n&lt;/style&gt;\n</code></pre>\n"},{"path":"/posts/最长有效括号.html","title":"求最长有效括号","date":"2021-06-11","fontNum":931,"description":"\r\njavascript\r\n//动态规划法 求 最长有效括号\r\nvar longestValidParentheses = function (s) {\r\n    //生成长度为s.length 的dp数组并用0进行填充\r\n    let dp = new Array(s.length).fill(0), max = 0\r\n    for (let i = 1; i < s.length; ","tags":["动态规划法"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">//动态规划法 求 最长有效括号\nvar longestValidParentheses = function (s) {\n    //生成长度为s.length 的dp数组并用0进行填充\n    let dp = new Array(s.length).fill(0), max = 0\n    for (let i = 1; i &lt; s.length; i++) {\n        //发现右括号\n        if (s[i] === ')') {\n            //判断右括号的上一个括号是否为左括号\n            if (s[i - 1] === '(') {\n                //i小于1的情况下 符合就是有一对括号 长度为 2 没有则取数组默认值0\n                dp[i] = i &gt; 1 ? dp[i - 2] + 2 : 2\n                // dp[i - 1] 为i-1的最长有效括号长度\n                // 1. i的长度要大于  i-1的最长有效括号长度 保证i-1前还有有括号\n                // 2. 并且i-1字符串前的括号为 左括号\n            } else if (i - dp[i - 1] &gt; 0 &amp;&amp; s[i - dp[i - 1] - 1] === '(') {\n                //求已经符合的字符串外部的字符串是否还有符合的 (去除 i - dp[i - 1] - 2 长度后)\n                dp[i] = ((i - dp[i - 1] - 2) &gt;= 0 ? dp[i - dp[i - 1] - 2] : 0) + dp[i - 1] + 2\n            }\n        }\n        //比较得出最大的有效括号长度\n        max = Math.max(max, dp[i])\n    }\n    return max\n};\n</code></pre>\n"},{"path":"/posts/搭建Electron环境.html","title":"搭建Electron环境","date":"2021-06-12","fontNum":506,"description":"\r\n 1. 升级vue-cli到3.0以上版本\r\n\r\n 2. vue create demo\r\n\r\n 3. cd demo\r\n\r\n 4. vue add electron-builder\r\n\r\n 5. npm install --save-dev electron \r\n\r\n这里用cnpm安装 npm安装不上\r\n\r\n 6. npm run electron:ser","tags":["electron"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<h3>1. 升级vue-cli到3.0以上版本</h3>\n<h3>2. vue create demo</h3>\n<h3>3. cd demo</h3>\n<h3>4. vue add electron-builder</h3>\n<h3>5. npm install --save-dev electron</h3>\n<p>这里用cnpm安装 npm安装不上</p>\n<h3>6. npm run electron:serve</h3>\n<blockquote>\n<p>启动项目</p>\n</blockquote>\n<p>每次npm run electron:build 会很慢甚至无法下载\n设置Electron镜像地址\nnpm config set electron_mirror https://mirrors.huaweicloud.com/electron/</p>\n<p>设置electron_builder_binaries镜像地址\nnpm config set electron_builder_binaries_mirror https://mirrors.huaweicloud.com/electron-builder-binaries/</p>\n<p>控制台快捷键ctrl+shift+i</p>\n"},{"path":"/posts/div可以滚动但不显示滚动条.html","title":"div可以滚动但不显示滚动条","date":"2021-06-15","fontNum":1635,"description":" 需要个div，\r\n\r\n 第1个固定大小是600*800px\r\n\r\n 第2个不固定大小要用第3个div把个撑开但是这个div必需要有滚动条，\r\n\r\n 第3个固定大小与第1个div保持一致600*800\r\nhtml\r\n<html>\r\n \r\n<head></head>\r\n \r\n<body>\r\n    <div style=\"width:800px;height:600px","tags":["javascript"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<h3>需要个div，</h3>\n<h3>第1个固定大小是600*800px</h3>\n<h3>第2个不固定大小要用第3个div把个撑开但是这个div必需要有滚动条，</h3>\n<h3>第3个固定大小与第1个div保持一致600*800</h3>\n<pre><code class=\"language-html\">&lt;html&gt;\n \n&lt;head&gt;&lt;/head&gt;\n \n&lt;body&gt;\n    &lt;div style=&quot;width:800px;height:600px;position:relative;overflow:hidden;background-color:yellow&quot;&gt;\n        &lt;div style=&quot;overflow:auto;position:absolute&quot;&gt;\n            &lt;div style=&quot;width:800px;height:600px&quot;&gt;\n                &lt;ul&gt;\n                    &lt;li&gt;xxxxxx&lt;/li&gt;\n                    &lt;li&gt;xxxxxx&lt;/li&gt;\n                    &lt;li&gt;xxxxxx&lt;/li&gt;\n                    &lt;li&gt;xxxxxx&lt;/li&gt;\n                    &lt;li&gt;xxxxxx&lt;/li&gt;\n                    &lt;li&gt;xxxxxx&lt;/li&gt;\n                    &lt;li&gt;xxxxxx&lt;/li&gt;\n                    &lt;li&gt;xxxxxx&lt;/li&gt;\n                    &lt;li&gt;xxxxxx&lt;/li&gt;\n                    &lt;li&gt;xxxxxx&lt;/li&gt;\n                    &lt;li&gt;xxxxxx&lt;/li&gt;\n                    &lt;li&gt;xxxxxx&lt;/li&gt;\n                    &lt;li&gt;xxxxxx&lt;/li&gt;\n                    &lt;li&gt;xxxxxx&lt;/li&gt;\n                    &lt;li&gt;xxxxxx&lt;/li&gt;\n                    &lt;li&gt;xxxxxx&lt;/li&gt;\n                    &lt;li&gt;xxxxxx&lt;/li&gt;\n                    &lt;li&gt;xxxxxx&lt;/li&gt;\n                    &lt;li&gt;xxxxxx&lt;/li&gt;\n                    &lt;li&gt;xxxxxx&lt;/li&gt;\n                    &lt;li&gt;xxxxxx&lt;/li&gt;\n                    &lt;li&gt;xxxxxx&lt;/li&gt;\n                    &lt;li&gt;xxxxxx&lt;/li&gt;\n                    &lt;li&gt;xxxxxx&lt;/li&gt;\n                    &lt;li&gt;xxxxxx&lt;/li&gt;\n                    &lt;li&gt;xxxxxx&lt;/li&gt;\n                    &lt;li&gt;xxxxxx&lt;/li&gt;\n                    &lt;li&gt;xxxxxx&lt;/li&gt;\n                    &lt;li&gt;xxxxxx&lt;/li&gt;\n                    &lt;li&gt;xxxxxx&lt;/li&gt;\n                    &lt;li&gt;xxxxxx&lt;/li&gt;\n                &lt;/ul&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;  \n    &lt;/div&gt;\n&lt;/body&gt;\n \n&lt;/html&gt;\n</code></pre>\n"},{"path":"/posts/excel解析.html","title":"去除excel的空行","date":"2021-06-15","fontNum":1216,"description":" 要点\r\n\r\n- 初始化 npm init\r\n- 安装依赖 npm install node-xlsx\r\n\r\n 引入依赖\r\n\r\nconst xlsx = require('node-xlsx');\r\nconst fs = require('fs')\r\n\r\n\r\n 读取数据\r\njavascript\r\nconst query = xlsx.parse(fs.readFil","tags":["node"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<h2>要点</h2>\n<ul>\n<li>初始化 npm init</li>\n<li>安装依赖 npm install node-xlsx</li>\n</ul>\n<h2>引入依赖</h2>\n<pre><code>const xlsx = require('node-xlsx');\nconst fs = require('fs')\n</code></pre>\n<h3>读取数据</h3>\n<pre><code class=\"language-javascript\">const query = xlsx.parse(fs.readFileSync('t.xls')); //解析现有的文件 t.xls\nconst result = query[0].data //获取读取的数据\n</code></pre>\n<h3>声明输出格式</h3>\n<pre><code class=\"language-javascript\">const tmp = [{\n    name: 'xxxx',\n    data: []\n}]\n</code></pre>\n<h3>去除空行的操作</h3>\n<pre><code class=\"language-javascript\">//去除空行 即每行元素的length === 0 每行元素为一个数组\nfor (const e of result) {\n    if (e.length &gt; 0) {\n        tmp[0].data.push(e)\n    }\n}\n</code></pre>\n<h3>构建buffer和写入</h3>\n<pre><code class=\"language-javascript\">//构建buffer\nconst buffer = xlsx.build(tmp);\n//写入s.xls\nfs.writeFileSync('s.xls', buffer)\n</code></pre>\n<h3>excel去除空行完整代码</h3>\n<pre><code class=\"language-javascript\">const xlsx = require('node-xlsx'); // 通过npm安装模块 git地址https://github.com/mgcrea/node-xlsx\nconst fs = require('fs')\n \nconst query = xlsx.parse(fs.readFileSync('t.xls')); //解析现有的文件 t.xls\n \nconst result = query[0].data //获取读取的数据\n//输出数据格式\nconst tmp = [{\n    name: 'xxxx',\n    data: []\n}]\n \n//去除空行 即每行元素的length === 0 每行元素为一个数组\nfor (const e of result) {\n    if (e.length &gt; 0) {\n        tmp[0].data.push(e)\n    }\n}\n//构建buffer\nconst buffer = xlsx.build(tmp);\n//写入s.xls\nfs.writeFileSync('s.xls', buffer)\n</code></pre>\n"},{"path":"/posts/解决跨域的三种方法.html","title":"解决跨域的三种方法","date":"2021-06-16","fontNum":491,"description":" 浏览器同源策略的影响\r\n\r\nhttps://  www.  baidu.com:  8080/   page/  ?key=value\r\n协议      主机   域名        端口    路径    参数\r\n\r\n\r\n JSONP\r\n利用script 获取\r\n\r\n- 服务端  给数据外包一个函数再外包一层JSON \r\neg:JSON[javascript Functio","tags":["http"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<h2>浏览器同源策略的影响</h2>\n<pre><code>https://  www.  baidu.com:  8080/   page/  ?key=value\n协议      主机   域名        端口    路径    参数\n</code></pre>\n<h2>JSONP</h2>\n<p>利用script 获取</p>\n<ul>\n<li>\n<p>服务端  给数据外包一个函数再外包一层JSON\neg:JSON[javascript Function [data]]</p>\n</li>\n<li>\n<p>客户端提前设置专门处理的function(data)</p>\n</li>\n<li>\n<p>客户端请求的时候会带上特殊的参数</p>\n</li>\n<li>\n<p>服务端收到参数后以上面格式返回</p>\n</li>\n</ul>\n<p>只支持get方法不支持post方法</p>\n<h2>CROS</h2>\n<ul>\n<li>\n<p>浏览器请求会添加origin:协议 + 主机 + 端口</p>\n</li>\n<li>\n<p>服务器返回数据的时候允许请求就添加 Access-Control-Allow-Origin:协议 + 主机 + 端口</p>\n</li>\n</ul>\n<h2>服务器代理</h2>\n<ul>\n<li>\n<p>服务端没有同源限制</p>\n</li>\n<li>\n<p>eg:浏览器请求nginx监听端口 ,nginx proxy_pass 指向服务器端口</p>\n</li>\n</ul>\n"},{"path":"/posts/dirsearch配置.html","title":"dirsearch配置","date":"2021-06-17","fontNum":261,"description":"\r\n\r\ndirsearch配置\r\n1.下载地址：https://github.com/maurosoria/dirsearch/archive/master.zip\r\n2.安装3.7以上版本python\r\n\r\ngit clone https://github.com/maurosoria/dirsearch.git\r\ncd dirsearch\r\npip3 install -r require","tags":["web"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code>dirsearch配置\n1.下载地址：https://github.com/maurosoria/dirsearch/archive/master.zip\n2.安装3.7以上版本python\n\ngit clone https://github.com/maurosoria/dirsearch.git\ncd dirsearch\npip3 install -r requirements.txt\npython3 dirsearch.py -u &lt;URL&gt; -e &lt;EXTENSIONS&gt;\n</code></pre>\n"},{"path":"/posts/element_ui日期组件限制结束日期.html","title":"element ui 日期组件 结束日期disabled","date":"2021-06-17","fontNum":724,"description":"\r\njavascript\r\n<template>\r\n  <div>\r\n    <div class=\"block\">\r\n      <span class=\"demonstration\">默认</span>\r\n      <el-date-picker\r\n        v-model=\"value1\"\r\n        type=\"datetimerange\"\r\n        range","tags":["element_ui"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;div class=&quot;block&quot;&gt;\n      &lt;span class=&quot;demonstration&quot;&gt;默认&lt;/span&gt;\n      &lt;el-date-picker\n        v-model=&quot;value1&quot;\n        type=&quot;datetimerange&quot;\n        range-separator=&quot;至&quot;\n        start-placeholder=&quot;开始日期&quot;\n        end-placeholder=&quot;结束日期&quot;\n        :picker-options=&quot;pickerOptions&quot;\n      &gt;\n      &lt;/el-date-picker&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n \n&lt;script&gt;\nexport default {\n  data() {\n    return {\n      pickerOptions: {\n        //日期限制\n        disabledDate: (time) =&gt; {\n          //month 会比当前月份少一 这里的5 是六月份\n          return time &gt; new Date(2021, 5, 22);\n        },\n      },\n      value1: [new Date(), new Date()],\n      value2: &quot;&quot;,\n    };\n  },\n};\n&lt;/script&gt;\n</code></pre>\n"},{"path":"/posts/element_ui_electron透明输入框.html","title":"element ui electron制作透明输入框","date":"2021-06-20","fontNum":3629,"description":" 饿了么组件的配置\r\njavascript\r\n<template>\r\n  <el-input v-model=\"input\" placeholder=\"请输入内容\"></el-input>\r\n</template>\r\n \r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      input: \"\",\r\n    };\r\n  }","tags":["electron"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<h2>饿了么组件的配置</h2>\n<pre><code class=\"language-javascript\">&lt;template&gt;\n  &lt;el-input v-model=&quot;input&quot; placeholder=&quot;请输入内容&quot;&gt;&lt;/el-input&gt;\n&lt;/template&gt;\n \n&lt;script&gt;\nexport default {\n  data() {\n    return {\n      input: &quot;&quot;,\n    };\n  },\n};\n&lt;/script&gt;\n \n&lt;style scoped&gt;\n/deep/ .el-input__inner {\n  background-color: rgba(0, 0, 0, 0) !important;\n}\n&lt;/style&gt;\n</code></pre>\n<h2>background.js中的配置</h2>\n<pre><code class=\"language-javascript\">'use strict'\n//对electron进行配置\nimport { app, protocol, BrowserWindow } from 'electron'\nimport { createProtocol } from 'vue-cli-plugin-electron-builder/lib'\n//每次启动的时候都需要等到请求安装vuejs devtools插件，这个等待时间会比较长，可以通过去掉加载vuejs devtools插件代码来实现\n// import installExtension, { VUEJS_DEVTOOLS } from 'electron-devtools-installer'\nconst isDevelopment = processEnvNODE_ENV !== 'production'\n \n// Scheme must be registered before the app is ready\nprotocol.registerSchemesAsPrivileged([\n  { scheme: 'app', privileges: { secure: true, standard: true } }\n])\n \nasync function createWindow() {\n  // Create the browser window.\n  const win = new BrowserWindow({\n    width: 1200,\n    height: 1000,\n    //by wuyi\n    resizable: false,//固定行高不可变\n    transparent: true,//frame: false的情况下 可以设置true为背景为透明\n    frame: false,//无边框\n    backgroundColor: '#5F000000', //设置背景透明无效 添加这一步 这个是完全透明的黑色（即透明色），前面两位是透明度值，后六位是颜色值\n \n \n    webPreferences: {\n \n      // Use pluginOptions.nodeIntegration, leave this alone\n      // See nklayman.github.io/vue-cli-plugin-electron-builder/guide/security.html#node-integration for more info\n      nodeIntegration: process.env.ELECTRON_NODE_INTEGRATION,\n      contextIsolation: !process.env.ELECTRON_NODE_INTEGRATION\n    }\n  })\n \n  win.show()\n \n  if (process.env.WEBPACK_DEV_SERVER_URL) {\n    // Load the url of the dev server if in development mode\n    await win.loadURL(process.env.WEBPACK_DEV_SERVER_URL)\n    if (!process.env.IS_TEST) win.webContents.openDevTools()\n  } else {\n    createProtocol('app')\n    // Load the index.html when not in development\n    win.loadURL('app://./index.html')\n  }\n}\n \n// Quit when all windows are closed.\napp.on('window-all-closed', () =&gt; {\n  // On macOS it is common for applications and their menu bar\n  // to stay active until the user quits explicitly with Cmd + Q\n  if (process.platform !== 'darwin') {\n    app.quit()\n  }\n})\n \napp.on('activate', () =&gt; {\n  // On macOS it's common to re-create a window in the app when the\n  // dock icon is clicked and there are no other windows open.\n  if (BrowserWindow.getAllWindows().length === 0) createWindow()\n})\n \n// This method will be called when Electron has finished\n// initialization and is ready to create browser windows.\n// Some APIs can only be used after this event occurs.\napp.on('ready', async () =&gt; {\n  // if (isDevelopment &amp;&amp; !process.env.IS_TEST) {\n  //   // Install Vue Devtools\n  //   try {\n  //     await installExtension(VUEJS_DEVTOOLS)\n  //   } catch (e) {\n  //     console.error('Vue Devtools failed to install:', e.toString())\n  //   }\n  // }\n  createWindow()\n})\n \n// Exit cleanly on request from parent process in development mode.\nif (isDevelopment) {\n  if (process.platform === 'win32') {\n    process.on('message', (data) =&gt; {\n      if (data === 'graceful-exit') {\n        app.quit()\n      }\n    })\n  } else {\n    process.on('SIGTERM', () =&gt; {\n      app.quit()\n    })\n  }\n}\n</code></pre>\n<pre><code>const win = new BrowserWindow({\n\n    width: 1200,\n\n    height: 1000,\n\n    resizable: false,//固定行高不可变\n\n    transparent: true,//frame: false的情况下 可以设置true为背景为透明\n\n    frame: false,//无边框\n\n    backgroundColor: '#5F000000', //设置背景透明无效 添加这一步 这个是完全透明的黑色（即透明色），前面两位是透明度值，后六位是颜色值\n\n</code></pre>\n"},{"path":"/posts/html保留空格.html","title":"html保留空格","date":"2021-06-22","fontNum":66,"description":"\r\n html在多空格的时候默认只显示一个空格\r\n\r\n 加上white-space: pre;就能保持空格输出数量\r\n","tags":["html"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<h2>html在多空格的时候默认只显示一个空格</h2>\n<h2>加上white-space: pre;就能保持空格输出数量</h2>\n<pre><code></code></pre>\n"},{"path":"/posts/electron_element_ui_table_背景透明.html","title":"electron + vue + element ui设置table背景颜色透明","date":"2021-06-24","fontNum":1338,"description":"\r\njavascript\r\n<template>\r\n  <div>\r\n    <el-table\r\n      :data=\"tableData\"\r\n      style=\"width: 100%\"\r\n      :header-cell-style=\"headerCellStyle\"\r\n    >\r\n      <el-table-column prop=\"date\" label=\"日期","tags":["javascript"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;el-table\n      :data=&quot;tableData&quot;\n      style=&quot;width: 100%&quot;\n      :header-cell-style=&quot;headerCellStyle&quot;\n    &gt;\n      &lt;el-table-column prop=&quot;date&quot; label=&quot;日期&quot; width=&quot;180&quot;&gt; &lt;/el-table-column&gt;\n      &lt;el-table-column prop=&quot;name&quot; label=&quot;姓名&quot; width=&quot;180&quot;&gt; &lt;/el-table-column&gt;\n      &lt;el-table-column prop=&quot;address&quot; label=&quot;地址&quot;&gt; &lt;/el-table-column&gt;\n    &lt;/el-table&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n \n    &lt;script&gt;\nexport default {\n  name: &quot;Main&quot;,\n  data() {\n    return {\n      tableData: [\n        {\n          date: &quot;2016-05-02&quot;,\n          name: &quot;王小虎&quot;,\n          address: &quot;上海市普陀区金沙江路 1518 弄&quot;,\n        },\n        {\n          date: &quot;2016-05-04&quot;,\n          name: &quot;王小虎&quot;,\n          address: &quot;上海市普陀区金沙江路 1517 弄&quot;,\n        },\n        {\n          date: &quot;2016-05-01&quot;,\n          name: &quot;王小虎&quot;,\n          address: &quot;上海市普陀区金沙江路 1519 弄&quot;,\n        },\n        {\n          date: &quot;2016-05-03&quot;,\n          name: &quot;王小虎&quot;,\n          address: &quot;上海市普陀区金沙江路 1516 弄&quot;,\n        },\n      ],\n    };\n  },\n  methods: {\n    headerCellStyle() {\n      return &quot;background-color:transparent;color:#000;&quot;;\n    },\n  },\n};\n&lt;/script&gt;\n \n&lt;style scoped&gt;\n/deep/ .el-table,\n.el-table__expanded-cell {\n  background-color: transparent;\n}\n \n/deep/ .el-table tr {\n  background-color: transparent !important;\n}\n&lt;/style&gt;\n</code></pre>\n"},{"path":"/posts/有效的括号.html","title":"有效的括号","date":"2021-06-28","fontNum":570,"description":"\r\njavascript\r\nvar isValid = function (s) {\r\n    const stack = []\r\n    for (const e of s) {\r\n        if (e === '(' || e === '[' || e === '{') {\r\n            stack.push(e)\r\n        }\r\n        if (e =","tags":["javascript"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">var isValid = function (s) {\n    const stack = []\n    for (const e of s) {\n        if (e === '(' || e === '[' || e === '{') {\n            stack.push(e)\n        }\n        if (e === ')' || e === ']' || e === '}') {\n            const pre = stack.pop()\n            const val = `${pre}${e}`\n            if (val === '()' || val === '{}' || val === '[]') {\n                continue\n            } else {\n                return false\n            }\n        }\n    }\n    if (stack.length &gt; 0) {\n        return false\n    }\n    return true\n};\n</code></pre>\n"},{"path":"/posts/Symbol_asyncIterator.html","title":"Symbol.asyncIterator","date":"2021-06-30","fontNum":492,"description":"\r\njavascript\r\nclass Emitter {\r\n    constructor(max) {\r\n        this.max = max\r\n        this.asyncIdx = 0\r\n    }\r\n    async *[Symbol.asyncIterator]() {\r\n        while (this.asyncIdx < this.max) {\r\n ","tags":["javascript"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">class Emitter {\n    constructor(max) {\n        this.max = max\n        this.asyncIdx = 0\n    }\n    async *[Symbol.asyncIterator]() {\n        while (this.asyncIdx &lt; this.max) {\n            yield new Promise((resolve) =&gt; resolve(this.asyncIdx++))\n        }\n    }\n}\n \nasync function asyncCount() {\n    let emitter = new Emitter(5)\n    console.log('emitter', emitter);\n \n    for await (const x of emitter) {\n        console.log(x);\n    }\n}\n \nasyncCount()\n</code></pre>\n"},{"path":"/posts/js单例模式.html","title":"js单例模式","date":"2021-07-04","fontNum":3042,"description":"javascript\r\n//单例模式的实现 缺点是不够透明需要通过Singleton.getInstance调用\r\nfunction Singleton(name) {\r\n    this.name = name\r\n}\r\n \r\nSingleton.prototype.getName = function () {\r\n    return this.name\r\n}\r\n// //方式一 静态方法","tags":["javascript"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">//单例模式的实现 缺点是不够透明需要通过Singleton.getInstance调用\nfunction Singleton(name) {\n    this.name = name\n}\n \nSingleton.prototype.getName = function () {\n    return this.name\n}\n// //方式一 静态方法\nSingleton.getInstance = function (name) {\n    if (!this.instance) {\n        this.instance = new Singleton(name)\n    }\n    return this.instance\n}\n \nconst a = Singleton.getInstance('sven1')\nconst b = Singleton.getInstance('sven2')\nconsole.log(a === b);\n//方式二 静态方法+闭包\nSingleton.getInstance = (function () {\n    let instance = null\n    return function (name) {\n        if (!instance) {\n            instance = new Singleton(name)\n        }\n        return instance\n    }\n})()\n \nconst a = Singleton.getInstance('sven1')\nconst b = Singleton.getInstance('sven2')\nconsole.log(a === b);\n \n//透明的单例模式 缺点是如果需要改变需求创建多个对象，需要对构造函数进行修改\nconst Singleton = (function () {\n    let instance = null\n    const Singleton = function (name) {\n        if (instance) {\n            return instance\n        }\n        this.name = name\n \n        return instance = this//this是第一次初始化对象的引用\n    }\n    Singleton.prototype.getName = function () {\n        console.log(this.name);\n    }\n    return Singleton\n})()\n \nconst a = new Singleton('sven1')\nconst b = new Singleton('sven2')\nconsole.log(a === b);\na.getName()\nb.getName()\n \n用代理实现单例模式\nconst Singleton = function (name) {\n    this.name = this.name\n}\n \nSingleton.prototype.getName = function () {\n    console.log(this.name);\n}\n//引入代理类 IIFE+闭包\nconst ProxySingleton = (function () {\n    let instance = null\n    return function (name) {\n        if (!instance) {\n            instance = new Singleton(name)\n        }\n        return instance\n    }\n})()\n \n \nconst a = new ProxySingleton('sven1')\nconst b = new ProxySingleton('sven2')\nconsole.log(a === b);\n \n// 通过引入代理类的方式，我们同样完成了一个单例模式的编写，\n// 跟之前不同的是，现在我们把负责管理单例的逻辑移到了代理类proxySingletonSingleton中。\n// 这样一来，Singleton就变成了一个普通的类，\n// 它跟proxySingletonSingleton组合起来可以达到单例模式的效果。\n \n//通用的惰性单例\n \nconst getSingle = function (fn) {\n    let result = null\n    return function () {\n        return result || (result = fn.apply(this, arguments))\n    }\n}\n \nconst fn1 = function () {\n}\n \nconst fn2 = function () {\n}\nlet foo = getSingle(fn1)//fn\nlet bar = getSingle(fn2)//fn\nlet a = foo()\nlet b = foo()\nconsole.log(a === b);\nlet c = bar()\nlet d = bar()\nconsole.log(c === d);\n \n \n//类实现法\nclass Singleton {\n    #name = ''\n    constructor(name) {\n        this.#name = name\n    }\n \n    getName() {\n        console.log('name is', this.#name);\n        return 0\n    }\n}\n \nclass ProxySingleton {\n    static instance = null\n    constructor(name) {\n        if (!ProxySingleton.instance) {\n            ProxySingleton.instance = new Singleton(name)\n        }\n        return ProxySingleton.instance\n    }\n}\n \nconst a = new ProxySingleton('seven1')\nconst b = new ProxySingleton('seven2')\nconsole.log(a === b);\nconsole.log(a.name);//undefined\nconsole.log(a.getName()); //name is seven1     0\n</code></pre>\n"},{"path":"/posts/element_ui_select_ctrl_c.html","title":"element-ui select框实现ctrl+c复制内容","date":"2021-07-12","fontNum":2387,"description":"javascript\r\n<template>\r\n  <div>\r\n    <el-select\r\n      ref=\"select\"\r\n      placeholder=\"请选择主食\"\r\n      multiple\r\n      filterable\r\n      collapse-tags\r\n      id=\"food\"\r\n      :name=\"name\"\r\n      @fo","tags":["element_ui"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;el-select\n      ref=&quot;select&quot;\n      placeholder=&quot;请选择主食&quot;\n      multiple\n      filterable\n      collapse-tags\n      id=&quot;food&quot;\n      :name=&quot;name&quot;\n      @focus=&quot;whichSearchBoxFocus(name)&quot;\n      @keyup.ctrl.67.native=&quot;copyFocusedBoxContent&quot;\n      v-model=&quot;formData.food&quot;\n    &gt;\n      &lt;el-option\n        v-for=&quot;item in options&quot;\n        :key=&quot;item.label&quot;\n        :label=&quot;item.label&quot;\n        :value=&quot;item.label&quot;\n      &gt;\n      &lt;/el-option&gt;\n    &lt;/el-select&gt;\n    &lt;el-select\n      ref=&quot;select&quot;\n      placeholder=&quot;请选择水果&quot;\n      multiple\n      filterable\n      collapse-tags\n      id=&quot;fruit&quot;\n      name=&quot;fruit&quot;\n      @focus=&quot;whichSearchBoxFocus('fruit')&quot;\n      @keyup.ctrl.67.native=&quot;copyFocusedBoxContent&quot;\n      v-model=&quot;formData.fruit&quot;\n    &gt;\n      &lt;el-option\n        v-for=&quot;item in options2&quot;\n        :key=&quot;item.label&quot;\n        :label=&quot;item.label&quot;\n        :value=&quot;item.label&quot;\n      &gt;\n      &lt;/el-option&gt;\n    &lt;/el-select&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n \n&lt;script&gt;\nexport default {\n  methods: {\n    whichSearchBoxFocus(whichSearchBox) {\n      //判断哪个select被focus//把值赋值给whichSearchBoxFocused\n      console.log(&quot;whichSearchBox&quot;, whichSearchBox);\n      this.searchBoxFocused = whichSearchBox;\n    },\n    copyFocusedBoxContent() {\n      //把 this.formData[this.searchBoxFocused]; 赋值到粘贴板\n      console.log(&quot;this.$copyText&quot;, this.$copyText);\n      this.$copyText(this.formData[this.searchBoxFocused]).then(\n        function (e) {\n          alert(&quot;Copied&quot;);\n          console.log(e);\n        },\n        function (e) {\n          alert(&quot;Can not copy&quot;);\n          console.log(e);\n        }\n      );\n    },\n  },\n  data() {\n    return {\n      name: &quot;food&quot;,\n      formData: {\n        food: [],\n        fruit: [],\n      },\n      searchBoxFocused: null,\n      options: [\n        {\n          label: &quot;黄金糕&quot;,\n        },\n        {\n          label: &quot;双皮奶&quot;,\n        },\n        {\n          label: &quot;蚵仔煎&quot;,\n        },\n        {\n          label: &quot;龙须面&quot;,\n        },\n        {\n          label: &quot;北京烤鸭&quot;,\n        },\n      ],\n      options2: [\n        {\n          label: &quot;西瓜&quot;,\n        },\n        {\n          label: &quot;香蕉&quot;,\n        },\n        {\n          label: &quot;葡萄&quot;,\n        },\n        {\n          label: &quot;蜜瓜&quot;,\n        },\n        {\n          label: &quot;苹果&quot;,\n        },\n      ],\n    };\n  },\n};\n&lt;/script&gt;\n</code></pre>\n"},{"path":"/posts/字符串操作.html","title":"字符串操作","date":"2021-07-14","fontNum":408,"description":"\r\n ES2017 字符串补全长度 padEnd padStart\r\njavascript\r\nlet a = 'foo'\r\nlet b = a.padEnd(20, '.bar')\r\nconsole.log(b);// foo.bar.bar.bar.bar.\r\n\r\nconsole.log(a);// foo\r\n\r\nconsole.log(a.padStart(20, '.baz'));","tags":["javascript"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<h2>ES2017 字符串补全长度 padEnd padStart</h2>\n<pre><code class=\"language-javascript\">let a = 'foo'\nlet b = a.padEnd(20, '.bar')\nconsole.log(b);// foo.bar.bar.bar.bar.\n\nconsole.log(a);// foo\n\nconsole.log(a.padStart(20, '.baz'));// .baz.baz.baz.baz.foo\n</code></pre>\n<h2>substring 取两个参数之间 start - stop - 1</h2>\n<pre><code class=\"language-javascript\">let str = 'hello world'\nconsole.log(str.substring(2, 0)); \n//he substring如果 start 比 stop 大，那么该方法在提取子串之前会先交换这两个参数。\n</code></pre>\n"},{"path":"/posts/循环展开.html","title":"循环展开提升效率","date":"2021-07-14","fontNum":412,"description":"javascript\r\n// let b = new Date()\r\n \r\n// let a = 1\r\n \r\n// for (let i = 0; i < 1000000000; i) {\r\n//     a\r\n// }\r\n \r\n// let c = new Date() - b\r\n \r\n// console.log(c); //568ms\r\n \r\n \r\nlet b = new Da","tags":["javascript"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">// let b = new Date()\n \n// let a = 1\n \n// for (let i = 0; i &lt; 1000000000; i++) {\n//     a++\n// }\n \n// let c = new Date() - b\n \n// console.log(c); //568ms\n \n \nlet b = new Date()\n \nlet a = 1\n \nfor (let i = 0; i &lt; 100000000; i++) {\n    a++\n    a++\n    a++\n    a++\n    a++\n    a++\n    a++\n    a++\n    a++\n    a++\n}\n \nlet c = new Date() - b\n \nconsole.log(c); //57ms\n</code></pre>\n"},{"path":"/posts/element_ui_datepicker_id.html","title":"给element ui date-picker 添加id","date":"2021-07-17","fontNum":431,"description":"javascript\r\n <template>\r\n  <div>\r\n    <div class=\"block\">\r\n      <el-date-picker\r\n        v-model=\"value1\"\r\n        type=\"daterange\"\r\n        start-placeholder=\"开始日期\"\r\n        end-placeholder=\"结束日期","tags":["element_ui"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\"> &lt;template&gt;\n  &lt;div&gt;\n    &lt;div class=&quot;block&quot;&gt;\n      &lt;el-date-picker\n        v-model=&quot;value1&quot;\n        type=&quot;daterange&quot;\n        start-placeholder=&quot;开始日期&quot;\n        end-placeholder=&quot;结束日期&quot;\n        :id=&quot;['start', 'end']&quot;\n      &gt;\n      &lt;/el-date-picker&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n \n&lt;script&gt;\nexport default {\n  data() {\n    return {\n      value1: &quot;&quot;,\n      value2: &quot;&quot;,\n    };\n  },\n};\n&lt;/script&gt;\n</code></pre>\n"},{"path":"/posts/markdom操作.html","title":"markdom 操作","date":"2021-07-20","fontNum":102,"description":"\r\n 插入图片\r\n\r\n![Alt](图片链接 \"hover tip\")\r\n\r\n-alt 图片因为某种原因不能被显示时而出现的文字\r\n-图片地址\r\n-鼠标悬于图片上出现的文字\r\n\r\n\r\n\r\n","tags":["markdom"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<h2>插入图片</h2>\n<pre><code>![Alt](图片链接 &quot;hover tip&quot;)\n\n-alt 图片因为某种原因不能被显示时而出现的文字\n-图片地址\n-鼠标悬于图片上出现的文字\n</code></pre>\n"},{"path":"/posts/element_ui_select_ctrl_c_ctrl_v.html","title":"element ui select框实现ctrl+c 和ctrl+v的功能","date":"2021-07-21","fontNum":2011,"description":"javascript\r\n <template>\r\n  <div>\r\n    <el-select\r\n      ref=\"select\"\r\n      placeholder=\"请选择主食\"\r\n      filterable\r\n      id=\"food\"\r\n      @keydown.ctrl.67.native=\"copyFocusedBoxContent\"\r\n      @pas","tags":["element_ui"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\"> &lt;template&gt;\n  &lt;div&gt;\n    &lt;el-select\n      ref=&quot;select&quot;\n      placeholder=&quot;请选择主食&quot;\n      filterable\n      id=&quot;food&quot;\n      @keydown.ctrl.67.native=&quot;copyFocusedBoxContent&quot;\n      @paste.native.capture.prevent=&quot;handlePaste&quot;\n      v-model=&quot;formData.food&quot;\n      clearable\n      multiple\n      collapse-tags\n    &gt;\n      &lt;el-option\n        v-for=&quot;item in options&quot;\n        :key=&quot;item.label&quot;\n        :label=&quot;item.label&quot;\n        :value=&quot;item.code&quot;\n      &gt;\n      &lt;/el-option&gt;\n    &lt;/el-select&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n \n&lt;script&gt;\nexport default {\n  methods: {\n    handlePaste(e) {\n      const inputValueArr = e.clipboardData.getData(&quot;Text&quot;).split(&quot;,&quot;);\n \n      const recordIndex = [];\n      for (const e of this.options) {\n        recordIndex.push(e.code);\n      }\n      for (const f of inputValueArr) {\n        if (recordIndex.includes(f) &amp;&amp; !this.formData.food.includes(f)) {\n          this.formData.food.push(f);\n        }\n      }\n    },\n \n    copyFocusedBoxContent() {\n      this.$copyText(this.formData.food).then(\n        (e) =&gt; {\n          this.$message({\n            message: &quot;Copied&quot;,\n            duration: 200,\n          });\n        },\n        (e) =&gt; {\n          this.$message({\n            message: &quot;Can not copy&quot;,\n            duration: 200,\n          });\n        }\n      );\n    },\n  },\n  data() {\n    return {\n      formData: {\n        food: [],\n      },\n      options: [\n        {\n          code: &quot;11&quot;,\n          label: &quot;11-黄金糕&quot;,\n        },\n        {\n          code: &quot;12&quot;,\n          label: &quot;12-双皮奶&quot;,\n        },\n        {\n          code: &quot;13&quot;,\n          label: &quot;13-蚵仔煎&quot;,\n        },\n        {\n          code: &quot;14&quot;,\n          label: &quot;14-龙须面&quot;,\n        },\n        {\n          code: &quot;15&quot;,\n          label: &quot;15-北京烤鸭&quot;,\n        },\n        {\n          code: &quot;115&quot;,\n          label: &quot;115-乌冬面&quot;,\n        },\n \n        {\n          code: &quot;111&quot;,\n          label: &quot;111-炸鸡&quot;,\n        },\n      ],\n    };\n  },\n};\n&lt;/script&gt;\n</code></pre>\n"},{"path":"/posts/element_ui点击行变色.html","title":"element ui table 实现点击行变色","date":"2021-07-22","fontNum":1780,"description":"javascript\r\n <template>\r\n  <div>\r\n    <table ref=\"table\" @rowClick=\"rowClick\" id=\"table\"></table>\r\n  </div>\r\n</template>\r\n<script>\r\nimport table from \"@/components/Table.vue\";\r\nexport default {\r\n  ","tags":["element_ui"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\"> &lt;template&gt;\n  &lt;div&gt;\n    &lt;table ref=&quot;table&quot; @rowClick=&quot;rowClick&quot; id=&quot;table&quot;&gt;&lt;/table&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n&lt;script&gt;\nimport table from &quot;@/components/Table.vue&quot;;\nexport default {\n  components: {\n    table,\n  },\n  methods: {\n    rowClick(row, column, event) {\n      const name = row.name;\n      if (this.name === name) {\n        this.flag = !this.flag;\n      } else {\n        this.flag = false;\n      }\n      this.name = name;\n//以下两种方式获取dom节点的内容\n console.log(\n        this.$refs.table.$refs.table.$refs.bodyWrapper.childNodes[0]\n          .childNodes[1].childNodes\n      );\n      let obj =\n        document.getElementById(&quot;table&quot;).childNodes[0].childNodes[2]\n          .childNodes[0].childNodes[1];\n      const arr = [];\n      let i = 0;\n      while (obj.childNodes[i]) {\n        arr.push(obj.childNodes[i]);\n        i++;\n      }\n \n      for (const e of arr) {\n        if (e &amp;&amp; e.childNodes[1]) {\n          if (e.childNodes[1].childNodes[0].innerHTML === name &amp;&amp; !this.flag) {\n            //这种情况下只有鼠标移开才会变色，具体原因还不清楚\n            // e.style.color = &quot;yellow&quot;;\n            // e.style.backgroundColor = &quot;green&quot;;\n            //以下是点击直接变色的方法\n            let j = 0;\n \n            while (e.childNodes[j]) {\n              e.childNodes[j].style.color = &quot;red&quot;;\n              e.childNodes[j].style.backgroundColor = &quot;pink&quot;;\n \n              j++;\n            }\n          } else {\n            let j = 0;\n \n            while (e.childNodes[j]) {\n              e.childNodes[j].style.color = &quot;&quot;;\n              e.childNodes[j].style.backgroundColor = &quot;&quot;;\n \n              j++;\n            }\n          }\n        }\n      }\n    },\n  },\n  data() {\n    return {\n      flag: true,\n      name: null,\n    };\n  },\n};\n&lt;/script&gt;\n</code></pre>\n"},{"path":"/posts/对象实现forof.html","title":"对象实现for of","date":"2021-07-25","fontNum":372,"description":"javascript\r\nconst obj = {\r\n    a: 11,\r\n    b: 22,\r\n    c: 33,\r\n    [Symbol.iterator]: function* () {\r\n        const arr = Object.keys(this)\r\n        for (let i = 0; i < arr.length; i) {\r\n        ","tags":["javascript"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">const obj = {\n    a: 11,\n    b: 22,\n    c: 33,\n    [Symbol.iterator]: function* () {\n        const arr = Object.keys(this)\n        for (let i = 0; i &lt; arr.length; i++) {\n            yield {\n                key: arr[i],\n                value: this[arr[i]]\n            }\n        }\n    }\n}\n \nfor (const e of obj) {\n    console.log(e);\n}\n</code></pre>\n"},{"path":"/posts/css选择器.html","title":"css选择器","date":"2021-07-28","fontNum":115,"description":" 1.“空格”表示包含子元素和   子孙元素 .a .b\r\n\r\n 2.“>”表示包含子元素    不包含子孙元素 .a > .b\r\n\r\n 3.两个选择器之间没有空格的情况下，代表的是同时拥有两个类名的标签 .a.b\r\n","tags":["css"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<h2>1.“空格”表示包含子元素和   子孙元素 .a .b</h2>\n<h2>2.“&gt;”表示包含子元素    不包含子孙元素 .a &gt; .b</h2>\n<h2>3.两个选择器之间没有空格的情况下，代表的是同时拥有两个类名的标签 .a.b</h2>\n"},{"path":"/posts/element_ui_select.html","title":"element ui select 添加@paste事件 粘贴值后粘贴值会显示value而不是label的值","date":"2021-08-05","fontNum":35,"description":" 解决方法，使用临时变量存储在setTimeout进行异步赋值\r\n","tags":["element_ui"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<h2>解决方法，使用临时变量存储在setTimeout进行异步赋值</h2>\n"},{"path":"/posts/proxy.html","title":"js proxy数据绑定与可观察对象","date":"2021-08-12","fontNum":932,"description":"javascript\r\n// //数据绑定与可观察对象\r\n// const userList = []\r\n \r\n// class User {\r\n//     constructor(name) {\r\n//         this._name = name\r\n//     }\r\n// }\r\n \r\n// const proxy = new Proxy(User, {\r\n//     cons","tags":["javascript"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">// //数据绑定与可观察对象\n// const userList = []\n \n// class User {\n//     constructor(name) {\n//         this._name = name\n//     }\n// }\n \n// const proxy = new Proxy(User, {\n//     construct() {\n//         const newUser = Reflect.construct(...arguments)\n//         userList.push(newUser)\n//         return newUser\n//     }\n// })\n \n// new proxy('1')\n// new proxy('2')\n// new proxy('3')\n \n// console.log(userList);\n \nconst userList = []\nfunction emit(newValue) {\n    // console.log(newValue);\n}\n \nconst proxy = new Proxy(userList, {\n    set(target, property, value, receiver) {\n        const result = Reflect.set(...arguments)\n        console.log('result', result);\n        if (result) {\n            emit(Reflect.get(target, property, receiver))\n        }\n        return result\n    }\n})\n \nproxy.push('xxx')\nproxy.push('yyy')\n</code></pre>\n<p>打印四次</p>\n<p>result true\nresult true\nresult true\nresult true</p>\n"},{"path":"/posts/echart纵坐标值单位修改.html","title":"echart纵坐标值单位修改","date":"2021-08-13","fontNum":193,"description":" 给yAxis的axisLabel设置formatter方法\r\njavascript\r\nxxxxxxx.yAxis.axisLabel = {undefined\r\n\r\n  formatter: function(v){undefined\r\n\r\n    return v/10000 // 给纵坐标的值统一除以10000 就变成了以万为单位\r\n\r\n    }\r\n\r\n}\r\n","tags":["javascript"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<h2>给yAxis的axisLabel设置formatter方法</h2>\n<pre><code class=\"language-javascript\">xxxxxxx.yAxis.axisLabel = {undefined\n\n  formatter: function(v){undefined\n\n    return v/10000 // 给纵坐标的值统一除以10000 就变成了以万为单位\n\n    }\n\n}\n</code></pre>\n"},{"path":"/posts/newProxy.html","title":"js代理 new Proxy()","date":"2021-08-17","fontNum":993,"description":"javascript\r\n//代理函数\r\n//获取数组中值的function\r\nfunction median(...nums) {\r\n    return nums.sort()[Math.floor(nums.length / 2)]\r\n}\r\n \r\nconst proxy = new Proxy(median, {\r\n    apply(target, thisArg, arguments","tags":["javascript"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">//代理函数\n//获取数组中值的function\nfunction median(...nums) {\n    return nums.sort()[Math.floor(nums.length / 2)]\n}\n \nconst proxy = new Proxy(median, {\n    apply(target, thisArg, argumentsList) {\n \n        console.log('target', target);\n        console.log('thisArg', thisArg);\n        for (const arg of argumentsList) {\n            if (typeof arg !== 'number') {\n                throw 'Non-number argument provided'\n            }\n        }\n        return Reflect.apply(...arguments)\n    }\n})\n \nconsole.log(proxy(4, 7, 1));\nconsole.log(proxy(4, '7', 1)); //报错\n \n//代理构造函数\nclass User {\n    constructor(id) {\n        this.id_ = id\n    }\n}\nconst proxy = new Proxy(User, {\n    construct(target, argumentsList, newTarget) {\n        if (argumentsList[0] === undefined) {\n            throw 'User cannot be instantiated without id'\n        } else {\n            return Reflect.construct(...arguments)\n        }\n    }\n})\n \nnew proxy(1)\nnew proxy() //报错\n\n</code></pre>\n"},{"path":"/posts/electron主进程调试launch.json.html","title":"vscode electron 主进程调试 launch.json","date":"2021-08-23","fontNum":621,"description":"\r\njson\r\n{\r\n    \"configurations\": [\r\n        {\r\n            \"name\": \"调试主进程\", //配置名称\r\n            \"type\": \"node\", //调试环境\r\n            \"request\": \"launch\",\r\n            \"cwd\": \"${workspaceRoot}\",\r\n   ","tags":["electron"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-json\">{\n    &quot;configurations&quot;: [\n        {\n            &quot;name&quot;: &quot;调试主进程&quot;, //配置名称\n            &quot;type&quot;: &quot;node&quot;, //调试环境\n            &quot;request&quot;: &quot;launch&quot;,\n            &quot;cwd&quot;: &quot;${workspaceRoot}&quot;,\n            &quot;runtimeExecutable&quot;: &quot;${workspaceRoot}/node_modules/.bin/electron&quot;, //批处理文件 用于启动Electron ${workspaceRoot}为正在进行调试的程序的工作目录的绝对路径\n            &quot;window&quot;: {\n                &quot;runtimeExecutable&quot;: &quot;${workspaceRoot}/node_modules/.bin/electron.cmd&quot;,\n            },\n            &quot;args&quot;: [ //启动参数 此处的值是主程序的简写形式&quot;./index.js&quot;也可\n                &quot;.&quot;\n            ],\n            &quot;outputCapture&quot;: &quot;std&quot;\n        }\n    ]\n}\n</code></pre>\n"},{"path":"/posts/electron渲染进程remote的值为undefined.html","title":"electron渲染进程let { remote } = require(‘electron‘)； remote的值为undefined","date":"2021-08-23","fontNum":73,"description":"\r\n需要在主进程中的new BrowserWindow 中的webPreferences中添加 enableRemoteModule: true ","tags":["electron"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<p>需要在主进程中的new BrowserWindow 中的webPreferences中添加 enableRemoteModule: true</p>\n"},{"path":"/posts/electron开启nodeIntegration仍报错.html","title":"在electron开启nodeIntegration true 仍报require is not defined","date":"2021-08-24","fontNum":53,"description":"\r\n在新版本的electron中由于安全性的原因还需要设置 contextIsolation: false","tags":["electron"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<p>在新版本的electron中由于安全性的原因还需要设置 contextIsolation: false</p>\n"},{"path":"/posts/koa搭建服务器.html","title":"koa搭建服务器","date":"2021-08-24","fontNum":764,"description":"\r\njavascript\r\nconst Koa = require('koa')\r\nconst app = new Koa()\r\nconst router = require('koa-router')()\r\n \r\napp.use(async (ctx, next) => {\r\n    console.log('First');\r\n    await next();\r\n});\r\n \r\nrou","tags":["javascript"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">const Koa = require('koa')\nconst app = new Koa()\nconst router = require('koa-router')()\n \napp.use(async (ctx, next) =&gt; {\n    console.log('First');\n    await next();\n});\n \nrouter.get('/', async (ctx, next) =&gt; {\n    console.log('1');\n    ctx.response.body = `&lt;h1&gt;Hello!&lt;/h1&gt;`;\n    await next()\n});\n \nrouter.get('/2', async (ctx, next) =&gt; {\n    console.log('2'); //没有返回 前端显示404\n    await next()\n});\n \napp.use(router.routes());\n \napp.use(async (ctx, next) =&gt; {\n    console.log('A');\n    await next()\n})\n \napp.use(async (ctx, next) =&gt; {\n    console.log('B');\n    await next()\n})\n \napp.use(async (ctx, next) =&gt; {\n    console.log('C');\n})\n \napp.listen(3000);\nconsole.log('app started at port 3000...');\n</code></pre>\n"},{"path":"/posts/字符集属性.html","title":"字符集属性","date":"2021-09-01","fontNum":225,"description":"\r\nhtml\r\n字符集属性\r\n \r\ncharacterSet属性表示文档实际使用的字符集\r\n \r\n也可以用来指定新的字符集\r\n \r\n默认是‘UTF-16’\r\n \r\n可以通过<meta>元素或响应头 和新增的characterSet属性来修改\r\n \r\nget // console.log(document.characterSet) //\"UTF-16\"\r\nset // document.ch","tags":["html"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-html\">字符集属性\n \ncharacterSet属性表示文档实际使用的字符集\n \n也可以用来指定新的字符集\n \n默认是‘UTF-16’\n \n可以通过&lt;meta&gt;元素或响应头 和新增的characterSet属性来修改\n \nget // console.log(document.characterSet) //&quot;UTF-16&quot;\nset // document.characterSet = &quot;UTF-8&quot;\n</code></pre>\n"},{"path":"/posts/自定义数据属性.html","title":"自定义数据属性","date":"2021-09-06","fontNum":373,"description":"\r\nhtml\r\n自定义数据属性\r\n \r\nHTML5允许给元素指定非标准的属性\r\n \r\n但需要使用前缀data-\r\n \r\n来告诉浏览器这些属性即不包含与渲染相关的信息\r\n \r\n也不包含元素的语意信息\r\n \r\n除了前缀，自定义属性对命名是没有限制的，data-后面跟什么都可以\r\n \r\neg : <div data-id='123456'></div>\r\n \r\n定义了自定义数据属性后，可以通过元素","tags":["html"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-html\">自定义数据属性\n \nHTML5允许给元素指定非标准的属性\n \n但需要使用前缀data-\n \n来告诉浏览器这些属性即不包含与渲染相关的信息\n \n也不包含元素的语意信息\n \n除了前缀，自定义属性对命名是没有限制的，data-后面跟什么都可以\n \neg : &lt;div data-id='123456'&gt;&lt;/div&gt;\n \n定义了自定义数据属性后，可以通过元素的dataset属性来访问\n \n赋值 eg : dom节点.dataset.id = 'xxx'\n \n通过data-后面的字符串作为key来访问\n \ndata-my-name 形式要通过 myName来访问\n \n自定义数据适合链接追踪和在聚合应用程序中标志页面的不同部分\n \n单页应用程序框架也非常多使用了自定义属性\n</code></pre>\n"},{"path":"/posts/scrollIntoView.html","title":"scrollIntoView","date":"2021-09-08","fontNum":448,"description":"\r\n scrollIntoView()\r\n\r\nscrollIntoView()方法存在于所有HTML元素上\r\n\r\n 参数\r\n\r\n- alignToTop 布尔值。\r\n\r\ntrue：窗口滚动后元素的顶部与视口顶部对齐。\r\n\r\nfalse：窗口滚动后元素的底部与视口底部对齐。\r\n\r\n- scrollIntoViewOptions 是一个选项对象\r\n\r\nbehavior：定义过渡动画，可取值\"s","tags":["html"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<h2>scrollIntoView()</h2>\n<p>scrollIntoView()方法存在于所有HTML元素上</p>\n<h2>参数</h2>\n<ul>\n<li>alignToTop 布尔值。</li>\n</ul>\n<p>true：窗口滚动后元素的顶部与视口顶部对齐。</p>\n<p>false：窗口滚动后元素的底部与视口底部对齐。</p>\n<ul>\n<li>scrollIntoViewOptions 是一个选项对象</li>\n</ul>\n<p>behavior：定义过渡动画，可取值&quot;smooth&quot;和&quot;auto&quot;，默认为&quot;auto&quot;。</p>\n<p>block：定义垂直方向的对齐，可取值&quot;start&quot;、&quot;center&quot;、&quot;end&quot;和&quot;nearest&quot;，默认为&quot;start&quot;。</p>\n<p>inline：定义水平方向的对齐，可取值&quot;start&quot;、&quot;center&quot;、&quot;end&quot;和&quot;nearest&quot;，默认为&quot;nearest&quot;。</p>\n<ul>\n<li>不传参数等同于alignToTop为true</li>\n</ul>\n<p>这个方法可以用来在页面上发生某个事件时引起用户关注。把焦点设置到一个元素上也会导致浏览器将元素滚动到可见位置。</p>\n"},{"path":"/posts/innerText去除html所有的标签.html","title":"innerText去除html所有的标签","date":"2021-09-09","fontNum":616,"description":"\r\nhtml\r\n<html>\r\n<head></head>\r\n<body>\r\n    <div id='first'>\r\n        <div>\r\n            start:\r\n            <span>1</span>\r\n            <span>2</span>\r\n            <span>3</span>\r\n            <span","tags":["html"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-html\">&lt;html&gt;\n&lt;head&gt;&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id='first'&gt;\n        &lt;div&gt;\n            start:\n            &lt;span&gt;1&lt;/span&gt;\n            &lt;span&gt;2&lt;/span&gt;\n            &lt;span&gt;3&lt;/span&gt;\n            &lt;span&gt;4&lt;/span&gt;\n            &lt;span&gt;5&lt;/span&gt;\n            &lt;span&gt;6&lt;/span&gt;\n            :end\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div id='second'&gt;&lt;/div&gt;\n    &lt;script&gt;\n        const first = document.getElementById('first')\n        const firstinnerText = first.innerText\n        const second = document.getElementById('second')\n        second.innerText = firstinnerText\n        //去除所有的标签\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n"},{"path":"/posts/newFormData()打印为空.html","title":"new FormData() 打印为空","date":"2021-09-09","fontNum":125,"description":"\r\n new FormData()\r\n\r\n后台有返回数据\r\n可以在浏览器控制台看到new FormData() 对象是有值的\r\n\r\n可以通过formData.get(key)方法 (key为append的键名称) 打印出来\r\n\r\n\r\n","tags":["javascript"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<h2>new FormData()</h2>\n<pre><code>后台有返回数据\n可以在浏览器控制台看到new FormData() 对象是有值的\n\n可以通过formData.get(key)方法 (key为append的键名称) 打印出来\n</code></pre>\n"},{"path":"/posts/focus事件不冒泡.html","title":"focus 事件 不冒泡","date":"2021-09-15","fontNum":151,"description":"\r\n- focus：当元素获得焦点时触发。这个事件不冒泡，所有浏览器都支持。\r\n- focusin：当元素获得焦点时触发。这个事件是focus的冒泡版。\r\n- focusout：当元素失去焦点时触发。这个事件是blur的通用版。\r\n- blur：当元素失去焦点时触发。这个事件不冒泡，所有浏览器都支持。","tags":["html"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<ul>\n<li>focus：当元素获得焦点时触发。这个事件不冒泡，所有浏览器都支持。</li>\n<li>focusin：当元素获得焦点时触发。这个事件是focus的冒泡版。</li>\n<li>focusout：当元素失去焦点时触发。这个事件是blur的通用版。</li>\n<li>blur：当元素失去焦点时触发。这个事件不冒泡，所有浏览器都支持。</li>\n</ul>\n"},{"path":"/posts/输入框默认选中默认值.html","title":"输入框选中默认值","date":"2021-09-22","fontNum":923,"description":" select事件 选中默认值 出发点是让用户能够一次性删除所有默认内容\r\nhtml\r\n<html>\r\n \r\n<head></head>\r\n \r\n<body>\r\n    <form action=\"\">\r\n        <input type=\"text\" size=\"25\" maxlength=\"50\" name=\"inputOne\" id=\"\" value=\"initial va","tags":["html"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<h3>select事件 选中默认值 出发点是让用户能够一次性删除所有默认内容</h3>\n<pre><code class=\"language-html\">&lt;html&gt;\n \n&lt;head&gt;&lt;/head&gt;\n \n&lt;body&gt;\n    &lt;form action=&quot;&quot;&gt;\n        &lt;input type=&quot;text&quot; size=&quot;25&quot; maxlength=&quot;50&quot; name=&quot;inputOne&quot; id=&quot;&quot; value=&quot;initial value&quot;&gt;\n    &lt;/form&gt;\n    &lt;script&gt;\n        const textbox = document.forms[0].elements['inputOne']\n        console.log(textbox);\n        console.log(textbox.value);\n        textbox.select()\n    &lt;/script&gt;\n&lt;/body&gt;\n \n&lt;/html&gt;\n</code></pre>\n<p><img src=\"/bd.jpg\" alt=\"表单\"></p>\n<pre><code class=\"language-html\">&lt;html&gt;\n \n&lt;head&gt;&lt;/head&gt;\n \n&lt;body&gt;\n    &lt;form action=&quot;&quot;&gt;\n        &lt;input type=&quot;text&quot; size=&quot;25&quot; maxlength=&quot;50&quot; name=&quot;inputOne&quot; id=&quot;&quot; value=&quot;initial value&quot;&gt;\n    &lt;/form&gt;\n    &lt;script&gt;\n        const textbox = document.forms[0].elements['inputOne']\n        //聚焦选中\n        textbox.addEventListener('focus', (event) =&gt; {\n            console.log('event.target', event.target);\n            event.target.select()\n        })\n \n    &lt;/script&gt;\n&lt;/body&gt;\n \n&lt;/html&gt;\n</code></pre>\n"},{"path":"/posts/js操作cookie辅助函数.html","title":"js操作cookie辅助函数","date":"2021-09-27","fontNum":4909,"description":"\r\njavascript\r\nclass CookieUtil {\r\n    static get(name) {\r\n        const cookieName = ${encodeURIComponent(name)}\r\n        const cookieStart = document.cookie.indexOf(cookieName)\r\n \r\n        let c","tags":["cookie"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">class CookieUtil {\n    static get(name) {\n        const cookieName = `${encodeURIComponent(name)}`\n        const cookieStart = document.cookie.indexOf(cookieName)\n \n        let cookieValue = null\n \n        if (cookieStart &gt; -1) {\n            //从cookieStart位置开始找cookie结束的位置\n            let cookieEnd = document.cookie.indexOf(&quot;; &quot;, cookieStart)\n \n            if (cookieEnd === -1) {\n                cookieEnd = document.cookie.length\n            }\n            cookieValue = decodeURIComponent(document.cookie.substring(cookieStart + cookieName.length, cookieEnd))\n        }\n \n        return cookieValue\n \n    }\n    //参数分别为 cookie名称 cookie值 可选的Date对象(表示何时删除cookie) 可选的URL路径 可选的域 可选的表示是否添加secure标志的布尔值\n    static set(name, value, expires, path, domain, secure) {\n        let cookieText = `${encodeURIComponent(name)}=${encodeURIComponent(value)}`\n \n        if (expires instanceof Date) {\n            cookieText += `; expires=${expires.toGMTString()}`\n        }\n \n        if (path) {\n            cookieText += `; path=${path}`\n        }\n \n        if (domain) {\n            cookieText += `; domain=${domain}`\n        }\n \n        if (secure) {\n            cookieText += `; secure`\n        }\n \n        document.cookie = cookieText\n    }\n \n    static unset(name, path, domain, secure) {\n        //没有直接删除已有cookie的方法 这里设置cookie过期\n        CookieUtil.set(name, '', new Date(0), path, domain, secure)\n    }\n}\n</code></pre>\n<p>有子cookie情况下的操作cookie的辅助函数</p>\n<p>如果实际开发中担心碰到每个域的cookie限制，则可以考虑使用子cookie这个方案。此时要特别注意cookie的大小，不要超过对单个cookie大小的限制</p>\n<pre><code>class SubCookieUtil {\n    static get(name, subName) {\n        const subCookies = SubCookieUtil.getAll(name)\n        return subCookies ? subCookies[subName] : null\n    }\n \n    static getAll(name) {\n        const cookieName = encodeURIComponent(name) + '=',\n        const cookieStart = document.cookie.indexOf(cookieName)\n        let cookieValue = null\n        let cookieEnd\n        let subCookies\n        let parts\n        let result = {}\n \n        if (cookieStart &gt; -1) {\n            cookieEnd = document.cookie.indexOf('; ', cookieStart)\n \n            if (cookieEnd === -1) {\n                cookieEnd = document.cookie.length\n            }\n \n            cookieValue = document.cookie.substring(cookieStart + cookieName.length, cookieEnd)\n \n            if (cookieValue.length &gt; 0) {\n                subCookies = cookieValue.split(&quot;&amp;&quot;)\n \n                for (let i = 0, len = subCookies.length; i &lt; len; i++) {\n                    parts = subCookies[i].split('=')\n \n                    result[decodeURIComponent(parts[0])] = decodeURIComponent(parts[1])\n                }\n \n                return result\n            }\n        }\n        return null\n    }\n \n    static set(name, subName, value, expires, path, domain, secure) {\n        const subCookies = SubCookieUtil.getAll(name) || {}\n \n        subCookies[subName] = value\n \n        SubCookieUtil.setAll(name, subCookies, expires, path, domain, secure)\n    }\n \n    static setAll(name, subCookies, expires, path, domain, secure) {\n        const cookieText = encodeURIComponent(name) + '='\n        const subCookieParts = []\n        let subName\n \n        for (subName in subCookieParts) {\n            if (subName.length &gt; 0 &amp;&amp; subCookieParts.hasOwnProperty(subName)) {\n                subCookieParts.push(`${encodeURIComponent(subName)}=${encodeURIComponent(subCookies[subName])}`)\n            }\n        }\n \n        if (subCookieParts.length &gt; 0) {\n            cookieText += subCookieParts.join('&amp;')\n \n            if (expires instanceof Date) {\n                cookieText += `; expires=${expires.toGMTString()}`\n            }\n \n            if (path) {\n                cookieText += `; path=${path}`\n            }\n \n            if (domain) {\n                cookieText += `; domain=${domain}`\n            }\n \n            if (secure) {\n                cookieText += `; secure`\n            }\n        } else {\n            cookieText += `; expires=${(new Date(0)).toGMTString()}`\n        }\n \n \n        document.cookie = cookieText\n    }\n \n    static unset(name, subName, path, domain, secure) {\n        let subCookies = SubCookieUtil.getAll(name)\n \n        if (subCookies) {\n            delete subCookies[subName] //删除\n \n            SubCookieUtil.setAll(name, subCookies, null, path, path, domain, secure)\n        }\n    }\n \n    static unsetAll(name, path, domain, secure) {\n        SubCookieUtil.setAll(name, null, new Date(0), path, domain, secure)\n    }\n}\n</code></pre>\n<p>注意事项</p>\n<p>还有一种叫作HTTP-only的cookie</p>\n<p>HTTP-only可以在浏览器设置，也可以在服务器设置，但只能在服务器上读取</p>\n<p>JavaScript无法取得这种cookie的值。</p>\n<p>所有cookie都会作为请求头部发送给服务器，</p>\n<p>在cookie中保存大量信息可能会影响特定域浏览器请求的性能</p>\n<p>保存的cookie越大，请求完成的时间就越长</p>\n<p>通过cookie保存必要信息，以避免性能问题</p>\n<p>cookie并不是存储大量数据的理想方式</p>\n<p>不要在cookie中存储重要或敏感的信息</p>\n<p>cookie数据不是保存在安全的环境中，任何人都可能获得</p>\n<p>应该避免把信用卡号或个人地址等信息保存在cookie中</p>\n"},{"path":"/posts/iframe跨域设置cookie.html","title":"iframe跨域设置cookie","date":"2021-09-28","fontNum":90,"description":"\r\njavascript\r\n<?php \r\n    header(\"Set-Cookie: test=xxx;Secure;SameSite=None\");\r\n?>\r\n","tags":["cookie"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">&lt;?php \n    header(&quot;Set-Cookie: test=xxx;Secure;SameSite=None&quot;);\n?&gt;\n</code></pre>\n"},{"path":"/posts/给echarts坐标轴添加hover提示框.html","title":"给echarts坐标轴添加hover提示框","date":"2021-10-05","fontNum":35,"description":"\r\n给echarts坐标轴添加提示信息，思路：通过定位与鼠标指针的位置","tags":["echarts"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<p>给echarts坐标轴添加提示信息，思路：通过定位与鼠标指针的位置</p>\n"},{"path":"/posts/老鼠迷宫问题.html","title":"老鼠迷宫问题","date":"2021-10-06","fontNum":1479,"description":"\r\njavascript\r\n//回溯法解决老鼠迷宫问题\r\n//基本结构 迷宫用二维数组表示\r\nfunction ratInMaze(maze) {\r\n    //初始化输出结果类型为二维数组先用0填充\r\n    const solution = []\r\n \r\n    for (let i = 0; i < maze.length; i) {\r\n        solution[i] = ","tags":["回溯法"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">//回溯法解决老鼠迷宫问题\n//基本结构 迷宫用二维数组表示\nfunction ratInMaze(maze) {\n    //初始化输出结果类型为二维数组先用0填充\n    const solution = []\n \n    for (let i = 0; i &lt; maze.length; i++) {\n        solution[i] = []\n \n        for (let j = 0; j &lt; maze[i].length; j++) {\n            solution[i][j] = 0\n        }\n    }\n    //调用寻找路径的方法\n    if (findPath(maze, 0, 0, solution) === true) {\n        return solution\n    }\n    return 'NO PATH FOUND'\n}\n \n//findPath方法\nfunction findPath(maze, x, y, solution) {\n    //maze 条件 x,y 初始位置坐标 solution 返回结果\n    const n = maze.length\n    //结束条件  到达迷宫出口\n    if (x === n - 1 &amp;&amp; y === n - 1) {\n        solution[x][y] = 1\n        return true\n    }\n \n    //坐标的位置大于0且小于初始数组的长度  且初始数组中该位置的值不为0  结果数组该位置赋值1\n    if (isSafe(maze, x, y) === true) {\n \n        solution[x][y] = 1\n        //往右走一步  \n        if (findPath(maze, x + 1, y, solution)) {\n            return true\n        }\n        //往右走不通  往下走一步 \n        if (findPath(maze, x, y + 1, solution)) {\n            return true\n        }\n \n        //走不通\n        solution[x][y] = 0\n \n        return false\n    }\n    return false\n \n}\n \nfunction isSafe(maze, x, y) {\n    const n = maze.length\n    //坐标的位置大于0且小于初始数组的长度  且该位置的值不为0\n    if (x &gt;= 0 &amp;&amp; y &gt;= 0 &amp;&amp; x &lt; n &amp;&amp; y &lt; n &amp;&amp; maze[x][y] !== 0) {\n        return true\n    }\n    return false\n}\n \nconst maze = [\n    [1, 0, 0, 0],\n    [1, 1, 1, 1],\n    [0, 0, 1, 0],\n    [0, 1, 1, 1]\n]\n \nconsole.log(ratInMaze(maze));\n</code></pre>\n"},{"path":"/posts/99数独问题.html","title":"9x9数独问题","date":"2021-10-11","fontNum":2784,"description":"\r\njavascript\r\n \r\nconst sudokuGrid = [\r\n    [5, 3, 0, 0, 7, 0, 0, 0, 0],\r\n    [6, 0, 0, 1, 9, 5, 0, 0, 0],\r\n    [0, 9, 8, 0, 0, 0, 0, 6, 0],\r\n    [8, 0, 0, 0, 6, 0, 0, 0, 3],\r\n    [4, 0, 0, 8, 0, 3,","tags":["回溯法"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\"> \nconst sudokuGrid = [\n    [5, 3, 0, 0, 7, 0, 0, 0, 0],\n    [6, 0, 0, 1, 9, 5, 0, 0, 0],\n    [0, 9, 8, 0, 0, 0, 0, 6, 0],\n    [8, 0, 0, 0, 6, 0, 0, 0, 3],\n    [4, 0, 0, 8, 0, 3, 0, 0, 1],\n    [7, 0, 0, 0, 2, 0, 0, 0, 6],\n    [0, 6, 0, 0, 0, 0, 2, 8, 0],\n    [0, 0, 0, 4, 1, 9, 0, 0, 5],\n    [0, 0, 0, 0, 8, 0, 0, 7, 9],\n]\n \nfunction suduSolver(sudu) {\n    if (solveSudoku(sudu)) {\n        return sudu\n    }\n    return 'UNSOLVED'\n}\n \nconst UNASSIGNED = 0\n \nfunction solveSudoku(sudu) {\n    let rowIndex = null, colIndex = null, checkBlankSpace = false\n    //如果有空白位置我们要从两个循环中跳出\n    for (let row = 0; row &lt; 9; row++) {\n        for (let col = 0; col &lt; 9; col++) {\n            if (sudu[row][col] === UNASSIGNED) {\n                rowIndex = row\n                colIndex = col\n                checkBlankSpace = true\n                break\n            }\n        }\n \n        if (checkBlankSpace) {\n            break\n        }\n    }\n \n    if (!checkBlankSpace) {\n        return true\n    }\n \n    for (let num = 1; num &lt;= 9; num++) {\n        //先给未分配值的元素赋值然后依次往后递归调用如果有不符合的就回溯\n        //重新赋值为UNASSIGNED 未分配的状态然后进行下一轮循环\n        if (isSafe(rowIndex, colIndex, sudu, num)) {\n            sudu[rowIndex][colIndex] = num\n            if (solveSudoku(sudu)) {\n                return true\n            }\n            sudu[rowIndex][colIndex] = UNASSIGNED\n \n        }\n    }\n    return false\n \n}\n//检查每一行是否符合规则\nfunction isSafe(row, col, sudu, num) {\n    return !usedInRow(row, sudu, num) &amp;&amp;\n        !usedInCol(col, sudu, num) &amp;&amp;\n        !usedInBox(row - row % 3, col - col % 3, sudu, num)\n \n}\n//检查每一列是否符合规则\nfunction usedInRow(row, sudu, num) {\n    for (let i = 0; i &lt; 9; i++) {\n        if (sudu[row][i] === num) {\n            return true\n        }\n    }\n    return false\n}\n//检查每一宫是否符合规则\nfunction usedInCol(col, sudu, num) {\n    for (let i = 0; i &lt; 9; i++) {\n        if (sudu[i][col] === num) {\n            return true\n        }\n    }\n    return false\n}\n \nfunction usedInBox(row, col, sudu, num) {\n    for (let i = 0; i &lt; 3; i++) {\n        for (let j = 0; j &lt; 3; j++) {\n            if (sudu[row + i][col + j] === num) {\n                return true\n            }\n        }\n    }\n    return false\n \n}\nconsole.log(suduSolver(sudokuGrid));\n \n// 9x9数独规则\n//  1.数字 1-9 在每一行只能出现一次。\n// \t2.数字 1-9 在每一列只能出现一次。\n// \t3.数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。\n// [\n//     [5, 3, 4, 6, 7, 8, 9, 1, 2], \n//     [6, 7, 2, 1, 9, 5, 3, 4, 8], \n//     [1, 9, 8, 3, 4, 2, 5, 6, 7], \n//     [8, 5, 9, 7, 6, 1, 4, 2, 3], \n//     [4, 2, 6, 8, 5, 3, 7, 9, 1], \n//     [7, 1, 3, 9, 2, 4, 8, 5, 6], \n//     [9, 6, 1, 5, 3, 7, 2, 8, 4], \n//     [2, 8, 7, 4, 1, 9, 6, 3, 5], \n//     [3, 4, 5, 2, 8, 6, 1, 7, 9]\n// ]\n</code></pre>\n"},{"path":"/posts/最少硬币找零问题记录.html","title":"动态规划法最少硬币找零问题记录","date":"2021-10-17","fontNum":951,"description":"\r\njavascript\r\nfunction minCoinChange(coins, amount) {\r\n    const cache = {}\r\n \r\n    function makeChange(amount) {\r\n        let newAmount = 0,\r\n            newMin = [],\r\n            min = []\r\n      ","tags":["动态规划"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">function minCoinChange(coins, amount) {\n    const cache = {}\n \n    function makeChange(amount) {\n        let newAmount = 0,\n            newMin = [],\n            min = []\n        if (amount === 0) {\n            return []\n        }\n \n        if (cache[amount]) {\n            return cache[amount]\n        }\n \n        for (const coin of coins) {\n            newAmount = amount - coin\n            //传入0会返回空数组 所以这里&gt;=0\n            if (newAmount &gt;= 0) {\n                newMin = makeChange(newAmount)\n            }\n            //因为newMin需要加上coin然后小于min\n            //newMIn + 1 &lt; min\n            //newMin &lt; min - 1\n \n            if (newAmount &gt;= 0 &amp;&amp; (newMin.length &lt; min.length - 1 || !min.length)) {\n                min = [coin].concat(newMin)\n            }\n        }\n \n        return cache[amount] = min\n    }\n \n    return makeChange(amount)\n}\n \nconsole.log(minCoinChange([1, 5, 10, 25], 66));\n \n\n</code></pre>\n"},{"path":"/posts/element_ui_table表头和表体错位.html","title":"chrome 下 缩放element ui 的table组件会导致表头和表体错位","date":"2021-10-19","fontNum":310,"description":"\r\nchrome 下 缩放element ui 的table组件会导致表头和表体错位\r\n \r\n在index.html或者入口文件App.vue中添加样式\r\n \r\n亲测App.vue中无效的话就在index.html中添加\r\n\r\nbody .el-table th.gutter{\r\n    display: table-cell!important;\r\n}\r\n\r\n给类名为 gutter的","tags":["element_ui"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<p>chrome 下 缩放element ui 的table组件会导致表头和表体错位</p>\n<p>在index.html或者入口文件App.vue中添加样式</p>\n<p>亲测App.vue中无效的话就在index.html中添加</p>\n<pre><code>body .el-table th.gutter{\n    display: table-cell!important;\n}\n</code></pre>\n<p>给类名为 gutter的表头单元格添加display: table-cell!important;</p>\n<p>display: table-cell</p>\n<p>这个属性让元素变成表格单元</p>\n<p>配合display:table可以模拟table的布局属性</p>\n"},{"path":"/posts/二分查找.html","title":"二分查找","date":"2021-10-20","fontNum":982,"description":"\r\njavascript\r\nfunction binarySearchRecursive(array, value, low, high, compareFn) {\r\n    if (low <= high) {\r\n        const min = Math.floor((low  high) / 2)\r\n        const element = array[mid]\r\n \r\n","tags":["搜索"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">function binarySearchRecursive(array, value, low, high, compareFn) {\n    if (low &lt;= high) {\n        const min = Math.floor((low + high) / 2)\n        const element = array[mid]\n \n        if (compareFn(element, value) === 'LESS_THEN') {\n            return binarySearchRecursive(array, value, min + 1, high, compareFn)\n        } else if (compareFn(element, value) === 'BIGGER_THEN') {\n            return binarySearchRecursive(array, value, low, min - 1, compareFn)\n        } else {\n            return mid\n        }\n    }\n    return 'DOES_NOT_EXIST'\n}\n \nfunction binarySearch(array, value, compareFn) {\n    const sortedArray = quickSort(array)\n    const low = 0\n    const high = sortedArray.length - 1\n \n    return binarySearchRecursive(array, value, low, high, compareFn)\n}\n \nfunction compareFn(value1, value2) {\n    return value1 &gt; value2 ? 'BIGGER_THAN' : value1 &lt; value2 ? 'LESS_THEN' : EQUAL\n}\nfunction quickSort() {\n    .......\n}\n</code></pre>\n"},{"path":"/posts/完整的背包问题.html","title":"完整的背包问题","date":"2021-10-21","fontNum":1639,"description":"\r\njavascript\r\n//动态规划解决完整的背包问题\r\nfunction package(capacity, weights, values) {\r\n    const cache = []\r\n    const len = values.length\r\n    for (let i = 0; i <= len; i) {\r\n        cache[i] = []\r\n    }","tags":["动态规划"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">//动态规划解决完整的背包问题\nfunction package(capacity, weights, values) {\n    const cache = []\n    const len = values.length\n    for (let i = 0; i &lt;= len; i++) {\n        cache[i] = []\n    }\n    for (let i = 0; i &lt;= len; i++) {\n        for (let w = 0; w &lt;= capacity; w++) {\n            //因为weights,values数组里的是从0开始的所以这里取i-1\n            const item = i - 1\n            //**物品为0或者容量为0的时候的时候最大value都为0 */\n            if (i === 0 || w === 0) {\n                cache[i][w] = 0\n                // 当前物品的重量小于容量 \n            } else if (weights[item] &lt;= w) {\n                //**当前物品value + 剩余容量能装的最大value */\n                const leftCapacity = w - weights[item]\n                const a = values[item] + cache[item][leftCapacity]\n                //**上一种装法的最大value */\n                const b = cache[item][w]\n                //**比较两者大小 */\n                cache[i][w] = a &gt; b ? a : b\n            } else {\n                //**上一种装法的最大value */\n                cache[i][w] = cache[item][w]\n            }\n        }\n    }\n    findValues(capacity, weights, values, cache)\n    return cache[len][capacity]\n}\n \nfunction findValues(capacity, weights, values, cache) {\n    let x = values.length\n \n    let y = capacity\n \n    while (x &gt; 0 &amp;&amp; y &gt; 0) {\n        if (cache[x][y] !== cache[x - 1][y]) {\n            console.log(`解的构成weight:${weights[x - 1]},value:${values[x - 1]}`);\n            x--\n            y -= cache[x][y]\n \n        } else {\n            x--\n        }\n    }\n \n}\n \nconst values = [3, 4, 5],\n    weights = [2, 3, 4],\n    capacity = 5\n \n \nconsole.log(package(capacity, weights, values));\n</code></pre>\n"},{"path":"/posts/最长公共子序列.html","title":"最长公共子序列","date":"2021-10-22","fontNum":1615,"description":"\r\njavascript\r\n//最长公共子序列：找出两个字符串序列的最长子序列的长度。最长子序列是指，在两个字符串序列中以相同顺序出现，但不要求连续（非字符串子串）的字符串序列。\r\n \r\nfunction longestPublicStr(wordX, wordY) {\r\n    const m = wordX.length\r\n    const n = wordY.length\r\n    ","tags":["动态规划"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">//最长公共子序列：找出两个字符串序列的最长子序列的长度。最长子序列是指，在两个字符串序列中以相同顺序出现，但不要求连续（非字符串子串）的字符串序列。\n \nfunction longestPublicStr(wordX, wordY) {\n    const m = wordX.length\n    const n = wordY.length\n    const l = []\n    const solution = []\n \n    for (let i = 0; i &lt;= m; i++) {\n        l[i] = []\n        solution[i] = []\n        for (let j = 0; j &lt;= n; j++) {\n            l[i][j] = 0\n            solution[i][j] = 0\n        }\n    }\n \n    for (let i = 0; i &lt;= m; i++) {\n        for (let j = 0; j &lt;= n; j++) {\n            if (i === 0 || j === 0) {\n                l[i][j] = 0\n            } else if (wordX[i - 1] === wordY[j - 1]) {\n                l[i][j] = l[i - 1][j - 1] + 1\n                solution[i][j] = 'diagonal'\n            } else {\n                const a = l[i - 1][j]\n                const b = l[i][j - 1]\n \n                l[i][j] = a &gt; b ? a : b\n                solution[i][j] = (l[i][j] === l[i - 1][j]) ? 'top' : 'left'\n            }\n        }\n \n    }\n    printSolution(solution, wordX, m, n)\n    return l[m][n]\n}\n \n \nfunction printSolution(solution, wordX, m, n) {\n    let a = m\n    let b = n\n    let x = solution[a][b]\n    let answer = ''\n    while (x !== 0) {\n        if (solution[a][b] === 'diagonal') {\n            answer = wordX[a - 1] + answer\n            a--\n            b--\n        } else if (solution[a][b] === 'left') {\n            b--\n        } else if (solution[a][b] === 'top') {\n            a--\n        }\n        x = solution[a][b]\n    }\n    console.log('结果:' + answer);\n}\n \n \n \nconsole.log(longestPublicStr('acdaed', 'abcadf'));\n</code></pre>\n"},{"path":"/posts/硬币问题和背包问题.html","title":"硬币问题和背包问题","date":"2021-10-26","fontNum":901,"description":"\r\njavascript\r\n//硬币问题\r\n// function minCoinChange(coins, amount) {\r\n//     const change = []\r\n//     let total = 0\r\n//     for (let i = coins.length; i >= 0; i--) {\r\n//         const coin = coins[i]\r","tags":["贪心法"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">//硬币问题\n// function minCoinChange(coins, amount) {\n//     const change = []\n//     let total = 0\n//     for (let i = coins.length; i &gt;= 0; i--) {\n//         const coin = coins[i]\n//         while (total + coin &lt;= amount) {\n//             change.push(coin)\n//             total += coin\n//         }\n//     }\n//     return change\n// }\n \n// console.log(minCoinChange([1, 5, 10, 25], 36));\n \n//背包问题\nfunction knapStack(capacity, weights, values) {\n    const valueLen = values.length\n    let load = 0\n    let val = 0\n    for (let i = 0; i &lt; valueLen &amp;&amp; load &lt; capacity; i++) {\n        if (weights[i] &lt;= capacity - load) {\n            val += values[i]\n            load += weights[i]\n        } else {\n            const r = (capacity - load) / weights[i]\n            val += r * values[i]\n            load += weights[i]\n        }\n \n \n    }\n    return val\n}\n</code></pre>\n"},{"path":"/posts/element_ui的table添加递增序号.html","title":"element-ui的table添加递增序号","date":"2021-10-27","fontNum":394,"description":"\r\njavascript\r\ndata() {\r\n    return {\r\n      pagger:{\r\n        dataTotal: 1000,  // 数据总数\r\n        pagesize:10,  //每页的数据条数\r\n        currentPage:1,//当前页\r\n      }\r\n        \r\n    }\r\n}\r\n \r\n \r\n<el-table-c","tags":["element_ui"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">data() {\n    return {\n      pagger:{\n        dataTotal: 1000,  // 数据总数\n        pagesize:10,  //每页的数据条数\n        currentPage:1,//当前页\n      }\n        \n    }\n}\n \n \n&lt;el-table-column label=&quot;序号&quot; width=&quot;100&quot;&gt;\n    &lt;template slot-scope=&quot;scope&quot;&gt;\n        &lt;span&gt;{{(pagger.currentPage - 1) * pagger.pagesize + scope.$index + 1}}&lt;/span&gt;\n    &lt;/template&gt;\n&lt;/el-table-column&gt;\n</code></pre>\n"},{"path":"/posts/桶排序算法.html","title":"桶排序算法","date":"2021-10-27","fontNum":1768,"description":"\r\njavascript\r\n//插入排\r\nfunction insertSort(array) {\r\n    const { length } = array\r\n    let temp\r\n \r\n    for (let i = 1; i < length; i) {\r\n        let j = i\r\n        temp = array[i]\r\n \r\n        whil","tags":["数据结构与算法"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">//插入排\nfunction insertSort(array) {\n    const { length } = array\n    let temp\n \n    for (let i = 1; i &lt; length; i++) {\n        let j = i\n        temp = array[i]\n \n        while (j &gt; 0 &amp;&amp; array[j - 1] &gt; temp) {\n            array[j] = array[j - 1]\n            j--\n        }\n \n        array[j] = temp\n    }\n    return array\n}\n//桶排\nfunction bucketSort(array, bucketSize = 5) {\n \n    if (array.length &lt; 2) {\n        return array\n    }\n \n    const buckets = createBuckets(array, bucketSize)\n \n    return sortBuckets(buckets)\n}\n \nfunction createBuckets(array, bucketSize) {\n    let minValue = array[0]\n    let maxValue = array[0]\n    //获取最小值 和 最大值\n    for (let i = 1; i &lt; array.length; i++) {\n        if (array[i] &lt; minValue) {\n            minValue = array[i]\n        } else if (array[i] &gt; maxValue) {\n            maxValue = array[i]\n        }\n    }\n    //计算每个桶中需要分布的元素个数\n    const bucketCount = Math.floor((maxValue - minValue) / bucketSize) + 1\n    //初始化每个桶\n \n    console.log('bucketCount', bucketCount);\n    const buckets = []\n    for (let i = 0; i &lt; bucketCount; i++) {\n        buckets[i] = []\n    }\n    //最后一步是将元素分布到桶中\n    for (let i = 0; i &lt; array.length; i++) {\n        const bucketIndex = Math.floor((array[i] - minValue) / bucketSize);\n \n        buckets[bucketIndex].push(array[i])\n    }\n    console.log('buckets', buckets);\n    return buckets\n}\n \nfunction sortBuckets(buckets) {\n    const sortedArray = []\n    for (let i = 0; i &lt; buckets.length; i++) {\n        if (buckets[i] != null) {\n            insertSort(buckets[i])\n            sortedArray.push(...buckets[i])\n \n        }\n    }\n    return sortedArray\n}\n \nconsole.log(bucketSort([11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\n</code></pre>\n"},{"path":"/posts/计数排序.html","title":"计数排序","date":"2021-10-27","fontNum":981,"description":"\r\njavascript\r\n//计数\r\n \r\n \r\nfunction countingSort(array) {\r\n    if (array.length < 2) {\r\n        return array\r\n    }\r\n    //找出最大值\r\n    const maxValue = findMaxValue(array)\r\n    //声明一个数组 \r\n    //将需要进行","tags":["排序"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">//计数\n \n \nfunction countingSort(array) {\n    if (array.length &lt; 2) {\n        return array\n    }\n    //找出最大值\n    const maxValue = findMaxValue(array)\n    //声明一个数组 \n    //将需要进行排序的数组的value 映射到另一个数组的index\n    const counts = new Array(maxValue + 1)\n \n    array.forEach(element =&gt; {\n        if (!counts[element]) {\n            counts[element] = 0\n        }\n \n        counts[element]++\n \n    });\n \n    console.log('counts', counts);\n    //根据映射后的数组的index和value(value为该index出现的次数)\n    //由此生成排序好的array数组\n    let sortIndex = 0\n    counts.forEach((count, i) =&gt; {\n \n        while (count &gt; 0) {\n            array[sortIndex++] = i\n            count--\n        }\n \n    })\n \n    return array\n}\n \nfunction findMaxValue(array) {\n    let max = array[0]\n    for (let i = 1; i &lt; array.length; i++) {\n        if (array[i] &gt; max) {\n            max = array[i]\n        }\n    }\n    return max\n}\n \nconsole.log(countingSort([5, 4, 3, 2, 1]));\n</code></pre>\n"},{"path":"/posts/基数排序.html","title":"基数排序","date":"2021-10-28","fontNum":1357,"description":"\r\njavascript\r\n//基数排序\r\n \r\nfunction radixSort(array, radixBase = 10) {\r\n    if (array.length < 2) {\r\n        return array\r\n    }\r\n \r\n    const maxValue = Math.max(...array)\r\n    const minValue = Math","tags":["排序"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">//基数排序\n \nfunction radixSort(array, radixBase = 10) {\n    if (array.length &lt; 2) {\n        return array\n    }\n \n    const maxValue = Math.max(...array)\n    const minValue = Math.min(...array)\n \n    let significantDigit = 1\n \n    while ((maxValue - minValue) / significantDigit &gt;= 1) {\n        array = countingSortForRadix(array, radixBase, significantDigit, minValue)\n \n        significantDigit *= radixBase\n    }\n \n    return array\n}\n \nfunction countingSortForRadix(array, radixBase, significantDigit, minValue) {\n    let bucketsIndex\n    const buckets = []\n    const aux = []\n \n    for (let i = 0; i &lt; radixBase; i++) {\n        buckets[i] = 0\n    }\n    //计数排序\n    //统计数量\n    for (let i = 0; i &lt; array.length; i++) {\n        bucketsIndex = Math.floor(((array[i] - minValue) / significantDigit) % radixBase)\n        buckets[bucketsIndex]++\n    }\n    //计算位置\n    for (let i = 1; i &lt; radixBase; i++) {\n        buckets[i] += buckets[i - 1]\n    }\n    //进行排序\n    for (let i = array.length - 1; i &gt;= 0; i--) {\n        bucketsIndex = Math.floor(((array[i] - minValue) / significantDigit) % radixBase)\n        --buckets[bucketsIndex]\n        aux[buckets[bucketsIndex]] = array[i]\n    }\n \n    console.log('aux', aux);\n    return aux\n}\n \nconsole.log(radixSort([11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\n</code></pre>\n"},{"path":"/posts/排序算法汇总.html","title":"排序算法汇总","date":"2021-10-28","fontNum":7997,"description":"\r\njavascript\r\n// //冒泡\r\n// // function bubbleSort(array) {\r\n// //     const { length } = array\r\n// //     for (let i = 0; i < length; i) {\r\n// //         for (let j = 0; j < length - i - 1; j) {","tags":["排序"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">// //冒泡\n// // function bubbleSort(array) {\n// //     const { length } = array\n// //     for (let i = 0; i &lt; length; i++) {\n// //         for (let j = 0; j &lt; length - i - 1; j++) {\n// //             if (array[j] &gt; array[j + 1]) {\n// //                 // let temp = array[j]\n// //                 // array[j] = array[j + 1]\n// //                 // array[j + 1] = temp\n// //                 [array[j], array[j + 1]] = [array[j + 1], array[j]]\n// //             }\n// //         }\n// //     }\n// //     return array\n// // }\n// // console.log(bubbleSort([5, 4, 3, 2, 1]));\n// //选择\n// // function selectionSort(array) {\n// //     const { length } = array\n// //     let indexMin\n// //     for (let i = 0; i &lt; length; i++) {\n// //         indexMin = i\n// //         for (let j = i; j &lt; length; j++) {\n// //             if (array[indexMin] &gt; array[j]) {\n// //                 indexMin = j\n// //             }\n// //         }\n// //         if (i !== indexMin) {\n// //             [array[i], array[indexMin]] = [array[indexMin], array[i]]\n// //         }\n// //     }\n// //     return array\n// // }\n// // console.log(selectionSort([5, 4, 3, 2, 1]));\n// //插入\n// function insertSort(array) {\n//     const { length } = array\n//     let temp\n//     for (let i = 1; i &lt; length; i++) {\n//         let j = i\n//         temp = array[i]\n//         while (j &gt; 0 &amp;&amp; array[j - 1] &gt; temp) {\n//             array[j] = array[j - 1]\n//             j--\n//         }\n//         array[j] = temp\n//     }\n//     return array\n// }\n// // 5,4,3,2,1\n// // \n// // console.log(insertSort([5, 4, 3, 2, 1]));\n// // //排序小型数组时，此算法比选择排序和冒泡排序性能要好。\n// //归并\n// // function mergeSort(array) {\n// //     if (array.length &gt; 1) {\n// //         const { length } = array\n// //         const minddle = Math.floor(length / 2)\n// //         const left = mergeSort(array.slice(0, minddle))\n// //         const right = mergeSort(array.slice(minddle, length))\n// //         array = merge(left, right)\n// //     }\n// //     return array\n// // }\n// // function merge(left, right) {\n// //     let i = 0;\n// //     let j = 0;\n// //     const result = []\n// //     // console.log(left, right); 给两个数组进行排序\n// //     while (i &lt; left.length &amp;&amp; j &lt; right.length) {\n// //         result.push(left[i] &lt; right[j] ? left[i++] : right[j++])\n// //     }\n// //     // console.log('result', result); 将大的那个数组的剩余部分合并入结果\n// //     return result.concat(i &lt; left.length ? left.slice(i) : right.slice(j))\n// // }\n// // console.log(mergeSort([5, 4, 3, 2, 1]));\n// //快速\n// // function quickSort(array) {\n// //     return quick(array, 0, array.length - 1)\n// // }\n// // function quick(array, left, right) {\n// //     let index\n// //     if (array.length &gt; 1) {\n// //         index = partition(array, left, right)\n// //         if (left &lt; index - 1) {\n// //             quick(array, left, index - 1)\n// //         }\n// //         if (index &lt; right) {\n// //             quick(array, index, right)\n// //         }\n// //     }\n// //     return array\n// // }\n// // function partition(array, left, right) {\n// //     const pivot = array[Math.floor((right + left) / 2)]\n \n// //     let i = left\n// //     let j = right\n// //     while (i &lt;= j) {\n// //         while (array[i] &lt; pivot) {\n// //             i++\n// //         }\n// //         while (array[j] &gt; pivot) {\n// //             j--\n// //         }\n// //         if (i &lt;= j) {\n// //             [array[i], array[j]] = [array[j], array[i]]\n// //             i++\n// //             j--\n// //         }\n// //     }\n// //     return i\n// // }\n// // console.log(quickSort([5, 4, 3, 2, 1]));\n// // //计数\n// // function countingSort(array) {\n// //     if (array.length &lt; 2) {\n// //         return array\n// //     }\n// //     //找出最大值\n// //     const maxValue = findMaxValue(array)\n// //     //声明一个数组 \n// //     //将需要进行排序的数组的value 映射到另一个数组的index\n// //     const counts = new Array(maxValue + 1)\n// //     array.forEach(element =&gt; {\n// //         if (!counts[element]) {\n// //             counts[element] = 0\n// //         }\n// //         counts[element]++\n// //     });\n// //     console.log('counts', counts);\n// //     //根据映射后的数组的index和value(value为该index出现的次数)\n// //     //由此生成排序好的array数组\n// //     let sortIndex = 0\n// //     counts.forEach((count, i) =&gt; {\n// //         while (count &gt; 0) {\n// //             array[sortIndex++] = i\n// //             count--\n// //         }\n// //     })\n// //     return array\n// // }\n// // function findMaxValue(array) {\n// //     let max = array[0]\n// //     for (let i = 1; i &lt; array.length; i++) {\n// //         if (array[i] &gt; max) {\n// //             max = array[i]\n// //         }\n// //     }\n// //     return max\n// // }\n// // console.log(countingSort([5, 4, 3, 2, 1]));\n// //桶排\n// function bucketSort(array, bucketSize = 5) {\n//     if (array.length &lt; 2) {\n//         return array\n//     }\n//     const buckets = createBuckets(array, bucketSize)\n//     return sortBuckets(buckets)\n// }\n// function createBuckets(array, bucketSize) {\n//     let minValue = array[0]\n//     let maxValue = array[0]\n//     //获取最小值 和 最大值\n//     for (let i = 1; i &lt; array.length; i++) {\n//         if (array[i] &lt; minValue) {\n//             minValue = array[i]\n//         } else if (array[i] &gt; maxValue) {\n//             maxValue = array[i]\n//         }\n//     }\n//     //计算每个桶中需要分布的元素个数\n//     const bucketCount = Math.floor((maxValue - minValue) / bucketSize) + 1\n//     //初始化每个桶\n//     console.log('bucketCount', bucketCount);\n//     const buckets = []\n//     for (let i = 0; i &lt; bucketCount; i++) {\n//         buckets[i] = []\n//     }\n//     //最后一步是将元素分布到桶中\n//     for (let i = 0; i &lt; array.length; i++) {\n//         const bucketIndex = Math.floor((array[i] - minValue) / bucketSize);\n \n//         buckets[bucketIndex].push(array[i])\n//     }\n//     console.log('buckets', buckets);\n//     return buckets\n// }\n \n// function sortBuckets(buckets) {\n//     const sortedArray = []\n//     for (let i = 0; i &lt; buckets.length; i++) {\n//         if (buckets[i] != null) {\n//             insertSort(buckets[i])\n//             sortedArray.push(...buckets[i])\n \n//         }\n//     }\n//     return sortedArray\n// }\n \n// console.log(bucketSort([11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\n \n \n \n//基数排序\n \nfunction radixSort(array, radixBase = 10) {\n    if (array.length &lt; 2) {\n        return array\n    }\n \n    const maxValue = Math.max(...array)\n    const minValue = Math.min(...array)\n \n    let significantDigit = 1\n \n    while ((maxValue - minValue) / significantDigit &gt;= 1) {\n        //10 1 1\n        //10 10 1\n        array = countingSortForRadix(array, radixBase, significantDigit, minValue)\n \n        significantDigit *= radixBase\n    }\n \n    return array\n}\n \nfunction countingSortForRadix(array, radixBase, significantDigit, minValue) {\n    console.log('-------------------------------------------------');\n    let bucketsIndex\n    const buckets = []\n    const aux = []\n \n    for (let i = 0; i &lt; radixBase; i++) {\n        buckets[i] = 0\n    }\n    //计数排序\n    for (let i = 0; i &lt; array.length; i++) {\n        bucketsIndex = Math.floor(((array[i] - minValue) / significantDigit) % radixBase)\n        // console.log(array[i], '=====', bucketsIndex);\n        buckets[bucketsIndex]++\n    }\n \n    // console.log('buckets', buckets);\n    for (let i = 1; i &lt; radixBase; i++) {\n \n        buckets[i] += buckets[i - 1]\n    }\n    // console.log('&gt;&gt;&gt;&gt;&gt;', buckets);\n \n    for (let i = array.length - 1; i &gt;= 0; i--) {\n        bucketsIndex = Math.floor(((array[i] - minValue) / significantDigit) % radixBase)\n        // console.log('&lt;&lt;&lt;&lt;&lt;', --buckets[bucketsIndex]);\n \n        --buckets[bucketsIndex]\n        aux[buckets[bucketsIndex]] = array[i]\n    }\n \n    console.log('aux', aux);\n    return aux\n}\n \nconsole.log(radixSort([11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\n</code></pre>\n"},{"path":"/posts/内插搜索.html","title":"内插搜索","date":"2021-11-01","fontNum":731,"description":"\r\njavascript\r\n \r\n//内插搜索\r\nfunction interpolationSearch(array, value) {\r\n    const { length } = array\r\n    let low = 0\r\n    let high = length - 1\r\n    let position = -1\r\n    let delta = -1\r\n    while","tags":["搜索"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\"> \n//内插搜索\nfunction interpolationSearch(array, value) {\n    const { length } = array\n    let low = 0\n    let high = length - 1\n    let position = -1\n    let delta = -1\n    while (low &lt;= high &amp;&amp; value &gt;= array[low] &amp;&amp; value &lt;= array[high]) {\n        delta = (value - array[low]) / (array[high] - array[low])\n \n        position = low + Math.floor((high - low) * delta) //内插计算公式 查找的初始位置\n \n        if (array[position] === value) {\n            return position\n        }\n \n        if (array[position] &lt; value) {\n            low = position + 1\n        } else {\n            high = position - 1\n        }\n    }\n \n    return 'NOT_EXIST'\n}\n \nconsole.log(interpolationSearch([1, 2, 3, 4, 5], 2));\n</code></pre>\n"},{"path":"/posts/图的广深遍历.html","title":"图的广/深du遍历","date":"2021-11-05","fontNum":2286,"description":"\r\njavascript\r\nclass Graph {\r\n    constructor(hasDirected = false) {\r\n        this.hasDirected = hasDirected //判断是否为有向图\r\n        this.vertices = [] //顶点\r\n        this.adjList = {} //临接矩阵\r\n    }\r\n   ","tags":["BFS_DFS"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">class Graph {\n    constructor(hasDirected = false) {\n        this.hasDirected = hasDirected //判断是否为有向图\n        this.vertices = [] //顶点\n        this.adjList = {} //临接矩阵\n    }\n    //添加顶点\n    addVertex(v) {\n        if (!this.vertices.includes(v)) {\n            this.vertices.push(v)\n \n            this.adjList[v] = []\n        }\n    }\n    //添加边 v,w为顶点\n    addEdge(v, w) {\n        !this.adjList[v] ? this.addVertex[v] : null\n        !this.adjList[w] ? this.addVertex[w] : null\n \n        this.adjList[v].push(w)\n \n        !this.hasDirected ? this.adjList[w].push(v) : null\n    }\n \n    getVertices() {\n        return this.vertices\n    }\n \n    getAdjList() {\n        return this.adjList\n    }\n}\n \nconst graph = new Graph()\n \nconst myVertices = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I']\n \nfor (const e of myVertices) {\n    graph.addVertex(e)\n}\n \ngraph.addEdge('A', 'B')\ngraph.addEdge('A', 'C')\ngraph.addEdge('A', 'D')\ngraph.addEdge('C', 'D')\ngraph.addEdge('C', 'G')\ngraph.addEdge('D', 'G')\ngraph.addEdge('D', 'H')\ngraph.addEdge('B', 'E')\ngraph.addEdge('B', 'F')\ngraph.addEdge('E', 'I')\n \n \n// console.log(graph);\n \n \nconst Colors = {\n    WHITE: 0,\n    GREY: 1,\n    BLACK: 2\n}\n \nfunction initializeColor(vertices) {\n    const color = {}\n \n    for (const e of vertices) {\n        color[e] = Colors.WHITE\n    }\n \n    return color\n}\n \n//breadth\nfunction breadth(graph, statrtVertex, callBack) {\n    const vertices = graph.getVertices()\n    const adjList = graph.getAdjList()\n \n    const color = initializeColor(vertices)\n \n    const queue = []\n \n    queue.push(statrtVertex)\n \n    while (queue.length &gt; 0) {\n        const currentVertex = queue.shift()\n        const neighbours = adjList[currentVertex]\n \n        color[currentVertex] = Colors.GREY\n        for (const e of neighbours) {\n \n            if (color[e] === Colors.WHITE) {\n                color[e] = Colors.GREY\n                queue.push(e)\n            }\n \n        }\n \n        color[currentVertex] = Colors.BLACK\n \n        callBack ? callBack(currentVertex) : null\n    }\n}\n \nfunction printVertex(value) {\n    console.log('Visited vertex:', value);\n}\n \nbreadth(graph, myVertices[0], printVertex)\n \n//depth\n</code></pre>\n"},{"path":"/posts/构建堆和堆排序.html","title":"构建堆和堆排序","date":"2021-11-05","fontNum":2912,"description":"\r\njavascript\r\nclass MinHeap {\r\n    constructor() {\r\n        this.heap = []\r\n    }\r\n \r\n    //使用普通数组实现的二叉树节点\r\n \r\n    //1.左侧子节点的位置是2*index1\r\n    //右侧子节点是2*index2\r\n    //父节点的位置是(index - 1) / 2\r\n \r\n  ","tags":["堆"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">class MinHeap {\n    constructor() {\n        this.heap = []\n    }\n \n    //使用普通数组实现的二叉树节点\n \n    //1.左侧子节点的位置是2*index+1\n    //右侧子节点是2*index+2\n    //父节点的位置是(index - 1) / 2\n \n    //获取左侧子节点\n    getLeftIndex(index) {\n        return 2 * index + 1\n    }\n \n    //获取右侧子节点\n    getRightIndex(index) {\n        return 2 * index + 2\n    }\n \n    //获取父节点\n    getParentIndex(index) {\n        return index === 0 ? undefined : Math.floor((index - 1) / 2)\n    }\n    //上移操作\n    siftUp(index) {\n        let parent = this.getParentIndex(index)\n        while (index &gt; 0 &amp;&amp; this.heap[parent] &gt; this.heap[index]) {\n            [this.heap[parent], this.heap[index]] = [this.heap[index], this.heap[parent]]\n            index = parent\n            parent = this.getParentIndex(index)\n \n        }\n    }\n \n    siftDown(index) {\n        // 移除最小值（最小堆）或最大值（最大堆）\n        // 表示移除数组中的第一个元素（堆的根节点）。\n        // 在移除后，我们将堆的最后一个元素移动至根部并执行siftDown函数，\n        // 表示我们将交换元素直到堆的结构正常\n        //[0,1,2,3,4,5,6,7]\n        //[2,3,4,5,6,7,8,9]\n        let element = index\n        const left = this.getLeftIndex(index)\n        const right = this.getRightIndex(index)\n \n        const size = this.size()\n \n        if (left &lt; size &amp;&amp; this.heap[element] &gt; this.heap[left]) {\n            element = left\n        }\n \n        if (right &lt; size &amp;&amp; this.heap[element] &gt; this.heap[right]) {\n            element = right\n        }\n \n        if (index !== element) {\n            [this.heap[index], this.heap[element]] = [this.heap[element], this.heap[index]]\n            this.siftDown(element)\n \n        }\n \n \n    }\n    //向堆中插入新的值\n    insert(value) {\n        if (value !== null) {\n            this.heap.push(value)//将值插入到堆的底部叶节点\n            this.siftUp(this.heap.length - 1) //将这个值和他的父节点进行交换\n \n            return true\n        }\n        return false\n    }\n    //移除最小值或最大值并返回这个值\n    extract() {\n        if (this.isEmpty()) {\n            return undefined\n        }\n \n        if (this.size() === 1) {\n            return this.heap.shift()\n        }\n \n        const removedValue = this.heap[0]\n        console.log('removedValue', removedValue);\n        this.heap[0] = this.heap.pop()\n        this.siftDown(0)\n \n        return removedValue\n \n \n    }\n    // 返回最小值或最大值且不会移除\n    findMinimun() {\n        return this.isEmpty() ? undefined : this.heap[0]\n    }\n \n    size() {\n        return this.heap.length\n    }\n \n    isEmpty() {\n        return this.size() === 0\n    }\n}\n \nconst arr = [5, 23, 6, 0, 66, 77, 33, 46, 4, 3, 2, 1]\n \nfunction heapSort(arr) {\n    const heap = new MinHeap()\n    //构建最小堆\n    for (const e of arr) {\n        heap.insert(e)\n    }\n    const result = []\n    console.log('heap.length', heap.size());\n \n    while (heap.size() &gt; 0) {\n        result.push(heap.extract())\n    }\n \n    return result\n}\n \nconsole.log(heapSort(arr));\n</code></pre>\n"},{"path":"/posts/禁用右键F12和CTRLC.html","title":"禁用右键F12和CTRL+C","date":"2021-11-08","fontNum":1383,"description":"\r\nhtml\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n \r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n    <meta name=\"viewport\" content=\"width=device-width, i","tags":["html"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n \n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n \n&lt;body&gt;\n    &lt;p&gt;dahfkjfhaflakdhfadhfaldfhlak&lt;/p&gt;\n \n    &lt;script&gt;\n        //或者这样写\n        document.oncontextmenu = function () {\n            alert('菜单栏已经禁用');\n            return false;\n        }\n \n        // //0是点击了鼠标左键，1中间滚轮键，2右键\n        // document.onmousedown = function (event) {\n        //     if (event.button == 1 || event.button == 2) {\n        //         document.oncontextmenu = function () {\n        //             alert('菜单栏已经禁用');\n        //             return false;\n        //         }\n        //     }\n        // };\n        // document.onselectstart = function (event) {\n        //     event.returnValue = false\n        // }\n \n        document.onkeydown = document.onkeyup = document.onkeypress = function () {\n            if (window.event.keyCode == 67 &amp; 0x1f) {\n                alert(&quot;ctrl+c已禁用&quot;);\n                window.event.returnValue = false; //消发生事件源元素的默认动作\n            }\n \n            if (window.event.keyCode == 123) {\n                alert(&quot;F12已禁用&quot;);\n                window.event.returnValue = false;\n            }\n        }\n    &lt;/script&gt;\n&lt;/body&gt;\n \n&lt;/html&gt;\n</code></pre>\n"},{"path":"/posts/DFS和BFS实现.html","title":"DFS和BFS实现","date":"2021-11-09","fontNum":3633,"description":"\r\njavascript\r\nclass Graph {\r\n    constructor(isDirected) {\r\n        this.vertices = []\r\n        this.adjList = {}\r\n        this.isDirected = isDirected\r\n    }\r\n \r\n    addVertex(vertex) {\r\n        i","tags":["BFS"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">class Graph {\n    constructor(isDirected) {\n        this.vertices = []\n        this.adjList = {}\n        this.isDirected = isDirected\n    }\n \n    addVertex(vertex) {\n        if (!this.vertices.includes(vertex)) {\n            this.vertices.push(vertex)\n            this.adjList[vertex] = []\n        }\n    }\n \n    addEdge(v, w) {\n        !this.adjList[v] ? this.addVertex(v) : null\n        !this.adjList[w] ? this.addVertex(w) : null\n \n        this.adjList[v].push(w)\n        !this.isDirected ? this.adjList[w].push(v) : null\n    }\n \n    getVertices() {\n        return this.vertices\n    }\n    getAdjList() {\n        return this.adjList\n    }\n}\n \nlet graph = new Graph()\n \nlet myVertices = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I']\n \nfor (const e of myVertices) {\n    graph.addVertex(e)\n}\n \ngraph.addEdge('A', 'B')\ngraph.addEdge('A', 'C')\ngraph.addEdge('A', 'D')\ngraph.addEdge('C', 'D')\ngraph.addEdge('C', 'G')\ngraph.addEdge('D', 'G')\ngraph.addEdge('D', 'H')\ngraph.addEdge('B', 'E')\ngraph.addEdge('B', 'F')\ngraph.addEdge('E', 'I')\n \nconst Colors = {\n    WHITE: 0,\n    GREY: 1,\n    BLACK: 2\n}\n \nfunction initColor(vertices) {\n    const color = {}\n \n    for (const vertex of vertices) {\n        color[vertex] = Colors.WHITE\n    }\n \n    return color\n}\n \nlet statrtVertex = myVertices[0]\n \nfunction BFS(graph, statrtVertex) {\n    const vertices = graph.getVertices()\n    const adjList = graph.getAdjList()\n    const color = initColor(vertices)\n    const queue = []\n    const distances = {}\n    const preValue = {}\n \n    queue.push(statrtVertex)\n \n    for (const vertex of vertices) {\n        distances[vertex] = 0\n        preValue[vertex] = null\n    }\n \n    while (queue.length &gt; 0) {\n        const currentVertex = queue.shift()\n        color[currentVertex] = Colors.GREY\n        const neighbours = adjList[currentVertex]\n \n        for (const neighbour of neighbours) {\n            if (color[neighbour] === Colors.WHITE) {\n                color[neighbour] = Colors.GREY\n                distances[neighbour] = distances[currentVertex] + 1\n                preValue[neighbour] = currentVertex\n                queue.push(neighbour)\n            }\n        }\n \n        color[currentVertex] = Colors.BLACK\n    }\n \n    return {\n        preValue,\n        distances\n    }\n}\n \nconsole.log(BFS(graph, statrtVertex));\n \n \nfunction DFS(graph) {\n    const vertices = graph.getVertices()\n    const adjList = graph.getAdjList()\n    const color = initColor(vertices)\n \n    const discovery = {}\n    const finished = {}\n    const preValue = {}\n    const time = { count: 0 }\n \n    for (const vertex of vertices) {\n        discovery[vertex] = 0\n        finished[vertex] = 0\n        preValue[vertex] = null\n \n    }\n \n    for (const vertex of vertices) {\n        color[vertex] === Colors.WHITE ? DFSVisit(vertex, color, discovery, finished, preValue, time, adjList) : null\n    }\n \n    return {\n        discovery,\n        preValue,\n        finished\n    }\n}\n \n \nfunction DFSVisit(vertex, color, discovery, finished, preValue, time, adjList) {\n    color[vertex] = Colors.GREY\n    discovery[vertex] = ++time.count\n \n    const neighbours = adjList[vertex]\n    for (const neighbour of neighbours) {\n        if (color[neighbour] === Colors.WHITE) {\n            preValue[neighbour] = vertex\n            DFSVisit(neighbour, color, discovery, finished, preValue, time, adjList)\n        }\n \n    }\n \n    color[vertex] = Colors.BLACK\n    finished[vertex] = ++time.count\n}\n \nconsole.log(DFS(graph));\n</code></pre>\n"},{"path":"/posts/Dijkstra算法.html","title":"Dijkstra算法是一种计算从单个源到所有其他源的最短路径的贪心算法","date":"2021-11-09","fontNum":1362,"description":"\r\njavascript\r\nconst graph = [\r\n    //A,B, C, D, E, F\r\n    [0, 2, 4, 0, 0, 0],//A\r\n    [0, 0, 2, 4, 2, 0],//B\r\n    [0, 0, 0, 0, 3, 0],//C\r\n    [0, 0, 0, 0, 0, 2],//D\r\n    [0, 0, 0, 3, 0, 2],//E\r\n   ","tags":["数据结构与算法"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">const graph = [\n    //A,B, C, D, E, F\n    [0, 2, 4, 0, 0, 0],//A\n    [0, 0, 2, 4, 2, 0],//B\n    [0, 0, 0, 0, 3, 0],//C\n    [0, 0, 0, 0, 0, 2],//D\n    [0, 0, 0, 3, 0, 2],//E\n    [0, 0, 0, 0, 0, 0]//F\n]\nconst INF = Number.MAX_SAFE_INTEGER\nfunction dijkstra(graph, src) {\n    const dist = []\n    const visited = []\n    const { length } = graph\n \n    for (let i = 0; i &lt; length; i++) {\n        dist[i] = INF\n        visited[i] = false\n    }\n    dist[src] = 0\n    for (let i = 0; i &lt; length - 1; i++) {\n \n        const u = minDistance(dist, visited)\n        visited[u] = true\n \n        for (let v = 0; v &lt; length; v++) {\n            if (!visited[v] &amp;&amp; graph[u][v] !== 0 &amp;&amp; dist[u] !== INF &amp;&amp; dist[u] + graph[u][v] &lt; dist[v]) {\n                dist[v] = dist[u] + graph[u][v]\n            }\n        }\n    }\n \n    return dist\n}\nfunction minDistance(dist, visited) {\n    let min = INF\n    let minIndex = -1\n    const len = dist.length\n    for (let i = 0; i &lt; len; i++) {\n        if (!visited[i] &amp;&amp; dist[i] &lt;= min) {\n            min = dist[i]\n            minIndex = i\n        }\n    }\n \n    return minIndex\n}\n \nconsole.log(dijkstra(graph, 0));\n \n// a,b,c,d,e,f \n// 0,2,4,x,x,x visit a\n// 0,2,4,6,4,x visit a,b\n// 0,2,4,6,4,6 visit a,b,e\n// 0,2,4,6,4,6 visit a,b,e,c\n// 0,2,4,6,4,6 visit a,b,e,c,f\n</code></pre>\n"},{"path":"/posts/禁用页面部分复制功能.html","title":"禁用页面部分复制功能","date":"2021-11-10","fontNum":5834,"description":"\r\nhtml\r\n<template>\r\n  <div id=\"app\" @contextmenu=\"showMenu\">\r\n    <!-- <div id=\"app\"> -->\r\n    <vue-context-menu\r\n      :contextMenuData=\"contextMenuData\"\r\n      @copyxx=\"copyxx\"\r\n    ></vue-contex","tags":["html"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-html\">&lt;template&gt;\n  &lt;div id=&quot;app&quot; @contextmenu=&quot;showMenu&quot;&gt;\n    &lt;!-- &lt;div id=&quot;app&quot;&gt; --&gt;\n    &lt;vue-context-menu\n      :contextMenuData=&quot;contextMenuData&quot;\n      @copyxx=&quot;copyxx&quot;\n    &gt;&lt;/vue-context-menu&gt;\n    &lt;router-view /&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n \n&lt;script&gt;\nexport default {\n  mounted() {\n    const that = this;\n    document.onmousedown = function (event) {\n      if (event.button === 2) {\n        that.xxxflag = window\n          .getSelection()\n          .focusNode.parentElement.parentElement.className.includes(&quot;noCopy&quot;);\n        if (\n          window.getSelection().focusNode.nodeValue ===\n          window.getSelection().baseNode.data\n        ) {\n          that.xxxValue = window.getSelection().focusNode.data;\n        }\n      }\n    };\n  },\n  name: &quot;App&quot;,\n  data() {\n    return {\n      xxxflag: true,\n      xxxValue: &quot;&quot;,\n      // 菜单数据\n      contextMenuData: {\n        menuName: &quot;demo&quot;,\n        //菜单显示的位置\n        axis: { x: null, y: null },\n        //菜单选项\n        menulists: [\n          {\n            fnHandler: &quot;copyxx&quot;, //绑定事件\n            // icoName: &quot;&quot;, //icon图标\n            btnName: &quot;复制&quot;, //菜单名称\n          },\n          {\n            fnHandler: &quot;pastexx&quot;,\n            // icoName: &quot;&quot;,\n            btnName: &quot;粘贴&quot;,\n          },\n        ],\n      },\n    };\n  },\n  methods: {\n    showMenu() {\n      window.event.preventDefault();\n      var x = window.event.clientX;\n      var y = window.event.clientY;\n      // Get the current location\n      this.contextMenuData.axis = { x, y };\n    },\n    copyxx() {\n      if (!this.xxxflag) {\n        console.log(&quot;yes&quot;, this.xxxValue);\n        this.$copyText(this.xxxValue).then(\n          () =&gt; {\n            // alert(&quot;复制成功！&quot;);\n          },\n          () =&gt; {\n            // alert(&quot;复制失败！&quot;);\n          }\n        );\n      }\n    },\n  },\n};\n&lt;/script&gt;\n \n&lt;style&gt;\n#app {\n  font-family: &quot;Avenir&quot;, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n}\n \nbody {\n  background-color: rgb(180, 183, 187);\n  padding: 0;\n  margin: 0;\n}\n.vue-contextmenu-listWrapper.vue-contextmenuName-demo {\n  padding: 0;\n  width: 300px;\n}\n.context-menu-list {\n  width: 100%;\n  text-align: left;\n}\n.nav-name-right {\n  padding-left: 30px;\n}\n&lt;/style&gt;\n</code></pre>\n<pre><code class=\"language-html\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;el-table\n      ref=&quot;table&quot;\n      :data=&quot;tableData&quot;\n      style=&quot;width: 1500px; height: 800px; overflow: auto&quot;\n      :cell-class-name=&quot;cellClassName&quot;\n    &gt;\n      &lt;el-table-column\n        v-for=&quot;item in columns&quot;\n        :prop=&quot;String(item)&quot;\n        :label=&quot;String(item)&quot;\n        :key=&quot;item&quot;\n      &gt;\n      &lt;/el-table-column&gt;\n    &lt;/el-table&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n \n  &lt;script&gt;\nexport default {\n  mounted() {\n    // window.addEventListener(&quot;copy&quot;, function (event) {\n    //   if (\n    //     window\n    //       .getSelection()\n    //       .focusNode.parentElement.parentElement.className.includes(&quot;noCopy&quot;)\n    //   ) {\n    //     alert(&quot;复制已禁用&quot;);\n    //     event.preventDefault();\n    //   }\n    // });\n \n    this.tableData = this.tableData1;\n \n    document.onkeydown = document.onkeyup = function (event) {\n      // console.log(\n      //   &quot;flag&quot;,\n      //   typeof window.getSelection().focusNode.nodeValue,\n      //   typeof window.getSelection().baseNode.data\n      // );\n      if (\n        window\n          .getSelection()\n          .focusNode.parentElement.parentElement.className.includes(&quot;noCopy&quot;) ||\n        window.getSelection().focusNode.nodeValue !==\n          window.getSelection().baseNode.data\n      ) {\n        if ((window.event.keyCode === 67) &amp; 0x1f) {\n          alert(&quot;ctrl+c已禁用&quot;);\n          event.preventDefault();\n        }\n      }\n \n      const keyCode = [80, 83, 85];\n      if (keyCode.includes(window.event.keyCode) &amp; 0x1f) {\n        alert(&quot;ctrl组合键已禁用&quot;);\n        event.preventDefault();\n      }\n \n      if (window.event.keyCode == 123) {\n        alert(&quot;F12已禁用&quot;);\n        event.preventDefault();\n      }\n    };\n  },\n  methods: {\n    cellClassName({ row, column, rowIndex, columnIndex }) {\n      const fbArr = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;]; //禁用列\n      if (fbArr.includes(column.label)) {\n        return &quot;noCopy&quot;;\n      }\n    },\n  },\n  data() {\n    return {\n      columns: [\n        &quot;a&quot;,\n        &quot;b&quot;,\n        &quot;c&quot;,\n        &quot;d&quot;,\n        &quot;e&quot;,\n        &quot;f&quot;,\n        &quot;g&quot;,\n        &quot;h&quot;,\n        &quot;i&quot;,\n        &quot;j&quot;,\n        &quot;k&quot;,\n        &quot;l&quot;,\n        // &quot;m&quot;,\n        // &quot;n&quot;,\n        // &quot;o&quot;,\n        // &quot;p&quot;,\n        // &quot;q&quot;,\n        // &quot;r&quot;,\n        // &quot;s&quot;,\n        // &quot;t&quot;,\n        // &quot;u&quot;,\n        // &quot;v&quot;,\n        // &quot;w&quot;,\n        // &quot;x&quot;,\n        // &quot;y&quot;,\n        // &quot;z&quot;,\n        // 0,\n        // 1,\n        // 2,\n        // 3,\n        // 4,\n        // 5,\n        // 6,\n        // 7,\n        // 8,\n        // 9,\n        // 10,\n        // 11,\n        // 12,\n        // 13,\n        // 14,\n        // 15,\n      ],\n      tableData: [],\n      tableData1: [\n        {\n          a: &quot;qqqqq不可复制&quot;,\n          b: &quot;wwwww不可复制&quot;,\n          c: &quot;eeeee不可复制&quot;,\n          d: &quot;rrrrr不可复制&quot;,\n          e: &quot;ttttt不可复制&quot;,\n          f: &quot;uuuuu不可复制&quot;,\n          g: &quot;iiiii&quot;,\n          h: &quot;ooooo&quot;,\n          i: &quot;ppppp&quot;,\n          j: &quot;aaaaa&quot;,\n          k: &quot;sssss&quot;,\n          l: &quot;ddddd&quot;,\n        },\n        {\n          a: &quot;11111不可复制&quot;,\n          b: &quot;22222不可复制&quot;,\n          c: &quot;33333不可复制&quot;,\n          d: &quot;44444不可复制&quot;,\n          e: &quot;55555不可复制&quot;,\n          f: &quot;66666不可复制&quot;,\n          g: &quot;77777&quot;,\n          h: &quot;88888&quot;,\n          i: &quot;99999&quot;,\n          j: &quot;00000&quot;,\n          k: &quot;vvvvv&quot;,\n          l: &quot;nnnnn&quot;,\n        },\n      ],\n    };\n  },\n};\n&lt;/script&gt;\n \n&lt;style scoped&gt;\n/* /deep/ .noCopy {\n  user-select: none;\n} */\n&lt;/style&gt;\n</code></pre>\n"},{"path":"/posts/prim算法.html","title":"prim算法","date":"2021-11-11","fontNum":2294,"description":"\r\njavascript\r\nconst graph = [\r\n    /**\r\n*   A, B, C, D, E, F\r\n*   0, 1, 2, 3, 4 ,5\r\n    **/\r\n    [0, 2, 4, 0, 0, 0],//0 A     \r\n    [2, 0, 2, 4, 2, 0],//1 B\r\n    [4, 2, 0, 0, 3, 0],//2 C\r\n    [0, 4","tags":["数据结构与算法"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">const graph = [\n    /**\n*   A, B, C, D, E, F\n*   0, 1, 2, 3, 4 ,5\n    **/\n    [0, 2, 4, 0, 0, 0],//0 A     \n    [2, 0, 2, 4, 2, 0],//1 B\n    [4, 2, 0, 0, 3, 0],//2 C\n    [0, 4, 0, 0, 3, 2],//3 D\n    [0, 2, 3, 3, 0, 2],//4 E\n    [0, 0, 0, 2, 2, 0] //5 F\n]\n \n// const graph = [\n//     /**\n// *   A, B, C, D, E\n// *   0, 1, 2, 3, 4\n//     **/\n//     [0, 3, 1, 0, 0],//0 A     \n//     [3, 0, 0, 4, 6],//1 B\n//     [1, 0, 0, 2, 7],//2 C\n//     [0, 4, 2, 0, 5],//3 D\n//     [0, 6, 7, 5, 0],//4 E\n// ]\n \nconst INF = Number.MAX_SAFE_INTEGER\nfunction prim(graph) {\n    const parent = []\n    const key = []//key数组保存权值最小的边 与迪杰斯特拉不同的是这里保存的是权值最小的边 而迪杰斯特拉保存的是距离\n    const visited = []\n    const { length } = graph\n \n    for (let i = 0; i &lt; length; i++) {\n        key[i] = INF\n        visited[i] = false\n    }\n \n    key[0] = 0//起始点到自己的距离为0\n    parent[0] = -1\n \n    for (let i = 0; i &lt; length - 1; i++) {\n \n \n        const u = minKey(key, visited)\n        // console.log('u', u); // 0 1 4 5 3\n        visited[u] = true\n        for (let v = 0; v &lt; length; v++) {\n            // console.log('graph[u][v]', graph[u][v]);\n            if (graph[u][v] &amp;&amp; !visited[v] &amp;&amp; graph[u][v] &lt; key[v]) {\n                parent[v] = u\n                key[v] = graph[u][v]\n            }\n        }\n    }\n \n    return {\n        key,\n        parent\n    }\n}\n \nfunction minKey(key, visited) {\n    let min = INF\n    let minIndex = -1\n    console.log('key', key);\n    for (let vertex = 0; vertex &lt; key.length; vertex++) {\n        if (visited[vertex] === false &amp;&amp; key[vertex] &lt;= min) {\n            min = key[vertex]\n            minIndex = vertex\n        }\n    }\n    // console.log('minIndex', minIndex);\n    return minIndex\n}\n \nconsole.log(prim(graph));\n \n \n \n \n//key\n// 0 x x x x x\n// 0 2 4 x x x\n// 0 2 2 4 2 x\n// 0 2 2 3 2 2\n// 0 2 2 2 2 2\n \n \n \n// const graph = [\n//     /**\n// *   A, B, C, D, E\n// *   0, 1, 2, 3, 4\n//     **/\n//     [0, 3, 1, 0, 0],//0 A     \n//     [3, 0, 0, 4, 6],//1 B\n//     [1, 0, 0, 2, 7],//2 C\n//     [0, 4, 2, 0, 5],//3 D\n//     [0, 6, 7, 5, 0],//4 E\n// ]\n \n \n// 1 2 3 4 5\n// 0 x x x x \n// 0f 3 1 x x\n \n// 0f 3 1f 2 7\n// 0f 3 1f 2f 5\n// 0f 3f 1f 2f 5\n \n//1-&gt;2\n//1-&gt;3-&gt;4-&gt;5\n</code></pre>\n"},{"path":"/posts/弗洛伊德算法.html","title":"弗洛伊德算法","date":"2021-11-11","fontNum":970,"description":"\r\njavascript\r\n//Floyd-Warshall算法是一种计算图中所有最短路径的动态规划算法\r\nconst graph = [\r\n    //A,B, C, D, E, F\r\n    [0, 2, 4, 0, 0, 0],//A\r\n    [0, 0, 2, 4, 2, 0],//B\r\n    [0, 0, 0, 0, 3, 0],//C\r\n    [0, 0, 0, 0, 0,","tags":["数据结构与算法"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">//Floyd-Warshall算法是一种计算图中所有最短路径的动态规划算法\nconst graph = [\n    //A,B, C, D, E, F\n    [0, 2, 4, 0, 0, 0],//A\n    [0, 0, 2, 4, 2, 0],//B\n    [0, 0, 0, 0, 3, 0],//C\n    [0, 0, 0, 0, 0, 2],//D\n    [0, 0, 0, 3, 0, 2],//E\n    [0, 0, 0, 0, 0, 0]//F\n]\nfunction floydWarshall(graph) {\n    const dist = []\n    const { length } = graph\n \n    for (let i = 0; i &lt; length; i++) {\n        dist[i] = []\n \n        for (let j = 0; j &lt; length; j++) {\n            i === j ? dist[i][j] = 0 : graph[i][j] === 0 ?\n                dist[i][j] = Infinity : dist[i][j] = graph[i][j]\n        }\n    }\n \n    for (let k = 0; k &lt; length; k++) {//k表示中间\n        for (let i = 0; i &lt; length; i++) {\n            for (let j = 0; j &lt; length; j++) {\n                (dist[i][k] + dist[k][j] &lt; dist[i][j]) ? (dist[i][j] = dist[i][k] + dist[k][j]) : null //i-&gt;j === i-&gt;k-&gt;j\n            }\n        }\n    }\n \n    return dist\n}\n \nconsole.log(floydWarshall(graph));\n</code></pre>\n"},{"path":"/posts/BST二叉搜索树.html","title":"BST二叉搜索树","date":"2021-11-16","fontNum":3777,"description":"\r\njavascript\r\nclass Node {\r\n    constructor(value) {\r\n        this.value = value\r\n        this.left = null\r\n        this.right = null\r\n    }\r\n}\r\n \r\nclass BT {\r\n    constructor() {\r\n        this.roo","tags":["BFS"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">class Node {\n    constructor(value) {\n        this.value = value\n        this.left = null\n        this.right = null\n    }\n}\n \nclass BT {\n    constructor() {\n        this.root = null\n    }\n \n    insert(key) {\n        this.root === null ? this.root = new Node(key) : this.insertNode(this.root, key)\n    }\n \n    insertNode(node, key) {\n        if (key &lt; node.value) {\n            node.left === null ? node.left = new Node(key) : this.insertNode(node.left, key)\n        } else {\n            node.right === null ? node.right = new Node(key) : this.insertNode(node.right, key)\n        }\n    }\n \n    front() {\n        this.handleFront(this.root, (val) =&gt; { console.log(val) })\n \n    }\n    handleFront(node, callBack) {\n        if (node !== null) {\n            callBack(node.value)\n            this.handleFront(node.left, callBack)\n            this.handleFront(node.right, callBack)\n        }\n    }\n    mid() {\n        this.handleMid(this.root, (val) =&gt; { console.log(val) })\n    }\n    handleMid(node, callBack) {\n        if (node !== null) {\n            this.handleMid(node.left, callBack)\n            callBack(node.value)\n            this.handleMid(node.right, callBack)\n        }\n    }\n    after() {\n        this.handleAfter(this.root, (val) =&gt; { console.log(val) })\n    }\n    handleAfter(node, callBack) {\n        if (node !== null) {\n            this.handleAfter(node.left, callBack)\n            this.handleAfter(node.right, callBack)\n            callBack(node.value)\n        }\n    }\n \n    min(node) {\n        let current = node || this.root\n        while (current !== null &amp;&amp; current.left !== null) {\n            current = current.left\n \n        }\n        return current\n    }\n    max(node) {\n        let current = node || this.root\n        while (current !== null &amp;&amp; current.right !== null) {\n            current = current.right\n        }\n \n        return current\n    }\n    search(val) {\n        return this.handleSearch(this.root, val)\n    }\n    handleSearch(node, val) {\n        if (node === null) {\n            return false\n        }\n \n        if (val &lt; node.value) {\n            return this.handleSearch(node.left, val)\n        } else if (val &gt; node.value) {\n            return this.handleSearch(node.right, val)\n        } else {\n \n            return true\n        }\n    }\n    remove(key) {\n        return this.root = this.handleRemove(this.root, key)\n    }\n    handleRemove(node, key) {\n        if (node === null) return null\n \n        if (key &lt; node.value) {\n            node.left = this.handleRemove(node.left, key)\n            return node\n        } else if (key &gt; node.value) {\n            node.right = this.handleRemove(node.right, key)\n            return node\n        } else {\n            if (node.left === null &amp;&amp; node.right === null) {\n \n                return null\n            }\n \n            if (node.left === null) {\n                return node.right\n            } else if (node.right === null) {\n                return node.left\n            }\n            const minInNodeRight = this.min(node.right)\n \n            node.value = minInNodeRight.value\n            node.right = this.handleRemove(node.right, minInNodeRight.value)\n            return node\n        }\n    }\n}\n \nconst t1 = new BT()\n \nt1.insert(11)\nt1.insert(7)\nt1.insert(15)\nt1.insert(5)\nt1.insert(3)\nt1.insert(9)\nt1.insert(8)\nt1.insert(10)\nt1.insert(13)\nt1.insert(12)\nt1.insert(14)\nt1.insert(20)\nt1.insert(18)\nt1.insert(25)\nt1.insert(6)\n \n// t1.mid()\n// t1.front()\n// t1.after()\n \n// console.log(t1.min());\n// console.log(t1.max());\n \nconsole.log(t1.remove(11));\n \n// console.log(t1.search(1));\n// console.log(t1.search(8));\n</code></pre>\n"},{"path":"/posts/vscode配置.html","title":"vscode配置","date":"2021-11-17","fontNum":3064,"description":"\r\n\r\n 主题插件 \r\n\r\n在拓展搜索Cyberpunk\r\n\r\n setting.json\r\n\r\n{\r\n  // vscode默认启用了根据文件类型自动设置tabsize的选项\r\n  \"editor.detectIndentation\": false,\r\n  // 重新设定tabsize\r\n  \"editor.tabSize\": 2,\r\n  // 每次保存的时候自动格式化\r\n ","tags":["vscode"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<h3>主题插件</h3>\n<p>在拓展搜索Cyberpunk</p>\n<h3>setting.json</h3>\n<pre><code>{\n  // vscode默认启用了根据文件类型自动设置tabsize的选项\n  &quot;editor.detectIndentation&quot;: false,\n  // 重新设定tabsize\n  &quot;editor.tabSize&quot;: 2,\n  // #每次保存的时候自动格式化\n  &quot;editor.formatOnSave&quot;: true,\n  // #每次保存的时候将代码按eslint格式进行修复\n  // &quot;eslint.autoFixOnSave&quot;: true,\n  // 添加 vue 支持\n  &quot;eslint.validate&quot;: [\n    &quot;javascript&quot;,\n    &quot;javascriptreact&quot;,\n    &quot;vue&quot;,\n  ],\n  //  #让prettier使用eslint的代码格式进行校验\n  &quot;prettier.eslintIntegration&quot;: true,\n  //  #代码结尾的分号\n  &quot;prettier.semi&quot;: true,\n  //  #使用带引号替代双引号\n  &quot;prettier.singleQuote&quot;: false,\n  //  #让函数(名)和后面的括号之间加个空格\n  &quot;javascript.format.insertSpaceBeforeFunctionParenthesis&quot;: true,\n  // #让vue中的js按编辑器自带的ts格式进行格式化\n  &quot;vetur.format.defaultFormatter.js&quot;: &quot;vscode-typescript&quot;,\n  &quot;vetur.format.defaultFormatterOptions&quot;: {\n    &quot;js-beautify-html&quot;: {\n      &quot;wrap_attributes&quot;: &quot;force-aligned&quot;\n      // #vue组件中html代码格式化样式\n    }\n  },\n  &quot;explorer.confirmDelete&quot;: false,\n  &quot;explorer.confirmDragAndDrop&quot;: false,\n  &quot;editor.renderControlCharacters&quot;: true,\n  &quot;editor.renderWhitespace&quot;: &quot;all&quot;,\n  &quot;editor.wordWrap&quot;: &quot;wordWrapColumn&quot;,\n  &quot;editor.maxTokenizationLineLength&quot;: 40000,\n\n  &quot;update.enableWindowsBackgroundUpdates&quot;: false,\n  &quot;update.showReleaseNotes&quot;: false,\n  &quot;editor.linkedEditing&quot;: true,\n\n  &quot;editor.wordWrapColumn&quot;: 120,\n  \n  &quot;html.format.indentHandlebars&quot;: true,\n  &quot;diffEditor.ignoreTrimWhitespace&quot;: true,\n  &quot;workbench.statusBar.visible&quot;: true,\n  // &quot;[markdown]&quot;: {\n  //   &quot;editor.defaultFormatter&quot;: &quot;esbenp.prettier-vscode&quot;\n  // },\n  // &quot;[html]&quot;: {\n  //   &quot;editor.defaultFormatter&quot;: &quot;vscode.html-language-features&quot;\n  // },\n  &quot;eslint.format.enable&quot;: true,\n  // &quot;[json]&quot;: {\n  //   &quot;editor.defaultFormatter&quot;: &quot;vscode.json-language-features&quot;\n  // },\n  &quot;editor.defaultFormatter&quot;: &quot;octref.vetur&quot;,\n  &quot;prettier.embeddedLanguageFormatting&quot;: &quot;off&quot;,\n\n  &quot;vetur.validation.template&quot;: false,\n  &quot;typescript.format.placeOpenBraceOnNewLineForControlBlocks&quot;: true,\n  &quot;typescript.format.placeOpenBraceOnNewLineForFunctions&quot;: true,\n  &quot;typescript.format.insertSpaceAfterTypeAssertion&quot;: true,\n  &quot;typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis&quot;: true,\n  &quot;typescript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces&quot;: true,\n  &quot;prettier.trailingComma&quot;: &quot;all&quot;,\n\n  &quot;terminal.integrated.env.linux&quot;: {\n    \n    },\n    &quot;workbench.startupEditor&quot;: &quot;newUntitledFile&quot;,\n    &quot;prettier.bracketSpacing&quot;: false,\n    &quot;prettier.requireConfig&quot;: true,\n    &quot;prettier.printWidth&quot;: 160,\n    &quot;update.mode&quot;: &quot;none&quot;,\n    &quot;eslint.alwaysShowStatus&quot;: true,\n    &quot;eslint.debug&quot;: true,\n\n    &quot;[vue]&quot;: {\n      &quot;editor.defaultFormatter&quot;: &quot;dbaeumer.vscode-eslint&quot;\n    },\n    &quot;files.autoSave&quot;: &quot;onWindowChange&quot;,\n    &quot;eslint.workingDirectories&quot;: [\n    \n    ],\n    &quot;[javascript]&quot;: {\n      &quot;editor.defaultFormatter&quot;: &quot;dbaeumer.vscode-eslint&quot;\n    },\n    &quot;[json]&quot;: {\n      &quot;editor.defaultFormatter&quot;: &quot;vscode.json-language-features&quot;\n    },\n    &quot;git.autoStash&quot;: true,\n    &quot;git.inputValidationLength&quot;: 108,\n    &quot;editor.fontSize&quot;: 20,\n}\n</code></pre>\n"},{"path":"/posts/vscode设置图片背景.html","title":"vscode设置图片背景","date":"2021-11-18","fontNum":262,"description":"\r\n 在拓展搜索background-cover 安装\r\n\r\n 安装完成后找到 文件->首选项->设置->扩展->background-cover\r\n\r\n(在Image Path Background image path / 背景图片路径) | 下方输入图片路径\r\n\r\n(Opacity Background opacity (0 - 1) / 背景透明度(0 - 1)) | 透明度设","tags":["vscode"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<h3>在拓展搜索background-cover 安装</h3>\n<h3>安装完成后找到 文件-&gt;首选项-&gt;设置-&gt;扩展-&gt;background-cover</h3>\n<p>(在Image Path Background image path / 背景图片路径) | 下方输入图片路径</p>\n<p>(Opacity Background opacity (0 - 1) / 背景透明度(0 - 1)) | 透明度设置为0.5 (根据喜好)</p>\n<p>ctr + shift + p 搜索background-cover-start 也可以操作</p>\n"},{"path":"/posts/日记.html","title":"开发日记","date":"2021-12-19","fontNum":212,"description":"\r\n 日记\r\n\r\n 2022.3.15\r\n> 添加文章总数\r\n\r\n> 给文章分类\r\n\r\n 2022.3.18\r\n> 更新文章\r\n\r\n> 添加基础的搜索功能 (后期会扩展 Algolia 和 Elastic Search)\r\n> \r\n 2022.3.20\r\n> 更新最早的文章 > 添加背景音乐\"井口裕香 - さらば29\"和歌词显示功能\r\n\r\n 2022.3.21\r\n> ","tags":["开发日记"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<h3>日记</h3>\n<h3>2022.3.15</h3>\n<blockquote>\n<p>添加文章总数</p>\n</blockquote>\n<blockquote>\n<p>给文章分类</p>\n</blockquote>\n<h3>2022.3.18</h3>\n<blockquote>\n<p>更新文章</p>\n</blockquote>\n<blockquote>\n<p>添加基础的搜索功能 (后期会扩展 Algolia 和 Elastic Search)</p>\n</blockquote>\n<h3>2022.3.20</h3>\n<blockquote>\n<p>更新最早的文章 &gt; 添加背景音乐&quot;井口裕香 - さらば29&quot;和歌词显示功能</p>\n</blockquote>\n<h3>2022.3.21</h3>\n<blockquote>\n<p>更新文章 &gt; 滚动条样式</p>\n</blockquote>\n"},{"path":"/posts/es新特性记录.html","title":"es新特性记录","date":"2021-12-20","fontNum":1888,"description":"\r\njavascript\r\nconst arr = [1, 2, 3, [4, 5], [6, [7, [8]]]]\r\n//falt(n) n为数组拍平的层数\r\nconsole.log(arr.flat(1));\r\n//[ 1, 2, 3, 4, 5, 6, [ 7, [ 8 ] ] ]\r\nconsole.log(arr.flat(Infinity));\r\n//[ 1, 2, 3, 4, 5","tags":["javascript"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">const arr = [1, 2, 3, [4, 5], [6, [7, [8]]]]\n//falt(n) n为数组拍平的层数\nconsole.log(arr.flat(1));\n//[ 1, 2, 3, 4, 5, 6, [ 7, [ 8 ] ] ]\nconsole.log(arr.flat(Infinity));\n//[ 1, 2, 3, 4, 5, 6, 7, 8 ]\nconst arr = ['1_2', '2_3', '3_4']\nconsole.log(arr.map(x =&gt; x.split('_')));\n// [ [ '1', '2' ], [ '2', '3' ], [ '3', '4' ] ]\nconsole.log(arr.flatMap(x =&gt; x.split('_')));\n// [ '1', '2', '2', '3', '3', '4' ]\nconst str = '  xxs   '\nconsole.log(str.trimStart);\nconsole.log(str.trimEnd);\nconsole.log(str.trim);\nconsole.log(str.trimLeft);\nconsole.log(str.trimRight);\n// [Function: trimStart]\n// [Function: trimEnd]\n// [Function: trim]\n// [Function: trimStart]\n// [Function: trimEnd]\nconsole.log(str.trimStart().length);\nconsole.log(str.trimEnd().length);\nconsole.log(str.trim().length);\nconsole.log(str.trimLeft().length);\nconsole.log(str.trimRight().length);\n// 6\n// 5\n// 3\n// 6\n// 5\nconsole.log(0 ?? '1');\nconsole.log('' ?? '2');\nconsole.log(false ?? '3');\nconsole.log(null ?? '4');\nconsole.log(undefined ?? '5');\n// 0\n//\n// false\n// 4    \n// 5  \nconst demo = {}\n// console.log(demo.foo.bar); //TypeError: Cannot read properties of undefined (reading 'bar')\nconsole.log(demo.foo?.bar); //undefined\n// BIGINT\nconsole.log(typeof 1n);\nconst obj = { bar: 'foo', baz: 'bas' }\nconsole.log(Object.getOwnPropertyDescriptors(obj));\n// {\n//     bar: {\n//       value: 'foo',     \n//       writable: true,   \n//       enumerable: true, \n//       configurable: true\n//     },\n//     baz: {\n//       value: 'bas',     \n//       writable: true,   \n//       enumerable: true, \n//       configurable: true\n//     }\n//   }\nconst foo = new SharedArrayBuffer(10)\nconsole.log(foo.byteLength);//10\nconsole.log(foo);\n// SharedArrayBuffer {\n//     [Uint8Contents]: &lt;00 00 00 00 00 00 00 00 00 00&gt;,\n//     byteLength: 10\n//   }\n</code></pre>\n"},{"path":"/posts/windows命令合集.html","title":"博客搭建笔记","date":"2022-01-15","fontNum":35,"description":"\r\n\r\nmkdir-创建文件夹\r\ntouch-创建文件\r\n","tags":["windows"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code>mkdir-创建文件夹\ntouch-创建文件\n</code></pre>\n"},{"path":"/posts/node解析pdf.html","title":"node 解析pdf","date":"2022-01-19","fontNum":463,"description":"\r\njavascript\r\nconst PDFParser = require(\"pdf2json\");\r\n \r\nconst pdfParser = new PDFParser(this, 1);\r\n \r\nfunction readPDF(fileName) {\r\n    pdfParser.loadPDF(fileName);\r\n    pdfParser.on(\"pdfParser_da","tags":["node"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">const PDFParser = require(&quot;pdf2json&quot;);\n \nconst pdfParser = new PDFParser(this, 1);\n \nfunction readPDF(fileName) {\n    pdfParser.loadPDF(fileName);\n    pdfParser.on(&quot;pdfParser_dataError&quot;, errData =&gt; console.error(errData.parserError));\n \n    pdfParser.on(&quot;pdfParser_dataReady&quot;, pdfData =&gt; {\n        const data = pdfParser.getRawTextContent()\n        console.log('文本信息:', data)\n    });\n}\nmodule.exports = {\n    readPDF\n}```\n\n\n\n\n</code></pre>\n"},{"path":"/posts/状态模式实例.html","title":"状态模式实例","date":"2022-01-25","fontNum":2020,"description":"javascript\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n \r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n    <meta name=\"viewport\" content=\"width=device-widt","tags":["设计模式"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n \n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n \n&lt;body&gt;\n \n    &lt;script&gt;\n        const OffLightState = function (light) {\n            this.light = light\n        }\n        OffLightState.prototype.buttonWasPressed = function () {\n            console.log('OffLightState');\n            this.light.setState(this.light.weakLightState)\n        }\n \n        const WeakLightState = function (light) {\n            this.light = light\n        }\n        WeakLightState.prototype.buttonWasPressed = function () {\n            console.log('WeakLightState');\n            this.light.setState(this.light.strongLightState)\n        }\n \n        const StrongLightState = function (light) {\n            this.light = light\n        }\n        StrongLightState.prototype.buttonWasPressed = function () {\n            console.log('strongLightState');\n            this.light.setState(this.light.offLightState)\n        }\n \n        const Light = function () {\n            this.offLightState = new OffLightState(this)\n            this.weakLightState = new WeakLightState(this)\n            this.strongLightState = new StrongLightState(this)\n            this.button = null\n        }\n \n        Light.prototype.init = function () {\n            const button = document.createElement('button')\n            self = this\n            this.button = document.body.appendChild(button)\n            this.button.innerHTML = 'switch'\n            this.currState = this.offLightState\n            this.button.onclick = function () {\n                self.currState.buttonWasPressed()\n            }\n        }\n \n        Light.prototype.setState = function (newState) {\n            this.currState = newState\n        }\n \n        const light = new Light()\n        light.init()\n    &lt;/script&gt;\n&lt;/body&gt;\n \n&lt;/html&gt;\n</code></pre>\n"},{"path":"/posts/网页快捷键禁用.html","title":"网页快捷键禁用","date":"2022-01-25","fontNum":1391,"description":"\r\nhtml\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n \r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n    <meta name=\"viewport\" content=\"width=device-width, i","tags":["html"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n \n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n \n&lt;body&gt;\n    &lt;p&gt;dahfkjfhaflakdhfadhfaldfhlak&lt;/p&gt;\n \n    &lt;script&gt;\n        //或者这样写\n        document.oncontextmenu = function () {\n            alert('菜单栏已经禁用');\n            return false;\n        }\n \n        // //0是点击了鼠标左键，1中间滚轮键，2右键\n        // document.onmousedown = function (event) {\n        //     if (event.button == 1 || event.button == 2) {\n        //         document.oncontextmenu = function () {\n        //             alert('菜单栏已经禁用');\n        //             return false;\n        //         }\n        //     }\n        // };\n        // document.onselectstart = function (event) {\n        //     event.returnValue = false\n        // }\n \n        document.onkeydown = document.onkeyup = document.onkeypress = function () {\n            if (window.event.keyCode == 67 &amp; 0x1f) {\n                alert(&quot;ctrl+c已禁用&quot;);\n                window.event.returnValue = false; //消发生事件源元素的默认动作\n            }\n \n            if (window.event.keyCode == 123) {\n                alert(&quot;F12已禁用&quot;);\n                window.event.returnValue = false;\n            }\n        }\n    &lt;/script&gt;\n&lt;/body&gt;\n \n&lt;/html&gt;\n</code></pre>\n"},{"path":"/posts/网页自定义菜单.html","title":"网页自定义菜单","date":"2022-01-25","fontNum":3300,"description":"\r\nhtml\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n \r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n    <meta name=\"viewport\" content=\"width=device-width, i","tags":["html"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n \n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n \n    &lt;style&gt;\n        * {\n            margin: 0;\n            padding: 0;\n        }\n \n        .menu {\n            background-color: rgb(255, 255, 255);\n            width: 300px;\n            border: 1px solid #ccc;\n            position: absolute;\n            box-shadow: 2px 2px 8px 1px rgba(0, 0, 0, .2);\n            display: none;\n        }\n \n        .menu li {\n            list-style: none;\n            width: 100%;\n        }\n \n        .menu li a {\n            display: inline-block;\n            text-decoration: none;\n            color: #555;\n            /* width: calc(100% - 60px); */\n            width: 100%;\n            padding: 10px 0;\n            cursor: pointer;\n            /* padding-left: 60px; */\n        }\n \n        .menu li a span {\n            padding-left: 60px;\n        }\n \n        /* .menu li:first-of-type {\n            border-radius: 5px 5px 0 0;\n        } */\n \n        .menu li a:hover {\n            background-color: rgb(232, 232, 233);\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n \n&lt;body&gt;\n    &lt;ul class=&quot;menu&quot; id=&quot;menu&quot;&gt;\n        &lt;li&gt;&lt;a&gt;&lt;span&gt;功能1&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;\n        &lt;li&gt;&lt;a&gt;&lt;span&gt;功能2&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;\n        &lt;li&gt;&lt;a&gt;&lt;span&gt;功能3&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;\n        &lt;li&gt;&lt;a&gt;&lt;span&gt;功能4&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;\n        &lt;li&gt;&lt;a&gt;&lt;span&gt;功能5&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;\n    &lt;/ul&gt;\n    &lt;script&gt;\n        window.onload = function () {\n            // 获取节点\n            const menu = document.getElementById('menu');\n \n            //获取可视区宽度,高度\n            const winWidth = document.documentElement.clientWidth || document.body.clientWidth;\n            const winHeight = document.documentElement.clientHeight || document.body.clientHeight;\n \n            // 点击空白区域 隐藏菜单\n            document.addEventListener('click', function () {\n                menu.style.display = 'none';\n                menu.style.left = 0 + 'px';\n                menu.style.top = 0 + 'px';\n            })\n \n            // 点击菜单\n            menu.addEventListener('click', function (event) {\n                const e = event || window.event;\n                console.log(e.target.innerText)\n            })\n \n            //右键菜单\n            document.oncontextmenu = function (event) {\n                const e = event || window.event;\n                menu.style.display = 'block';\n                // 获取鼠标坐标\n                let mouseX = e.clientX;\n                let mouseY = e.clientY;\n \n                // 判断边界值，防止菜单栏溢出可视窗口\n                if (mouseX &gt;= (winWidth - menu.offsetWidth)) {\n                    mouseX = winWidth - menu.offsetWidth;\n                } else {\n                    mouseX = mouseX\n                }\n                if (mouseY &gt; winHeight - menu.offsetHeight) {\n                    mouseY = winHeight - menu.offsetHeight;\n                } else {\n                    mouseY = mouseY;\n                }\n                menu.style.left = mouseX + 'px';\n                menu.style.top = mouseY + 'px';\n                return false;\n            }\n        }\n \n    &lt;/script&gt;\n&lt;/body&gt;\n \n&lt;/html&gt;\n</code></pre>\n"},{"path":"/posts/node执行外部脚本.html","title":"node执行外部脚本","date":"2022-01-26","fontNum":760,"description":"javascript\r\nfunction execCMD(cmd) {\r\n    const { spawn } = require('child_process');\r\n    const fs = require('fs')\r\n    const iconv = require('iconv-lite');\r\n    const config = {\r\n        encoding:","tags":["node"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">function execCMD(cmd) {\n    const { spawn } = require('child_process');\n    const fs = require('fs')\n    const iconv = require('iconv-lite');\n    const config = {\n        encoding: 'cp936',\n        binaryEncoding: 'binary'\n    }\n    const command = spawn(cmd);\n \n \n    command.stdout.on('data', (data) =&gt; {\n        fs.appendFileSync('out.txt', iconv.decode(Buffer.from(data, config.binaryEncoding), config.encoding), { encoding: 'utf8' })\n        console.log(`stdout: ${data}`);\n    });\n \n    command.stderr.on('data', (data) =&gt; {\n        console.error(`stderr: ${data}`);\n \n    });\n \n    command.on('close', (code) =&gt; {\n        console.log(`child process exited with code ${code}`);\n    });\n \n}\n \n \nexecCMD(cmd)\n</code></pre>\n"},{"path":"/posts/react中实现v-for.html","title":"react 中实现v-for","date":"2022-02-10","fontNum":638,"description":"javascript\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n \r\nclass List extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      citys: ['上海',","tags":["react"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">import React from 'react';\nimport ReactDOM from 'react-dom';\n \nclass List extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      citys: ['上海', '北京', '南京']\n    }\n  }\n \n  render() {\n \n    let citys = this.state.citys.map(city =&gt; {\n      return &lt;li key={city}&gt;{city}&lt;/li&gt;\n    })\n    return (&lt;div&gt;\n      &lt;ul&gt;\n        {citys}\n      &lt;/ul&gt;\n    &lt;/div&gt;)\n  }\n \n  changeValue(event) {\n    console.log('event', event);\n    this.setState({\n      inputValue: event.target.value\n    });\n  }\n}\n \n \nReactDOM.render(\n  &lt;List /&gt;,\n  document.getElementById('root')\n);\n</code></pre>\n"},{"path":"/posts/react输入框数据绑定.html","title":"react 输入框数据绑定","date":"2022-02-10","fontNum":585,"description":"javascript\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n \r\n \r\nclass NInput extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      inputVal","tags":["react"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">import React from 'react';\nimport ReactDOM from 'react-dom';\n \n \nclass NInput extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      inputValue: 33\n    }\n  }\n \n  render() {\n    return (&lt;div&gt;\n      &lt;input value={this.state.inputValue} onChange={(event) =&gt; this.changeValue(event)} /&gt;\n    &lt;/div&gt;)\n  }\n \n  changeValue(event) {\n    console.log('event', event);\n    this.setState({\n      inputValue: event.target.value\n    });\n  }\n}\n \n \nReactDOM.render(\n  &lt;NInput /&gt;,\n  document.getElementById('root')\n);\n</code></pre>\n"},{"path":"/posts/旋转矩阵.html","title":"旋转矩阵","date":"2022-02-21","fontNum":620,"description":"javascript\r\nconst arr = [\r\n    [1, 2, 3],   //[7,4,1]\r\n    [4, 5, 6],   //[8,5,2]\r\n    [7, 8, 9]]   //[9,6,3]\r\n \r\nfunction demo(arr) {\r\n    const n = arr.length\r\n    for (let i = 0; i < n; i) {\r\n","tags":["数据结构与算法"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">const arr = [\n    [1, 2, 3],   //[7,4,1]\n    [4, 5, 6],   //[8,5,2]\n    [7, 8, 9]]   //[9,6,3]\n \nfunction demo(arr) {\n    const n = arr.length\n    for (let i = 0; i &lt; n; i++) {\n        for (let j = i; j &lt; n; j++) {\n            [arr[i][j], arr[j][i]] = [arr[j][i], arr[i][j]]\n        }\n    }\n    console.log(arr);\n \n    for (let i = 0; i &lt; n; i++) {\n        for (let j = 0; j &lt; Math.floor(n / 2); j++) {\n            [arr[i][j], arr[i][n - j - 1]] = [arr[i][n - j - 1], arr[i][j]]\n        }\n    }\n    console.log(arr);\n}\n \ndemo(arr)\n//先交换对角线\n//左旋交换行 i行和n-i-1行\n//优选交换列 j列和n-j-1行\n</code></pre>\n"},{"path":"/posts/硬币问题.html","title":"解硬币问题","date":"2022-02-22","fontNum":523,"description":"javascript\r\nconst cs = [1, 2, 5]\r\nconst ac = 10\r\n \r\nfunction h(n) {\r\n    const c = [0]\r\n    if (n === 0) {\r\n        return 0\r\n    }\r\n \r\n    for (let i = 1; i <= n; i) {\r\n        let co = Infinity","tags":["动态规划"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">const cs = [1, 2, 5]\nconst ac = 10\n \nfunction h(n) {\n    const c = [0]\n    if (n === 0) {\n        return 0\n    }\n \n    for (let i = 1; i &lt;= n; i++) {\n        let co = Infinity\n        console.log(co, c[i - 1] + 1);\n        if (i - 1 &gt;= 0) co = Math.min(co, c[i - 1] + 1)\n        if (i - 2 &gt;= 0) co = Math.min(co, c[i - 2] + 1)\n        if (i - 5 &gt;= 0) co = Math.min(co, c[i - 5] + 1)\n \n        c[i] = co\n    }\n    console.log(c);\n    console.log(c[n]);\n    return c[n]\n \n}\n \nh(10)\n</code></pre>\n"},{"path":"/posts/搭建博客中问题记录.html","title":"博客搭建中遇到的问题记录","date":"2022-03-01","fontNum":366,"description":" 网站的meta标签有property=\"og:title\"这个属性\r\nog是一种新的HTTP头部标记，即Open Graph Protocol，这种协议可以让网页成为一个“富媒体对象”。\r\n使用Meta Property=og标签，就代表同意了网页内容可以被其他社会化网站引用。使用它的好处：\r\n1、能够正确被蜘蛛抓取内容到百度网页搜索；2、使内容更有效的在百度结构化展现；3、能正确的分享内容","tags":["建站"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<h2>网站的meta标签有property=&quot;og:title&quot;这个属性</h2>\n<p>og是一种新的HTTP头部标记，即Open Graph Protocol，这种协议可以让网页成为一个“富媒体对象”。\n使用Meta Property=og标签，就代表同意了网页内容可以被其他社会化网站引用。使用它的好处：\n1、能够正确被蜘蛛抓取内容到百度网页搜索；2、使内容更有效的在百度结构化展现；3、能正确的分享内容到SNS网站；4、能让内容更有效的在SNS网络中传播；\n简而言之，使用og:可以让你的内容在被分享时正确展现，并且有利于在搜索结果中展现。使用og标签对于谷歌seo有一定的帮助，对于百度来说效果未知。</p>\n<h2>yarn build</h2>\n<p>build的时候md文件带'，'特殊符号可能会引起build失败\n图片带中文名也会报错</p>\n"},{"path":"/posts/Kruskal算法.html","title":"Kruskal算法","date":"2022-03-12","fontNum":1300,"description":"\r\njavascript\r\nconst graph = [\r\n    /**\r\n*   A, B, C, D, E, F\r\n*   0, 1, 2, 3, 4 ,5\r\n    **/\r\n    [0, 2, 4, 0, 0, 0],//0 A     \r\n    [2, 0, 2, 4, 2, 0],//1 B\r\n    [4, 2, 0, 0, 3, 0],//2 C\r\n    [0, 4","tags":["数据结构与算法"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">const graph = [\n    /**\n*   A, B, C, D, E, F\n*   0, 1, 2, 3, 4 ,5\n    **/\n    [0, 2, 4, 0, 0, 0],//0 A     \n    [2, 0, 2, 4, 2, 0],//1 B\n    [4, 2, 0, 0, 3, 0],//2 C\n    [0, 4, 0, 0, 3, 2],//3 D\n    [0, 2, 3, 3, 0, 2],//4 E\n    [0, 0, 0, 2, 2, 0] //5 F\n]\n \n \nfunction kruskal(graph) {\n    const { length } = graph\n    const parent = []\n    let count = 0 //边\n    let a, b\n \n    const grapCopy = JSON.parse(JSON.stringify(graph))\n \n    while (count &lt; length - 1) {\n \n        //找出权值最小的边\n        for (let i = 0, min = Number.MAX_SAFE_INTEGER; i &lt; length; i++) {\n            for (let j = 0; j &lt; length; j++) {\n                if (grapCopy[i][j] &lt; min) {\n                    min = grapCopy[i][j]\n                    a = u = i\n                    b = v = j\n                }\n            }\n        }\n \n        if ((!parent.includes(a) || !parent.includes(b)) &amp;&amp; a !== b) {\n            parent[b] = a\n            // !parent.includes(a) ? parent.push(a) : null\n            // !parent.includes(b) ? parent.push(b) : null\n            console.log('a -&gt; b:', a, '-&gt;', b);\n            count++\n        }\n \n \n \n \n        grapCopy[a][b] = grapCopy[b][a] = Number.MAX_SAFE_INTEGER\n    }\n    return parent\n}\n \nconsole.log(kruskal(graph));\n</code></pre>\n"},{"path":"/posts/博客搭建.html","title":"博客搭建笔记","date":"2022-03-12","fontNum":731,"description":"\r\n 背景\r\n\r\n之前的博客采用的是hexo，由于某些原因导致源码丢失。后又使用了一段时间csdn，简书，可能我玩不太来，故最近萌生迁移博客的想法，有尝试过使用vuepress，奈何webpack打包速度感人，经过调查研究最终决定采用vitepress来搭建。\r\n\r\n 现状\r\n\r\n博客暂时是放在 gitHub 服务器上，源码地址 [https://github.com/creacing/","tags":["建站"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<h2>背景</h2>\n<p>之前的博客采用的是hexo，由于某些原因导致源码丢失。后又使用了一段时间csdn，简书，可能我玩不太来，故最近萌生迁移博客的想法，有尝试过使用vuepress，奈何webpack打包速度感人，经过调查研究最终决定采用vitepress来搭建。</p>\n<h3>现状</h3>\n<p>博客暂时是放在 gitHub 服务器上，源码地址 <a href=\"https://github.com/creacing/myBlog\">https://github.com/creacing/myBlog</a> 目前还是初始版本还有很多不完善的地方。</p>\n<blockquote>\n<p>做博客最主要的目的还是希望有个地方能够记录下自己的学习经历，搭建博客的本生也是一个学习过程，搭建中也顺便学习了下vue3 和 TS。</p>\n</blockquote>\n<h2>操作</h2>\n<h3>打包和上传</h3>\n<p>yarn build 打包好本地代码。\n在github新建仓库，将打包好后的代码上传到仓库。</p>\n<h3>域名购买与使用</h3>\n<p>在阿里云购买完域名之后,在项目下构建CNAME 文件不带 www 和 http 写入你购买的域名</p>\n<p><img src=\"/ympz1.png\" alt=\"域名配置\"></p>\n<p>在github的项目下进入setting 页面，往下找到GitHub Pages 点击Check it out here!</p>\n<p><img src=\"/ympz2.png\" alt=\"域名配置\"></p>\n<p>在此处输入你购买的域名，然后在阿里云找到你购买的域名，点击后方的解析</p>\n<p><img src=\"/ympz3.png\" alt=\"域名配置\"></p>\n<p>按如下方式进行配置</p>\n<p><img src=\"/ympz4.png\" alt=\"域名配置\"></p>\n<h2>今后目标</h2>\n<p>新的博客新的开始，今后的日子也要不断激励自己创作学习。</p>\n"},{"path":"/posts/匹配文件node插件.html","title":"匹配文件node插件 - glob | globby","date":"2022-03-15","fontNum":78,"description":" glob\r\n使用规则获取匹配的文件\r\n\r\n globby\r\nglobby，是基于 glob 功能增强\r\nglobby 返回一个 promise","tags":["node"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<h3>glob</h3>\n<p>使用规则获取匹配的文件</p>\n<h3>globby</h3>\n<p>globby，是基于 glob 功能增强\nglobby 返回一个 promise</p>\n"},{"path":"/posts_element_ui/el_progress.html","title":"element progress 控制进度条颜色","date":"2022-03-16","fontNum":1303,"description":"javascript\r\n<template>\r\n  <div>\r\n    <el-progress\r\n      :percentage=\"percentage\"\r\n      :format=\"format\"\r\n      :color=\"customColors\"\r\n    ></el-progress>\r\n    <!-- :status=\"status\" -->\r\n    <!-- ","tags":["element"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;el-progress\n      :percentage=&quot;percentage&quot;\n      :format=&quot;format&quot;\n      :color=&quot;customColors&quot;\n    &gt;&lt;/el-progress&gt;\n    &lt;!-- :status=&quot;status&quot; --&gt;\n    &lt;!-- :color=&quot;customColorMethod&quot; 控制颜色方式一--&gt;\n    &lt;!-- :color=&quot;customColors&quot; 控制颜色方式二--&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n//format  和status 一起会被 status 覆盖掉\nexport default {\n  mounted() {\n    setInterval(() =&gt; {\n      if (this.percentage === 100) {\n        return;\n      }\n      this.percentage += 10;\n    }, 1000);\n  },\n  data() {\n    return {\n      percentage: 0,\n      // status: &quot;success&quot;,\n      customColors: [\n        { color: &quot;#f56c6c&quot;, percentage: 20 },\n        { color: &quot;#e6a23c&quot;, percentage: 40 },\n        { color: &quot;#5cb87a&quot;, percentage: 60 },\n        { color: &quot;#1989fa&quot;, percentage: 80 },\n        { color: &quot;#6f7ad3&quot;, percentage: 100 },\n      ],\n    };\n  },\n  methods: {\n    format(percentage) {\n      console.log(&quot;format(percentage)&quot;);\n      return percentage === 100 ? &quot;满&quot; : `${percentage}%`;\n    },\n    // customColorMethod(percentage) {\n    //   if (percentage &lt; 30) {\n    //     return &quot;#909399&quot;;\n    //   } else if (percentage &lt; 70) {\n    //     return &quot;#e6a23c&quot;;\n    //   } else {\n    //     return &quot;#67c23a&quot;;\n    //   }\n    // },\n  },\n};\n&lt;/script&gt;\n</code></pre>\n"},{"path":"/posts_html/点击弹框外弹框消失.html","title":"点击弹框外弹框消失","date":"2022-03-17","fontNum":541,"description":" 方法1 根据className判断\r\njavascript\r\n\r\ndocument.addEventListener(\"click\", (e) => {\r\n  if (e.target.className === [className])) {\r\n    showFlag.value = false;\r\n  }\r\n});\r\n\r\n\r\n\r\n 方法2 阻止事件冒泡\r\n\r\n","tags":["html"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<h3>方法1 根据className判断</h3>\n<pre><code class=\"language-javascript\">\ndocument.addEventListener(&quot;click&quot;, (e) =&gt; {\n  if (e.target.className === [className])) {\n    showFlag.value = false;\n  }\n});\n\n</code></pre>\n<h3>方法2 阻止事件冒泡</h3>\n<pre><code class=\"language-javascript\">setTimeout(() =&gt; {\n  const dialog = document.getElementsByClassName(&quot;search-dialog&quot;)[0];\n  dialog.addEventListener(&quot;click&quot;, (e) =&gt; {\n    e.stopPropagation();\n  });\n  const searchBtn = document.getElementsByClassName(&quot;search-btn&quot;)[0];\n  searchBtn.addEventListener(&quot;click&quot;, (e) =&gt; {\n    e.stopPropagation();\n  });\n});\n</code></pre>\n"},{"path":"/posts_css/去除input获得焦点后的边框.html","title":"去掉input标签获取焦点后的边框","date":"2022-03-17","fontNum":54,"description":"\r\n input{ outline: none }\r\n\r\ninput{ outline: none }","tags":["css"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<h3>input{ outline: none }</h3>\n<p>input{ outline: none }</p>\n"},{"path":"/posts_struct/n皇后问题.html","title":"leetcode 51 n皇后问题 I 和 II","date":"2022-03-17","fontNum":1554,"description":"javascript\r\nvar solveNQueens = function (n) {\r\n    //Quee 在每一行的位置\r\n    const position = []\r\n    //输出结果\r\n    const result = []\r\n    //回溯法\r\n    function dfs(x) {\r\n        //剪枝条件\r\n        if (x === n)","tags":["回溯法"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">var solveNQueens = function (n) {\n    //Quee 在每一行的位置\n    const position = []\n    //输出结果\n    const result = []\n    //回溯法\n    function dfs(x) {\n        //剪枝条件\n        if (x === n) {\n            //resItem 每种结果中的每一行\n            let resItem = []\n            for (let i = 0; i &lt; n; i++) {\n                resItem.push('.')\n            }\n            //res 为每种结果\n            let res = []\n            for (const e of position) {\n                resItem[e] = 'Q'\n                res.push(resItem.join(''))\n                resItem[e] = '.'\n            }\n            result.push(res)\n            return\n        }\n        //判断每一行每一个节点是否符合\n        for (let y = 0; y &lt; n; y++) {\n            if (check(x, y)) {\n                position[x] = y\n                dfs(x + 1)\n                position[x] = 0\n            }\n        }\n    }\n\n    //判断第row 行queue能否放在第i列上\n    function check(x, y) {\n        //默认每行只有一个\n        for (let row = 0; row &lt; x; row++) {\n            //row &lt; x 判断到x（当前行）行为止\n            const column = position[row]//获取之前每一行的列值\n            //判断是否在一列\n            if (column === y) return false\n            //判断是否在一右上对角线 右上对角线 横纵坐标和相同\n            if (row + column === x + y) return false\n            //判断是否在一右下对角线 右下对角线 横纵坐标差相同\n            if (row - column === x - y) return false\n\n        }\n        return true\n    }\n\n    dfs(0)\n\n\n    return result\n\n};\n\nconsole.log(solveNQueens(4));\n\n// [\n//     ['.Q..', '...Q', 'Q...', '..Q.'],\n//     ['..Q.', 'Q...', '...Q', '.Q..']\n// ]\n\n</code></pre>\n"},{"path":"/posts_vue/documentIsUndefined.html","title":"Hydration completed but contains mismatches.报错","date":"2022-03-17","fontNum":758,"description":" 起因\r\n\r\n给弹框设置点击界面消失的功能\r\n\r\n 打包成功的情况下 浏览器报错\r\n\r\n Hydration completed but contains mismatches.\r\n\r\n 打包失败的情况下\r\n\r\nyarn build 报 document is undefined\r\n\r\n 原因\r\n\r\n构建项目的时候dom节点还未渲染出来就去访问document\r\n\r\n","tags":["vue"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<h3>起因</h3>\n<p>给弹框设置点击界面消失的功能</p>\n<h3>打包成功的情况下 浏览器报错</h3>\n<p>Hydration completed but contains mismatches.</p>\n<h3>打包失败的情况下</h3>\n<p>yarn build 报 document is undefined</p>\n<h3>原因</h3>\n<p>构建项目的时候dom节点还未渲染出来就去访问document</p>\n<h3>解决方法</h3>\n<p>nextTick 不可以</p>\n<pre><code class=\"language-javascript\">onBeforeMount(() =&gt; {\n  (function () {\n    document.addEventListener(&quot;click&quot;, (e) =&gt; {\n      showSearchDiolag.value = false;\n    });\n    setTimeout(() =&gt; {\n      const dialog = document.getElementsByClassName(&quot;search-dialog&quot;)[0];\n      dialog.addEventListener(&quot;click&quot;, (e) =&gt; {\n        e.stopPropagation();\n      });\n      const searchBtn = document.getElementsByClassName(&quot;search-btn&quot;)[0];\n      searchBtn.addEventListener(&quot;click&quot;, (e) =&gt; {\n        e.stopPropagation();\n      });\n    });\n  })();\n});\n</code></pre>\n"},{"path":"/posts_struct/下一个排列.html","title":"下一个排列","date":"2022-03-18","fontNum":976,"description":"javascript\r\nconst nums = [2, 3, 1]\r\nvar nextPermutation = function (nums) {\r\n    //当前数组转换成number的值\r\n    const curValue = nums.join('')\r\n    //当前数组组合的最大值\r\n    let maxValue = nums.slice().sort((a, b)","tags":["数据结构与算法"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">const nums = [2, 3, 1]\nvar nextPermutation = function (nums) {\n    //当前数组转换成number的值\n    const curValue = nums.join('')\n    //当前数组组合的最大值\n    let maxValue = nums.slice().sort((a, b) =&gt; b - a).join('')\n    //当前值等于最大值 返回数组正序排列\n    if (maxValue === curValue) {\n        return nums.sort((a, b) =&gt; a - b)\n    }\n    //从倒数第二个数往前遍历\n    for (let i = nums.length - 2; i &gt;= 0; i--) {\n        //如果 比后面的数小\n        if (nums[i] &lt; nums[i + 1]) {\n            //截取i后面所有的值进行排序\n            let after = nums.slice(i + 1).sort((a, b) =&gt; a - b)\n            //找到其中第一个比i大的值和 i 进行交换\n            for (let e = 0; e &lt; after.length; e++) {\n                if (after[e] &gt; nums[i]) {\n                    [after[e], nums[i]] = [nums[i], after[e]]\n                    break\n                }\n            }\n            //向nums中添加\n            nums.splice(i + 1, nums.length, ...after)\n            return nums\n        }\n    }\n}\n\nconsole.log(nextPermutation(nums));\n</code></pre>\n"},{"path":"/posts_struct/二叉树层序遍历.html","title":"二叉树层序遍历","date":"2022-03-18","fontNum":974,"description":" bfs 使用的是 队列\r\njavascript\r\nconst input = [3, 9, 20, null, null, 15, 7]\r\nfunction bfs(input) {\r\n    const res = []\r\n    //获取根节点\r\n    const root = input[0]\r\n\r\n    if (root === null) return res\r\n   ","tags":["bfs"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<h3>bfs 使用的是 队列</h3>\n<pre><code class=\"language-javascript\">const input = [3, 9, 20, null, null, 15, 7]\nfunction bfs(input) {\n    const res = []\n    //获取根节点\n    const root = input[0]\n\n    if (root === null) return res\n    \n    const q = []\n    q.unshift({ index: 0, value: input[0] })\n\n    while (q.length &gt; 0) {\n        let len = q.length\n        const list = [] //队列\n        while (len &gt; 0) {\n            const cur = q.pop() //出队列\n\n            list.push(cur.value)\n            const i = cur.index\n            const left = 2 * i + 1 // 左右子节点在数组中的位置\n            const right = 2 * i + 2\n            if (input[left] &amp;&amp; input[left] !== null) {\n                q.unshift({ index: left, value: input[left] }) //子节点入队列\n            }\n            if (input[right] &amp;&amp; input[right] !== null) {\n                q.unshift({ index: right, value: input[right] })\n            }\n            len -= 1\n        }\n        res.push(list)\n    }\n    return res\n}\nconsole.log(bfs(input));\n</code></pre>\n"},{"path":"/posts_struct/全排列2.html","title":"全排列(数组中有相同的值)","date":"2022-03-18","fontNum":1016,"description":"javascript\r\nvar permuteUnique = function (nums) {\r\n    const dic = {}\r\n    const res = []\r\n\r\n    //生成以索引为key的字典 ****** 和普通全排列的区别 dic 是以索引为key 多了去重数组\r\n    for (let i = 0; i < nums.length; i) {\r\n  ","tags":["回溯法"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">var permuteUnique = function (nums) {\n    const dic = {}\n    const res = []\n\n    //生成以索引为key的字典 ****** 和普通全排列的区别 dic 是以索引为key 多了去重数组\n    for (let i = 0; i &lt; nums.length; i++) {\n        if (dic[i] == undefined) {\n            dic[i] = false\n        }\n    }\n    //回溯法\n    traceBack(nums, res, dic, [], [])\n\n    return res\n};\n// nums 传入的数组， res 返回的结果， dic索引字典， stack 回溯栈 ，remRep 去重数组\nfunction traceBack(nums, res, dic, stack, remRep) {\n    if (nums.length === stack.length) {\n        if (!remRep.includes(stack.slice().join(','))) {\n            remRep.push(stack.slice().join(','))\n            res.push(stack.slice())\n        }\n\n        return\n    }\n    for (let j = 0; j &lt; nums.length; j++) {\n        if (dic[j] === false) {\n            stack.push(nums[j])\n            dic[j] = true\n            traceBack(nums, res, dic, stack, remRep)\n            stack.pop()\n            dic[j] = false\n\n        }\n    }\n}\nconst nums = [1, 1, 2]\nconsole.log(permuteUnique(nums));\n</code></pre>\n"},{"path":"/posts_struct/连续子数组最大和.html","title":"连续子数组最大和","date":"2022-03-19","fontNum":553,"description":"\r\n\r\n 动态规划法 解决 连续子数组最大和\r\n\r\n 状态转移方程 dp[i] =  dp[i-1]>0 ? dp[i-1]nums[i] : nums[i]\r\n\r\n 初始化 dp[0] = nums[0]\r\n\r\njavascript\r\nconst maxSubArray = function (nums) {\r\n    const len = nums.length\r\n","tags":["动态规划法"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<h3>动态规划法 解决 连续子数组最大和</h3>\n<h3>状态转移方程 dp[i] =  dp[i-1]&gt;0 ? dp[i-1]+nums[i] : nums[i]</h3>\n<h3>初始化 dp[0] = nums[0]</h3>\n<pre><code class=\"language-javascript\">const maxSubArray = function (nums) {\n    const len = nums.length\n    if (len === 0) return 0\n\n    const dp = [] // 以nums[i]结尾的最大的连续子数组的和\n    dp[0] = nums[0]\n\n    for (let i = 1; i &lt; len; i++) {\n        dp[i] = Math.max(dp[i - 1] + nums[i], nums[i])\n    }\n\n    return Math.max(...dp)\n};\n\nconst nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n//dp [-2, 1, -2, 4, 3, 5, 6, 1,  5]\nconsole.log(maxSubArray(nums));\n</code></pre>\n"},{"path":"/posts_css/audio和embed的区别.html","title":"audio和embed的区别","date":"2022-03-20","fontNum":351,"description":"\r\n html5里的一些新的标签,object、embed、video、audio都可以添加视频或音频文件。\r\n\r\n- embed是针对非IE的浏览器的媒体播放器。\r\n\r\n- video是html5的新标准，并不是所有的浏览器都支持。\r\n\r\n- video支持三种媒体类型，常用的是mp4。\r\n\r\n audio通过js控制 不使用默认controls 属性\r\njavascript\r","tags":["css"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<h3>html5里的一些新的标签,object、embed、video、audio都可以添加视频或音频文件。</h3>\n<ul>\n<li>\n<p>embed是针对非IE的浏览器的媒体播放器。</p>\n</li>\n<li>\n<p>video是html5的新标准，并不是所有的浏览器都支持。</p>\n</li>\n<li>\n<p>video支持三种媒体类型，常用的是mp4。</p>\n</li>\n</ul>\n<h3>audio通过js控制 不使用默认controls 属性</h3>\n<pre><code class=\"language-javascript\"> const audio = document.getElementsByClassName(&quot;bg-music&quot;)[0];\n  if (audio.paused) {\n    audio.play();\n  } else {\n    audio.pause();\n  }\n</code></pre>\n"},{"path":"/posts_struct/螺旋矩阵.html","title":"螺旋矩阵","date":"2022-03-20","fontNum":780,"description":"javascript\r\nvar spiralOrder = function (matrix) {\r\n    const rowLen = matrix.length\r\n    const columnLen = matrix[0].length\r\n    let up = 0, left = 0, down = rowLen - 1, right = columnLen - 1\r\n    ","tags":["迭代"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">var spiralOrder = function (matrix) {\n    const rowLen = matrix.length\n    const columnLen = matrix[0].length\n    let up = 0, left = 0, down = rowLen - 1, right = columnLen - 1\n    const res = []\n\n    while (true) {\n        //从左往右遍历\n        for (let i = left; i &lt;= right; i++) res.push(matrix[up][i])\n        if (++up &gt; down) break//往下减一层\n        //从上往下遍历\n        for (let i = up; i &lt;= down; i++) res.push(matrix[i][right])\n        if (--right &lt; left) break//往左减一层\n        //从右往左遍历\n        for (let i = right; i &gt;= left; i--) res.push(matrix[down][i])\n        if (--down &lt; up) break//往上减一层\n        //从下往上遍历\n        for (let i = down; i &gt;= up; i--) res.push(matrix[i][left])\n        if (++left &gt; right) break//往右减一层\n    }\n    return res\n}\n\n</code></pre>\n"},{"path":"/posts_css/animation.html","title":"animation","date":"2022-03-21","fontNum":122,"description":"\r\n animation-direction: normal|alternate;\r\nnormal\t默认值。动画应该正常播放。\r\nalternate\t动画应该轮流反向播放。 \r\n\r\n forwards当动画完成后，保持最后一帧的状态","tags":["css"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<h3>animation-direction: normal|alternate;</h3>\n<p>normal\t默认值。动画应该正常播放。\nalternate\t动画应该轮流反向播放。</p>\n<h3>forwards当动画完成后，保持最后一帧的状态</h3>\n"},{"path":"/posts_css/path与svg.html","title":"path与svg","date":"2022-03-21","fontNum":16,"description":"\r\n path与svg\r\n","tags":["css"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<h3>path与svg</h3>\n"},{"path":"/posts_css/滚动条.html","title":"滚动条","date":"2022-03-21","fontNum":227,"description":"css\r\n/* 滚动条的宽度 */\r\n::-webkit-scrollbar {\r\n  width: 5px;\r\n}\r\n/* 滚动条的按钮 */\r\n::-webkit-scrollbar-button {\r\n  display: none;\r\n}\r\n/* 滚动条的滑块 */\r\n::-webkit-scrollbar-thumb {\r\n  background-color: grey;\r\n  ","tags":["css"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-css\">/* 滚动条的宽度 */\n::-webkit-scrollbar {\n  width: 5px;\n}\n/* 滚动条的按钮 */\n::-webkit-scrollbar-button {\n  display: none;\n}\n/* 滚动条的滑块 */\n::-webkit-scrollbar-thumb {\n  background-color: grey;\n  border-radius: 5px;\n}\n</code></pre>\n"},{"path":"/posts_javascript/数组相加.html","title":"数组相加","date":"2022-03-21","fontNum":32,"description":"\r\n[1]  [1] = ?\r\n// '11'\r\n","tags":["javascript"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code>[1] + [1] = ?\n// '11'\n</code></pre>\n"},{"path":"/posts_struct/55跳跃游戏.html","title":"55跳跃游戏","date":"2022-03-21","fontNum":396,"description":"javascript\r\nvar canJump = function(nums) {\r\n    const store = [1]\r\n    const numsLength = nums.length\r\n    for (let i = 0; i < numsLength; i) {\r\n        const item = nums[i]\r\n        for (let j =","tags":["动态规划"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">var canJump = function(nums) {\n    const store = [1]\n    const numsLength = nums.length\n    for (let i = 0; i &lt; numsLength; i++) {\n        const item = nums[i]\n        for (let j = 0; j &lt; item; j++) {\n            store[i + j + 1] = 1\n        }\n    }\n\n    if (store.includes(undefined) || store.length &lt; numsLength) {\n        return false\n    }\n    return true\n};\n</code></pre>\n"},{"path":"/posts_struct/60排列序列.html","title":"60排列序列","date":"2022-03-21","fontNum":715,"description":"javascript\r\nvar getPermutation = function(n, k) {\r\n    const res = []\r\n    const nums = []\r\n    const dic = {}\r\n    for (let i = 1; i <= n; i) {\r\n        nums[i - 1] = i\r\n        dic[i - 1] = fal","tags":["回溯法"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">var getPermutation = function(n, k) {\n    const res = []\n    const nums = []\n    const dic = {}\n    for (let i = 1; i &lt;= n; i++) {\n        nums[i - 1] = i\n        dic[i - 1] = false\n    }\n\n    const traceBack = (stack) =&gt; {\n        if (stack.length === nums.length) {\n            res.push(stack.slice())\n        }\n        for (let i = 0; i &lt; nums.length; i++) {\n            if (!dic[i]) {\n                stack.push(nums[i])\n                dic[i] = true\n                traceBack(stack)\n                stack.pop()\n                dic[i] = false\n            }\n\n        }\n\n    }\n    traceBack([])\n    return res[k - 1].join('')\n};\n\nconsole.log(getPermutation(4, 9));\n</code></pre>\n"},{"path":"/posts_struct/62不同路径.html","title":"62不同路径","date":"2022-03-21","fontNum":1276,"description":" 62不同路径\r\n 方法一 回溯法 超时\r\njavascript\r\nvar uniquePaths = function(m, n) {\r\n    //初始化\r\n    const dp = []\r\n    for (let i = 0; i < m; i) {\r\n        dp[i] = []\r\n        for (let j = 0; j < n; j) {","tags":["动态规划"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<h2>62不同路径</h2>\n<h3>方法一 回溯法 超时</h3>\n<pre><code class=\"language-javascript\">var uniquePaths = function(m, n) {\n    //初始化\n    const dp = []\n    for (let i = 0; i &lt; m; i++) {\n        dp[i] = []\n        for (let j = 0; j &lt; n; j++) {\n            dp[i][j] = 0\n        }\n    }\n    dp[0][0] = 1\n    let count = 0\n    const dfs = (x, y) =&gt; {\n        //剪枝\n        if (x === m - 1 &amp;&amp; y === n - 1) {\n            count++\n            return\n        }\n\n        if (x &lt; m - 1 &amp;&amp; !dp[x + 1][y]) {\n            dp[x + 1][y] = 1\n            dfs(x + 1, y)\n            dp[x + 1][y] = 0\n        }\n\n        if (y &lt; n - 1 &amp;&amp; !dp[x][y + 1]) {\n            dp[x][y + 1] = 1\n            dfs(x, y + 1)\n            dp[x][y + 1] = 0\n        }\n    }\n\n    dfs(0, 0)\n\n    return count\n};\nconsole.log(uniquePaths(23, 12));\n// 193536720\n</code></pre>\n<h3>方法二 动态规划法</h3>\n<pre><code class=\"language-javascript\">var uniquePaths = function(m, n) {\n    const store = []\n    for (let i = 0; i &lt; m; i++) {\n        store[i] = []\n        for (let j = 0; j &lt; n; j++) {\n            if (i === 0 || j === 0) {\n                store[i][j] = 1\n            } else {\n                store[i][j] = store[i - 1][j] + store[i][j - 1]\n            }\n        }\n    }\n    return store[m - 1][n - 1]\n};\n// 193536720\n\nconsole.log(uniquePaths(23, 12));\n</code></pre>\n"},{"path":"/posts_struct/螺旋矩阵2.html","title":"螺旋矩阵2","date":"2022-03-21","fontNum":1041,"description":"javascript\r\nvar generateMatrix = function(n) {\r\n    const res = []\r\n    //初始化\r\n    for (let i = 0; i < n; i)[\r\n        res[i] = []\r\n    ]\r\n\r\n    let top = 0,\r\n        left = 0,\r\n        right = n","tags":["迭代"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">var generateMatrix = function(n) {\n    const res = []\n    //初始化\n    for (let i = 0; i &lt; n; i++)[\n        res[i] = []\n    ]\n\n    let top = 0,\n        left = 0,\n        right = n - 1,\n        bottom = n - 1\n        \n    let count = 1\n    while (true) {\n        for (let i = left; i &lt;= right; i++) {\n            res[top][i] = count\n            count++\n        }\n        if (++top &gt; bottom) break //往下减一层\n            //从上往下遍历\n        for (let i = top; i &lt;= bottom; i++) {\n            res[i][right] = count\n            count++\n        }\n        if (--right &lt; left) break //往左减一层\n            //从右往左遍历\n        for (let i = right; i &gt;= left; i--) {\n            res[bottom][i] = count\n            count++\n        }\n        if (--bottom &lt; top) break //往上减一层\n            //从下往上遍历\n        for (let i = bottom; i &gt;= top; i--) {\n            res[i][left] = count\n            count++\n        }\n        if (++left &gt; right) break //往右减一层\n    }\n\n    return res\n\n};\n\nconsole.log(generateMatrix(4));\n</code></pre>\n"},{"path":"/posts_struct/63不同路径2.html","title":"63不同路径2","date":"2022-03-22","fontNum":1083,"description":"\r\njavascript\r\n//1表示障碍物 0表示空格\r\nvar uniquePathsWithObstacles = function(obstacleGrid) {\r\n    const m = obstacleGrid.length\r\n    const n = obstacleGrid[0].length\r\n    if (obstacleGrid[m - 1][n - 1] ==","tags":["动态规划"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">//1表示障碍物 0表示空格\nvar uniquePathsWithObstacles = function(obstacleGrid) {\n    const m = obstacleGrid.length\n    const n = obstacleGrid[0].length\n    if (obstacleGrid[m - 1][n - 1] === 1 || obstacleGrid[0][0] === 1) {\n        return 0\n    }\n    obstacleGrid[0][0] = 1\n\n    for (let i = 0; i &lt; m; i++) {\n        for (let j = 0; j &lt; n; j++) {\n            if (i === 0 &amp;&amp; j === 0) {\n                continue\n            }\n            if (obstacleGrid[i][j] === 1) {\n                obstacleGrid[i][j] = 0\n                continue\n            }\n            //0行\n            if (i === 0) {\n                obstacleGrid[i][j] = obstacleGrid[i][j - 1]\n                continue\n            }\n            //0列\n            if (j === 0) {\n                obstacleGrid[i][j] = obstacleGrid[i - 1][j]\n                continue\n            }\n\n            if (obstacleGrid[i][j] !== 1) {\n                obstacleGrid[i][j] = obstacleGrid[i - 1][j] + obstacleGrid[i][j - 1]\n            }\n        }\n    }\n\n    return obstacleGrid[m - 1][n - 1]\n\n};\n</code></pre>\n"},{"path":"/posts_struct/64最小路径和.html","title":"64最小路径和","date":"2022-03-22","fontNum":744,"description":"javascript\r\n//动态规划\r\nvar minPathSum = function(grid) {\r\n    const m = grid.length\r\n    const n = grid[0].length\r\n\r\n    for (let i = m - 1; i >= 0; i--) {\r\n        for (let j = n - 1; j >= 0; j--) {\r","tags":["动态规划"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">//动态规划\nvar minPathSum = function(grid) {\n    const m = grid.length\n    const n = grid[0].length\n\n    for (let i = m - 1; i &gt;= 0; i--) {\n        for (let j = n - 1; j &gt;= 0; j--) {\n            if (i === m - 1 &amp;&amp; j === n - 1) continue\n\n            if (i === m - 1) {\n                grid[i][j] = grid[i][j] + grid[i][j + 1]\n                continue\n            }\n\n            if (j === n - 1) {\n                grid[i][j] = grid[i][j] + grid[i + 1][j]\n                continue\n            }\n\n            grid[i][j] = grid[i][j] + Math.min(grid[i + 1][j], grid[i][j + 1])\n        }\n    }\n\n    return grid[0][0]\n\n};\n\n\nconsole.log(minPathSum([\n    [1, 3, 1],\n    [1, 5, 1],\n    [4, 2, 1]\n]));\n// 7\n</code></pre>\n"},{"path":"/posts_struct/66加一.html","title":"64最小路径和","date":"2022-03-22","fontNum":182,"description":"javascript\r\nvar plusOne = function(digits) {\r\n    console.log(BigInt(digits.join(''))  BigInt(1));\r\n    return (BigInt(digits.join(''))  BigInt(1)).toString().split('')\r\n};\r\n","tags":["BigInt"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">var plusOne = function(digits) {\n    console.log(BigInt(digits.join('')) + BigInt(1));\n    return (BigInt(digits.join('')) + BigInt(1)).toString().split('')\n};\n</code></pre>\n"},{"path":"/posts_struct/77组合.html","title":"77组合","date":"2022-03-22","fontNum":437,"description":"javascript\r\nvar combine = function(n, k) {\r\n    const res = []\r\n\r\n    const dfs = (stack, start, n, k) => {\r\n        if (k === 0) {\r\n            res.push(stack.slice())\r\n            return\r\n       ","tags":["回溯法"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">var combine = function(n, k) {\n    const res = []\n\n    const dfs = (stack, start, n, k) =&gt; {\n        if (k === 0) {\n            res.push(stack.slice())\n            return\n        }\n\n        for (let i = start; i &lt;= n; i++) {\n            stack.push(i)\n            dfs(stack, i + 1, n, k - 1)\n            stack.pop()\n        }\n    }\n    dfs([], 1, n, k)\n    return res\n};\n\nconsole.log(combine(1, 2));\n</code></pre>\n"},{"path":"/posts_struct/78子集.html","title":"78子集","date":"2022-03-22","fontNum":564,"description":"javascript\r\nvar subsets = function(nums) {\r\n    const n = nums.length\r\n\r\n    const k = nums.length\r\n    const res = []\r\n    for (let k = 0; k <= n; k) {\r\n        dfs(nums, [], n, k, 0, res)\r\n    ","tags":["回溯法"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">var subsets = function(nums) {\n    const n = nums.length\n\n    const k = nums.length\n    const res = []\n    for (let k = 0; k &lt;= n; k++) {\n        dfs(nums, [], n, k, 0, res)\n    }\n    return res\n};\n\n\nfunction dfs(nums, stack, n, k, start, res) {\n    // console.log(stack);\n    if (k === 0) {\n        res.push(stack.slice())\n        return\n    }\n\n    for (let i = start; i &lt; n; i++) {\n        stack.push(nums[i])\n        dfs(nums, stack, n, k - 1, i + 1, res)\n        stack.pop()\n    }\n}\nconsole.log(subsets([1, 2, 3]));\n</code></pre>\n"},{"path":"/posts_element_ui/el_radio.html","title":"element radio 默认值无效","date":"2022-03-25","fontNum":37,"description":" element radio绑定的值是一个对象的属性会导致默认值无效","tags":["element"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<h3>element radio绑定的值是一个对象的属性会导致默认值无效</h3>\n"},{"path":"/posts_element_ui/el_form.html","title":"element form rule没生效","date":"2022-03-29","fontNum":61,"description":"\r\n 给form 元素添加 <el-form :model=\"ruleForm\"\r\n\r\nruleForm 为你的参数","tags":["element"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<h3>给form 元素添加 &lt;el-form :model=&quot;ruleForm&quot;</h3>\n<p>ruleForm 为你的参数</p>\n"},{"path":"/posts_element_ui/el_table_select.html","title":"element table select 表格复选框","date":"2022-03-29","fontNum":502,"description":" table 中添加\r\njavascript\r\n<el-table-column\r\n    v-if=\"selection === true\" // 启用select\r\n    type=\"selection\" //表格样式为复选框\r\n    :reserve-selection=\"reserveSelection\" //保存选择的记录\r\n    :selectable=\"fn\" //","tags":["element"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<h3>table 中添加</h3>\n<pre><code class=\"language-javascript\">&lt;el-table-column\n    v-if=&quot;selection === true&quot; // 启用select\n    type=&quot;selection&quot; //表格样式为复选框\n    :reserve-selection=&quot;reserveSelection&quot; //保存选择的记录\n    :selectable=&quot;fn&quot; //仅对 type=selection 的列有效，类型为 Function，Function 的返回值用来决定这一行的 CheckBox 是否可以勾选\n    width=&quot;30&quot;//width 过小复选框后方会出现 ..\n/&gt;\n</code></pre>\n<h3>持久化 添加</h3>\n<pre><code class=\"language-javascript\">:row-key=&quot;(row)=&gt;{ return row.key}&quot; //每行唯一的key\n:reserve-selection=&quot;true&quot;\n</code></pre>\n<h3>选中事件</h3>\n<pre><code class=\"language-javascript\">@select=&quot;selectRow&quot;\nselectRow(row :Array){}\n</code></pre>\n"},{"path":"/posts_node/批量rename.html","title":"批量rename(批量重命名图片)","date":"2022-04-12","fontNum":305,"description":" 批量给图片重命名 或者 按照 0 1 2 3 的顺序来命名\r\njavascript\r\nconst fs = require('fs')\r\n\r\nconst pictures = fs.readdirSync('./articlesPictures')\r\nlet count = 0\r\nfor (const picture of pictures) {\r\n    console.log(p","tags":["node"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<h3>批量给图片重命名 或者 按照 0 1 2 3 的顺序来命名</h3>\n<pre><code class=\"language-javascript\">const fs = require('fs')\n\nconst pictures = fs.readdirSync('./articlesPictures')\nlet count = 0\nfor (const picture of pictures) {\n    console.log(picture);\n    fs.renameSync(`./articlesPictures/${picture}`, `./articlesPictures/${count++}.jpg`)\n}\n</code></pre>\n"},{"path":"/posts_web/websoket.html","title":"webSoket","date":"2022-04-15","fontNum":1292,"description":" 2022-4-7\r\n HTTP 通信只能由客户端发起\r\n\r\n客户端要获知服务器状态就需要通过轮询去查询服务器有没有新的信息。 (轮询效率低，浪费资源)\r\n\r\n WebSocket \r\n\r\n服务器可以主动向客户端推送信息 (bidirectional)\r\n\r\n 特点\r\n\r\n建立在 TCP 协议之上\r\n\r\n与 HTTP 协议有着良好的兼容性\r\n\r\n数据格式比较轻量\r\n\r\n可以发","tags":["webSoket"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<h2>2022-4-7</h2>\n<h3>HTTP 通信只能由客户端发起</h3>\n<p>客户端要获知服务器状态就需要通过轮询去查询服务器有没有新的信息。 (轮询效率低，浪费资源)</p>\n<h3>WebSocket</h3>\n<p>服务器可以主动向客户端推送信息 (bidirectional)</p>\n<h3>特点</h3>\n<p>建立在 TCP 协议之上</p>\n<p>与 HTTP 协议有着良好的兼容性</p>\n<p>数据格式比较轻量</p>\n<p>可以发送或二进制数据。</p>\n<p>没有同源限制</p>\n<p>协议标识符是ws加密为wss</p>\n<h2>2022-4-16</h2>\n<h3>websocket ip不能用浏览器直接访问</h3>\n<h3>node端搭建</h3>\n<pre><code class=\"language-javascript\">const ws = require('nodejs-websocket')\n\nlet PORT = 4567\n\nconst server = ws.createServer((connection) =&gt; {\n    connection.on('text', function(result) {\n        console.log('发送消息', result)\n    })\n    connection.on('connect', function(code) {\n        console.log('开启连接', code)\n    })\n    connection.on('close', function(code) {\n        console.log('关闭连接', code)\n    })\n    connection.on('error', function(code) {\n        console.log('异常关闭', code)\n    })\n})\n\nserver.listen(PORT, () =&gt; {\n    console.log('服务器启动成功，端口' + PORT);\n})\n</code></pre>\n<h3>客户端搭建</h3>\n<pre><code class=\"language-javascript\">    const ws = new WebSocket(&quot;ws://127.0.0.1:4567&quot;);\n\n    ws.onopen = function (event) {\n        console.log(&quot;Connection open ...&quot;);\n        ws.send(&quot;Hello WebSockets!&quot;);\n    };\n\n    ws.onmessage = function (event) {\n        console.log(&quot;Received Message: &quot; + event.data);\n        ws.close();\n    };\n\n    ws.onclose = function (event) {\n        console.log(&quot;Connection closed.&quot;);\n    };\n</code></pre>\n"},{"path":"/posts_node/node搭建tcp服务器.html","title":"node搭建tcp服务器","date":"2022-04-21","fontNum":475,"description":" server\r\njavascript\r\n//引入net模块\r\nconst net = require('net');\r\n//创建TCP服务器\r\nconst server = net.createServer(function(socket) {\r\n    console.log('有新的客户端接入');\r\n});\r\n//设置监听端口\r\nserver.listen(8001, func","tags":["node"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<h3>server</h3>\n<pre><code class=\"language-javascript\">//引入net模块\nconst net = require('net');\n//创建TCP服务器\nconst server = net.createServer(function(socket) {\n    console.log('有新的客户端接入');\n});\n//设置监听端口\nserver.listen(8001, function() {\n    console.log('服务正在监听中。。。')\n});\n</code></pre>\n<h3>client</h3>\n<pre><code class=\"language-javascript\">//引入net模块\nconst net = require('net');\n//创建TCP客户端\nconst client = new net.Socket();\n//设置连接的服务器\n//本地\nclient.connect(8001, '127.0.0.1', function() {\n    console.log(&quot;连接服务器成功&quot;);\n});\n</code></pre>\n<h3>未完</h3>\n"},{"path":"/posts_vue/vue.html","title":"vue 中文名可以作为 key","date":"2022-04-21","fontNum":120,"description":" 中文名可以作为 key\r\njavascript\r\nconst dic = {\r\n    '中': 'zhong',\r\n    '文': 'weng',\r\n}\r\n\r\nconsole.log(dic['中']);\r\n\r\n\r\n","tags":["vue"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<h3>中文名可以作为 key</h3>\n<pre><code class=\"language-javascript\">const dic = {\n    '中': 'zhong',\n    '文': 'weng',\n}\n\nconsole.log(dic['中']);\n</code></pre>\n"},{"path":"/posts_element_ui/el_expand.html","title":"element table展开行只显示一行","date":"2022-04-22","fontNum":3453,"description":" 实现element table展开行只显示一行 需要三步\r\n  @expand-change=\"expandChange\"\r\njavascript\r\n@expand-change=\"expandChange\"\r\n\r\ndata(){\r\n    return {\r\n        expandRowKeys:[]\r\n    }\r\n}\r\n\r\n\r\nexpandChange(row) {","tags":["element"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<h3>实现element table展开行只显示一行 需要三步</h3>\n<h3>@expand-change=&quot;expandChange&quot;</h3>\n<pre><code class=\"language-javascript\">@expand-change=&quot;expandChange&quot;\n\ndata(){\n    return {\n        expandRowKeys:[]\n    }\n}\n\n\nexpandChange(row) {\n    this.expandRowKeys = [row.id];\n},\n</code></pre>\n<h3>:expand-row-keys=&quot;expandRowKeys&quot;</h3>\n<pre><code class=\"language-javascript\">:expand-row-keys=&quot;expandRowKeys&quot;\n</code></pre>\n<h3>:row-key=&quot;rowKey&quot;</h3>\n<pre><code class=\"language-javascript\">:row-key=&quot;rowKey&quot;\n\nrowKey(row) {\n    return row.id;\n},\n</code></pre>\n<h3>源码</h3>\n<pre><code class=\"language-javascript\">&lt;template&gt;\n  &lt;el-table\n    :data=&quot;tableData&quot;\n    style=&quot;width: 100%&quot;\n    @expand-change=&quot;expandChange&quot;\n    :expand-row-keys=&quot;expandRowKeys&quot;\n    :row-key=&quot;rowKey&quot;\n  &gt;\n    &lt;el-table-column type=&quot;expand&quot;&gt;\n      &lt;template slot-scope=&quot;props&quot;&gt;\n        &lt;el-form label-position=&quot;left&quot; inline class=&quot;demo-table-expand&quot;&gt;\n          &lt;el-form-item label=&quot;商品名称&quot;&gt;\n            &lt;span&gt;{{ props.row.name }}&lt;/span&gt;\n          &lt;/el-form-item&gt;\n          &lt;el-form-item label=&quot;所属店铺&quot;&gt;\n            &lt;span&gt;{{ props.row.shop }}&lt;/span&gt;\n          &lt;/el-form-item&gt;\n          &lt;el-form-item label=&quot;商品 ID&quot;&gt;\n            &lt;span&gt;{{ props.row.id }}&lt;/span&gt;\n          &lt;/el-form-item&gt;\n          &lt;el-form-item label=&quot;店铺 ID&quot;&gt;\n            &lt;span&gt;{{ props.row.shopId }}&lt;/span&gt;\n          &lt;/el-form-item&gt;\n          &lt;el-form-item label=&quot;商品分类&quot;&gt;\n            &lt;span&gt;{{ props.row.category }}&lt;/span&gt;\n          &lt;/el-form-item&gt;\n          &lt;el-form-item label=&quot;店铺地址&quot;&gt;\n            &lt;span&gt;{{ props.row.address }}&lt;/span&gt;\n          &lt;/el-form-item&gt;\n          &lt;el-form-item label=&quot;商品描述&quot;&gt;\n            &lt;span&gt;{{ props.row.desc }}&lt;/span&gt;\n          &lt;/el-form-item&gt;\n        &lt;/el-form&gt;\n      &lt;/template&gt;\n    &lt;/el-table-column&gt;\n    &lt;el-table-column label=&quot;商品 ID&quot; prop=&quot;id&quot;&gt; &lt;/el-table-column&gt;\n    &lt;el-table-column label=&quot;商品名称&quot; prop=&quot;name&quot;&gt; &lt;/el-table-column&gt;\n    &lt;el-table-column label=&quot;描述&quot; prop=&quot;desc&quot;&gt; &lt;/el-table-column&gt;\n  &lt;/el-table&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  methods: {\n    expandChange(row) {\n      //再次点击关闭\n      if (row.id === this.expandRowKeys[0].id) {\n        this.expandRowKeys = [];\n      } else {\n        this.expandRowKeys = [row.id];\n      }\n    },\n    rowKey(row) {\n      return row.id;\n    },\n  },\n  data() {\n    return {\n      expandRowKeys: [],\n      tableData: [\n        {\n          id: &quot;12987122&quot;,\n          name: &quot;好滋好味鸡蛋仔&quot;,\n          category: &quot;江浙小吃、小吃零食&quot;,\n          desc: &quot;荷兰优质淡奶，奶香浓而不腻&quot;,\n          address: &quot;上海市普陀区真北路&quot;,\n          shop: &quot;王小虎夫妻店&quot;,\n          shopId: &quot;10333&quot;,\n        },\n        {\n          id: &quot;12987123&quot;,\n          name: &quot;好滋好味鸡蛋仔&quot;,\n          category: &quot;江浙小吃、小吃零食&quot;,\n          desc: &quot;荷兰优质淡奶，奶香浓而不腻&quot;,\n          address: &quot;上海市普陀区真北路&quot;,\n          shop: &quot;王小虎夫妻店&quot;,\n          shopId: &quot;10333&quot;,\n        },\n        {\n          id: &quot;12987125&quot;,\n          name: &quot;好滋好味鸡蛋仔&quot;,\n          category: &quot;江浙小吃、小吃零食&quot;,\n          desc: &quot;荷兰优质淡奶，奶香浓而不腻&quot;,\n          address: &quot;上海市普陀区真北路&quot;,\n          shop: &quot;王小虎夫妻店&quot;,\n          shopId: &quot;10333&quot;,\n        },\n        {\n          id: &quot;12987126&quot;,\n          name: &quot;好滋好味鸡蛋仔&quot;,\n          category: &quot;江浙小吃、小吃零食&quot;,\n          desc: &quot;荷兰优质淡奶，奶香浓而不腻&quot;,\n          address: &quot;上海市普陀区真北路&quot;,\n          shop: &quot;王小虎夫妻店&quot;,\n          shopId: &quot;10333&quot;,\n        },\n      ],\n    };\n  },\n};\n&lt;/script&gt;\n\n&lt;style&gt;\n.demo-table-expand {\n  font-size: 0;\n}\n.demo-table-expand label {\n  width: 90px;\n  color: #99a9bf;\n}\n.demo-table-expand .el-form-item {\n  margin-right: 0;\n  margin-bottom: 0;\n  width: 50%;\n}\n&lt;/style&gt;\n</code></pre>\n"},{"path":"/posts_web/常用网站整理.html","title":"常用网站整理","date":"2022-04-22","fontNum":175,"description":"\r\n 在线抠图\r\n\r\n\r\nhttps://www.remove.bg/zh\r\n\r\n\r\n 功能强大的JavaScript 拖拽库\r\n\r\nhttp://www.sortablejs.com/\r\n\r\n\r\n 网页设计常用色彩搭配表\r\n\r\nhttp://tool.c7sky.com/webcolor/\r\n","tags":["web"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<h3>在线抠图</h3>\n<pre><code>https://www.remove.bg/zh\n</code></pre>\n<h3>功能强大的JavaScript 拖拽库</h3>\n<pre><code>http://www.sortablejs.com/\n</code></pre>\n<h3>网页设计常用色彩搭配表</h3>\n<pre><code>http://tool.c7sky.com/webcolor/\n</code></pre>\n"},{"path":"/posts_web/DNS.html","title":"查询DNS","date":"2022-04-24","fontNum":953,"description":" 客户端查询DNS服务器 发送的消息内容包含\r\n 域名 \r\n\r\n邮件@后面的部分\r\n\r\n\r\n class\r\n\r\nclass是用来识别网络的信息 不过现在只有互联网class的值永远是IN代表互联网\r\n\r\n\r\n 记录类型\r\n\r\n表示域名对应的类型\r\n类型 域名       对应\r\nA    IP地址\r\nMX   邮件服务器\r\n\r\nDNS 上事","tags":["DNS"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<h2>客户端查询DNS服务器 发送的消息内容包含</h2>\n<h3>域名</h3>\n<pre><code>邮件@后面的部分\n</code></pre>\n<h3>class</h3>\n<pre><code>class是用来识别网络的信息 不过现在只有互联网class的值永远是IN代表互联网\n</code></pre>\n<h3>记录类型</h3>\n<pre><code>表示域名对应的类型\n类型 域名       对应\nA    IP地址\nMX   邮件服务器\n</code></pre>\n<p>DNS 上事先保存这三种记录，根据客户端请求作查询</p>\n<h3>例子</h3>\n<pre><code>查询www.a.com的ip地址\n域名 = www.a.com\nclass = IN\n记录类型 = A\n</code></pre>\n<p>只要是作为A类型再DNS服务器上注册的都可以作为web服务器的域名</p>\n<h3>类型</h3>\n<pre><code>根据ip查域名的PTR类型\n查询域名相关别名的CNAME类型\n查询DNS服务器IP地址的NS类型\n查询域名属性的SOA类型\n</code></pre>\n<h4>CNAME</h4>\n<pre><code>CNAME 即指别名记录，也被称为规范名字。\n这种记录允许将多个名字映射到同一台计算机。 \n当需要将域名指向另一个域名，再由另一个域名提供 ip地址，就需要添加 CNAME 记录。\n</code></pre>\n<pre><code>博客搭建再 xxx.github.io \n博客目录创建 CNAME文件\nCNAME中写入域名 xxx.com\nxxx.com 指向 xxx.github.io 再指向对应的ip地址\n</code></pre>\n<h3>查询DNS</h3>\n<pre><code>根据域 至上而下 查询DNS 服务器\n根域 www.a.com.  // com 后面的 . 为根域 一般不写\n将根域的DNS服务器信息保存在互联网中所有的DNS服务器中。\n这样一来，任何DNS服务器就都可以找到并访问根域DNS服务器了\n\n实际上，根域DNS服务器的相关信息已经包含在DNS服务器程序的配置文件中了，\n因此只要安装了DNS服务器程序，这些信息也就被自动配置好了。\n</code></pre>\n<h3>查询过程</h3>\n<pre><code>客户端机查询最近的DNS服务器，如果没查到，最近的DNS服务器会查询根域服务 . 然后再查.com依次往下\n</code></pre>\n<h3>DNS 服务器具有缓存功能</h3>\n"},{"path":"/posts_web/vpn.html","title":"VPN原理","date":"2022-04-24","fontNum":33,"description":" VPN = Virtual Private Network","tags":["VPN"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<h3>VPN = Virtual Private Network</h3>\n"},{"path":"/posts_web/委托协议栈发送消息.html","title":"委托协议栈发送消息","date":"2022-04-24","fontNum":985,"description":" 委托协议栈发送消息\r\n\r\n和查询DNS服务器一样\r\n需要使用socket库中的程序组件（查询ip地址只需要调用一个程序组件就可以）\r\n而这里需要调用多个程序组件\r\n\r\n\r\n\r\n向操作系统内的协议栈发出委托时需要按照指定的顺序来调用socket库中的程序组件\r\n\r\n 使用socket库来手法数据的操作过程\r\n\r\n第一步 收发数据的两台计算机中间建立通道\r\n","tags":["DNS"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<h3>委托协议栈发送消息</h3>\n<pre><code>和查询DNS服务器一样\n需要使用socket库中的程序组件（查询ip地址只需要调用一个程序组件就可以）\n而这里需要调用多个程序组件\n</code></pre>\n<pre><code>向操作系统内的协议栈发出委托时需要按照指定的顺序来调用socket库中的程序组件\n</code></pre>\n<h3>使用socket库来手法数据的操作过程</h3>\n<pre><code>第一步 收发数据的两台计算机中间建立通道\n管道的数据出入口是关键\n这些出入口即为套接字\n</code></pre>\n<h3>具体的流程 * 套接字即为socket</h3>\n<pre><code>- 首先 服务器一方先创建套接字\n- 然后等待客户端向该套接字连接管道\n- 当服务器进入等待状态的时候 客户端就可以连接管道了\n\n-- 客户端也会先创建一个套接字\n-- 然后该套接字延申出管道\n-- 最后管道连接到服务器的套接字上\n-- 当双方的套接字连接起来后\n-- 通信准备完成\n-- 将数据送入套接字\n</code></pre>\n<h3>收发数据的阶段</h3>\n<pre><code>1. 创建套接字\n2. 将管道连接到服务器端的套接字上\n3. 收发数据\n4. 断开管道并删除套接字\n</code></pre>\n<pre><code>在每个阶段 socket库中的程序组件都会被调用来执行相关数据收发操作\n\n这四个操作都是由操作系统的协议栈来执行的\n\n浏览器等应用程序并不会自己去做连接管道，放入数据\n而是委托协议栈来代劳\n\n这些委托操作都是通过调用socket库中的程序来执行\n但这些数据通信用的程序组件其实仅仅充当了一个桥梁的角色\n并不会执行任何实际性的操作\n</code></pre>\n<pre><code>应用程序的委托被最终会被原原本本地传递给协议栈\n</code></pre>\n<h3>创建套接字阶段</h3>\n<pre><code>应用程序委托发送数据的时候会按照一定顺序调用socket组件\ndns查询会调用gethostbyname的程序\n</code></pre>\n<h3>客户端创建套接字</h3>\n<pre><code>调用socket库中的socket组件 -&gt; 创建套接字\n-&gt;协议栈返回描述符-&gt;应用程序将描述符放在内存-&gt;描述符用于识别套接字\n</code></pre>\n<pre><code>应用程序是通过“描述符”这一类似号码牌的东西来识别套接字的。\n</code></pre>\n<h3>连接</h3>\n<pre><code>需要 描述符 服务器ip地址 端口号\n</code></pre>\n"},{"path":"/posts_web/ARP.html","title":"根据ip查mac地址","date":"2022-04-25","fontNum":233,"description":" yarn add node-arp\r\njavascript\r\nconst arp = require('node-arp');\r\n\r\narp.getMAC('192.168.0.1', function(err, mac) {\r\n    if (!err) {\r\n        console.log(mac);\r\n    } else {\r\n        console.log(","tags":["DNS"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<h3>yarn add node-arp</h3>\n<pre><code class=\"language-javascript\">const arp = require('node-arp');\n\narp.getMAC('192.168.0.1', function(err, mac) {\n    if (!err) {\n        console.log(mac);\n    } else {\n        console.log('mac is:', mac);\n    }\n});\n</code></pre>\n"},{"path":"/posts_web/协议栈.html","title":"协议栈","date":"2022-04-25","fontNum":346,"description":"\r\n 协议栈\r\n Socket\r\n\r\n-- 应用程序会调用调用Socket 和 解析器\r\n--- 解析器向DNS服务器发出查询\r\n\r\n TCP\r\n\r\n-- 再下层是协议栈\r\n--- 负责收发数据的TCP 和 UDP\r\n--- TCP适用应用程序 UDP适用较短的数据控制\r\n\r\n IP\r\n\r\n-- 再下层IP\r\n--- IP协议控制网络包收发操作","tags":["DNS"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<h3>协议栈</h3>\n<h3>Socket</h3>\n<pre><code>-- 应用程序会调用调用Socket 和 解析器\n--- 解析器向DNS服务器发出查询\n</code></pre>\n<h3>TCP</h3>\n<pre><code>-- 再下层是协议栈\n--- 负责收发数据的TCP 和 UDP\n--- TCP适用应用程序 UDP适用较短的数据控制\n</code></pre>\n<h3>IP</h3>\n<pre><code>-- 再下层IP\n--- IP协议控制网络包收发操作\n--- IP包含ICMP 和 ARP\n--- ICMP用于告知网络包传输过程中产生的错误以及各种控制信息\n--- ARP勇敢与根据IP地址查询对应的MAC地址\n</code></pre>\n<h3>网卡驱动</h3>\n<pre><code>负责控制之网卡硬件\n</code></pre>\n<h3>网卡</h3>\n<pre><code>信号接收和传输\n</code></pre>\n"},{"path":"/posts_web/套接字实体.html","title":"套接字的实体就是通信控制信息","date":"2022-04-25","fontNum":216,"description":"\r\n 套接字的实体就是通信控制信息\r\n\r\n--- 存放控制信息的内存空间就是套接字的实体\r\n\r\n 协议栈是根据套接字中记录的控制信息来工作的\r\n\r\n--- 套接字中记录了用于控制通信操作的各种控制信息\r\n--- 协议栈则需要根据这些信息判断下一步的行动\r\n--- 这就是套接字的作用\r\n\r\n 在Windows中可以用netstat命令显示套接字内容\r\n\r\n","tags":["NET"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<h3>套接字的实体就是通信控制信息</h3>\n<pre><code>--- 存放控制信息的内存空间就是套接字的实体\n</code></pre>\n<h3>协议栈是根据套接字中记录的控制信息来工作的</h3>\n<pre><code>--- 套接字中记录了用于控制通信操作的各种控制信息\n--- 协议栈则需要根据这些信息判断下一步的行动\n--- 这就是套接字的作用\n</code></pre>\n<h3>在Windows中可以用netstat命令显示套接字内容</h3>\n<h3></h3>\n<pre><code>\n</code></pre>\n"},{"path":"/posts_element_ui/el_select_drag.html","title":"element select tag 拖动","date":"2022-04-26","fontNum":2514,"description":" 绑定所有默认属性和监听事件\r\n\r\n v-bind=\"$attrs\"\r\n v-on=\"$listeners\"\r\n\r\n 安装 sortablejs 功能强大的JavaScript 拖拽库\r\n\r\nimport Sortable from \"sortablejs\";\r\n\r\n DragSelect.vue\r\njavascript\r\n<template>\r\n ","tags":["element"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<h3>绑定所有默认属性和监听事件</h3>\n<pre><code> v-bind=&quot;$attrs&quot;\n v-on=&quot;$listeners&quot;\n</code></pre>\n<h3>安装 sortablejs 功能强大的JavaScript 拖拽库</h3>\n<pre><code>import Sortable from &quot;sortablejs&quot;;\n</code></pre>\n<h3>DragSelect.vue</h3>\n<pre><code class=\"language-javascript\">&lt;template&gt;\n  &lt;el-select\n    ref=&quot;dragSelect&quot;\n    v-model=&quot;selectVal&quot;\n    v-bind=&quot;$attrs&quot; \n    class=&quot;drag-select&quot;\n    multiple\n    v-on=&quot;$listeners&quot;\n  &gt;\n    &lt;slot /&gt;\n  &lt;/el-select&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport Sortable from &quot;sortablejs&quot;;\n\nexport default {\n  name: &quot;DragSelect&quot;,\n  props: {\n    value: {\n      type: Array,\n      required: true,\n    },\n  },\n  computed: {\n    selectVal: {\n      get() {\n        return [...this.value];\n      },\n      set(val) {\n        this.$emit(&quot;input&quot;, [...val]);\n      },\n    },\n  },\n  mounted() {\n    this.setSort();\n  },\n  methods: {\n    setSort() {\n      const el = this.$refs.dragSelect.$el.querySelectorAll(\n        &quot;.el-select__tags &gt; span&quot;\n      )[0];\n      this.sortable = Sortable.create(el, {\n        ghostClass: &quot;sortable-ghost&quot;,\n        setData: function (dataTransfer) {\n          dataTransfer.setData(&quot;Text&quot;, &quot;&quot;);\n        },\n        onEnd: (evt) =&gt; {\n          const targetRow = this.value.splice(evt.oldIndex, 1)[0];\n          this.value.splice(evt.newIndex, 0, targetRow);\n        },\n      });\n    },\n  },\n};\n&lt;/script&gt;\n\n&lt;style scoped&gt;\n::v-deep .drag-select .sortable-ghost {\n  opacity: 0.8;\n  color: #fff !important;\n  background: #42b983 !important;\n}\n::v-deep .drag-select .el-tag {\n  cursor: pointer;\n}\n&lt;/style&gt;\n</code></pre>\n<h3>使用组件</h3>\n<pre><code class=\"language-javascript\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;el-drag-select\n      v-model=&quot;value&quot;\n      style=&quot;width: 500px&quot;\n      multiple\n      placeholder=&quot;请选择&quot;\n    &gt;\n      &lt;el-option\n        v-for=&quot;item in options&quot;\n        :key=&quot;item.value&quot;\n        :label=&quot;item.label&quot;\n        :value=&quot;item.value&quot;\n      /&gt;\n    &lt;/el-drag-select&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport ElDragSelect from &quot;./DragSelect&quot;; \n\nexport default {\n  name: &quot;DragSelectDemo&quot;,\n  components: { ElDragSelect },\n  data() {\n    return {\n      value: [&quot;Apple&quot;, &quot;Banana&quot;, &quot;Orange&quot;],\n      options: [\n        {\n          value: &quot;选项1&quot;,\n          label: &quot;黄金糕&quot;,\n        },\n        {\n          value: &quot;选项2&quot;,\n          label: &quot;双皮奶&quot;,\n        },\n        {\n          value: &quot;选项3&quot;,\n          label: &quot;蚵仔煎&quot;,\n        },\n        {\n          value: &quot;选项4&quot;,\n          label: &quot;龙须面&quot;,\n        },\n        {\n          value: &quot;选项5&quot;,\n          label: &quot;北京烤鸭&quot;,\n        },\n      ],\n    };\n  },\n};\n&lt;/script&gt;\n</code></pre>\n"},{"path":"/posts_css/hover选择哪一个元素问题.html","title":"hover选择哪一个元素问题","date":"2022-05-02","fontNum":245,"description":"\r\n path与svg\r\n\r\n\r\n.myDiv :hover{//:hover前有空格\r\n    background: black;\r\n}\r\n.myDiv:hover{//:hover前没有空格\r\n    background: black;\r\n}\r\n\r\n\r\n第一种:hover选择的是.myDiv的所有子元素，而第二种选择的是.myDiv本身。\r\n第一种会将.myDiv所","tags":["css"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<h3>path与svg</h3>\n<pre><code>.myDiv :hover{//:hover前有空格\n    background: black;\n}\n.myDiv:hover{//:hover前没有空格\n    background: black;\n}\n</code></pre>\n<pre><code>第一种:hover选择的是.myDiv的所有子元素，而第二种选择的是.myDiv本身。\n第一种会将.myDiv所有子元素背景设为black\n第二种会将.myDiv自己的背景设为black\n</code></pre>\n"},{"path":"/posts_web/http状态码.html","title":"http状态码","date":"2022-05-27","fontNum":643,"description":" 1xx\r\n\r\n1xx 表示请求还在进行中\r\n\r\n\r\n 2xx\r\n\r\n200 请求成功\r\n\r\n\r\n201 created 已创建 创建用户\r\n\r\n\r\n204 not content 无内容\r\n\r\n\r\n 3xx\r\n\r\n301 move permanently 永久移动 资源永久更新了url\r\n\r\n\r\n302 foun","tags":["http"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<h3>1xx</h3>\n<pre><code>1xx 表示请求还在进行中\n</code></pre>\n<h3>2xx</h3>\n<pre><code>200 请求成功\n</code></pre>\n<pre><code>201 created 已创建 创建用户\n</code></pre>\n<pre><code>204 not content 无内容\n</code></pre>\n<h3>3xx</h3>\n<pre><code>301 move permanently 永久移动 资源永久更新了url\n</code></pre>\n<pre><code>302 found 临时移动 给你临时url 下次还得用旧地址\n</code></pre>\n<pre><code>304 not modified 未修改 没有过期直接使用缓存\n</code></pre>\n<h3>4xx</h3>\n<pre><code>400 bad request 语法错误无法理解 传参错误\n</code></pre>\n<pre><code>401 unauthorized 身份识别失败 身份认证\n</code></pre>\n<pre><code>403 forbidden 拒绝 没权限\n</code></pre>\n<pre><code>404 notfound 找不到 资源路径url 错误\n</code></pre>\n<pre><code>409 conflict 冲突 编辑冲突了 新老版本\n</code></pre>\n<h3>5xx</h3>\n<pre><code>500 internal server error 内部错误 (不知道什么错误先应付一下)\n</code></pre>\n<pre><code>502 bad gateway 网关错误 网关从服务器拿不到东西无法返回给客户端\n</code></pre>\n<pre><code>503 service unavailable 服务器超载或者维护(宕机)\n</code></pre>\n"},{"path":"/posts_vue/深入浅出vuejs.html","title":"深入浅出vue.js笔记","date":"2022-05-27","fontNum":1914,"description":" 下次dom更新之后执行是指\r\n\r\n在vue.js中当状态发生变化 watcher 会得到通知 然后触发虚拟dom 的渲染流程\r\n而watch触发渲染这个操作并不是同步的 而是异步的\r\nvue.js 中有一个队列 每当需要渲染的时候 会将watcher推送到这个队列中\r\n在下一次事件循环中再让watcher触发渲染的流程\r\n\r\n 为什么vue.js使用异步更新队列\r\nvue.js2.0","tags":["vue"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<h3>下次dom更新之后执行是指</h3>\n<p>在vue.js中当状态发生变化 watcher 会得到通知 然后触发虚拟dom 的渲染流程\n而watch触发渲染这个操作并不是同步的 而是异步的\nvue.js 中有一个队列 每当需要渲染的时候 会将watcher推送到这个队列中\n在下一次事件循环中再让watcher触发渲染的流程</p>\n<h3>为什么vue.js使用异步更新队列</h3>\n<p>vue.js2.0开始使用虚拟dom进行渲染\n变化侦测的通知发送到组件\n组件内的所有状态的变化都会通知到一个watcher\n然后虚拟dom会对整个组件进行比对并更改dom</p>\n<p>如果同一轮事件循环中有两个数据发生变化组件watcher会收到两份通知\n虚拟dom会对整个组件进行渲染所以只需要等多有状态都修改完毕后\n一次性将整个组件的dom渲染到最新即可</p>\n<h3>解决这个问题的方法</h3>\n<p>vue.js实现方式是将收到通知的watcher实例添加到队列缓存起来\n并在添加到队列之前检查其中是否已经存在相同的watcher\n只有在不存在的时候才将watcher实例添加到队列中\n然后再下一次事件循环中\nvue.js会让队列中的watcher触发渲染流程并且清空队列\n这样可以保证给即使再同一个事件循环中有两个状态发生变化watcher最后也只执行一次渲染流程</p>\n<h3>总结</h3>\n<p>状态改变 ----&gt; 通知watcher ----&gt; 异步触发虚拟dom渲染\nvue.js2.x 状态改变 ----&gt; 通知组件 ----&gt; 通知watcher ----&gt; 队列缓存watcher(保证唯一) ----&gt; 下一次事件循环vue触发watcher并清空队列 ----&gt; 触发虚拟dom渲染</p>\n<h3>事件循环 宏任务 微任务</h3>\n<p>微任务\nPromise.then\nMutationObserver\nObject.observe\nprocess.nextTick</p>\n<p>宏任务\nsetTimeout\nsetInterval\nsetImmediate\nmessageChannel\nrequestAnimationFrame\ni/o\nui交互事件</p>\n<h3>下次DOM更新周期</h3>\n<p>下次dom更新周期是指其实是指下次微任务执行时更新dom\nvm.$nextTick 其实时将回调添加到微任务中 只有再特殊情况下才会降级成为宏任务\n默认会添加到微任务中\n因此如果使用vm.$nextTick来获取更新后的dom则需要注意顺序的问题\n不论是更新dom的回调还是使用vm.$nextTick注册的回调都是在向微任务队列中添加任务\n所以哪个任务先添加到队列中就先执行哪个任务</p>\n<p>事实上更新dom的回调也是使用vm.$nextTick来注册到微任务中</p>\n<p>如果想在 [vm.$nextTick] 中获取更新后的dom  则一定要在更改数据的后面使用[vm.$nexTick] 注册回调</p>\n<p>如果是先使用 [vm.$nextTick] 注册回调 然后修改数据 则在微任务队列中先执行使用</p>\n<h3>优先级</h3>\n<p>在事件循环中 必须当前微任务队列中的事件都执行完成后\n才会从宏任务队列中取出一个事件执行下一轮\n所以添加到微任务队列中的任务的执行时机优先于向宏任务队列中添加的任务</p>\n<p>修改数据会默认将更新的dom 的回调添加到微任务队列中\n(更新dom的回调是微任务)</p>\n<p>setTimeout 属于宏任务 使用setTimeout 注册的回调函数会加入到宏任务中\n宏任务的执行要比微任务晚\n所以即使是先注册也是先更新dom后执行setTimeout中的回调</p>\n<h3>总结</h3>\n<p>vm.$nextTick 和 修改数据导致的dom更新同属于 微任务 所以vm.$nextTick 要在更改数据后面 注册回调\n而setTimeout 是宏任务一定慢于微任务执行 所以无论于 更改数据前后设置都会 于dom更新之后执行</p>\n<h3>存储</h3>\n<p>由于vm.$nextTick 会将回调添加到任务队列中延迟执行\n在回调执行之前反复调用vm.$nextTick vue 只会向任务队列中添加一个任务\nvue.js 内部有一个列表存储vm.$nextTick 参数中提供的回调\n在新一轮事件循环中 vm.$nextTick 只会向任务队列添加一个任务\n多次使用vm.$nextTick只会将回调添加到回调列表中缓存起来\n当任务触发时 依次执行列表中的所有回调并清空列表</p>\n"},{"path":"/posts_vue/深入浅出vuejs2.html","title":"深入浅出vue.js笔记","date":"2022-05-28","fontNum":270,"description":"\r\n 实例化vue.js\r\n在实例化vue.js时会有一个初始化流程、会向vue.js实例上新增一些方法\r\n this.$otions 是其中之一\r\n 他可以访问到实例化vue.js 时用户设置的参数 eg: template render\r\n\r\n 如果实例化vue 时给出render 选项  那么template是无效的 \r\n 因为不会进入模板编译流程 而是直接使用render 选项中提供","tags":["vue"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<h3>实例化vue.js</h3>\n<p>在实例化vue.js时会有一个初始化流程、会向vue.js实例上新增一些方法\nthis.$otions 是其中之一\n他可以访问到实例化vue.js 时用户设置的参数 eg: template render</p>\n<p>如果实例化vue 时给出render 选项  那么template是无效的\n因为不会进入模板编译流程 而是直接使用render 选项中提供的函数</p>\n<p>vue官方： 如果没有render 那么就需要获取模板并将模板编译成渲染函数 即render 函数赋值给render选项</p>\n"},{"path":"/posts_vue/自定义指令.html","title":"vue自定义指令","date":"2022-05-28","fontNum":57,"description":"vue 注册自定义组件 以解决仍然需要通过操作普通dom 进行的底层操作\r\n自定义组件用于解决需要dom操作的行为","tags":["vue"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<p>vue 注册自定义组件 以解决仍然需要通过操作普通dom 进行的底层操作\n自定义组件用于解决需要dom操作的行为</p>\n"},{"path":"/posts_vue/只能输入正整数.html","title":"只能输入正整数","date":"2022-05-29","fontNum":181,"description":"\r\n\r\n@input = 'inputValue'\r\nlimitInput(inputValue) {\r\n    this.formData.xxx = inputValue.replace(/[^0-9]/g, '')\r\n    this.formData.yyy = inputValue.replace(/[^0-9]/g, '')\r\n},\r\n","tags":["vue"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code>@input = 'inputValue'\nlimitInput(inputValue) {\n    this.formData.xxx = inputValue.replace(/[^0-9]/g, '')\n    this.formData.yyy = inputValue.replace(/[^0-9]/g, '')\n},\n</code></pre>\n"},{"path":"/posts_vue/深入浅出vue_data.html","title":"深入浅出vue.js笔记 _data","date":"2022-06-01","fontNum":1751,"description":"javascript\r\nfunction initData(vm) {\r\n    let data = vm.$options.data\r\n    data = vm._data = typeof data === 'function' ? getData(data, vm) : data || {}\r\n    if (!isPlainObject(data)) {\r\n        dat","tags":["vue"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">function initData(vm) {\n    let data = vm.$options.data\n    data = vm._data = typeof data === 'function' ? getData(data, vm) : data || {}\n    if (!isPlainObject(data)) {\n        data = {}\n        processEnvNODE_ENV !== 'production' &amp;&amp; warn('data functions should return an object:\\n' +\n            'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function', vm)\n    }\n    //将data代理到vue.js实例上\n    const keys = Object.keys(data)\n    const props = vm.$options.props\n    const methods = vm.$options.methods\n    let i = keys.length\n    while (i--) {\n        const key = keys[i]\n        if (processEnvNODE_ENV !== 'production') {\n            if (methods &amp;&amp; hasOwn(methods, key)) {\n                warn(`Method &quot;${key}&quot; has already been defined as a data property.`, vm)\n            }\n        }\n        if (props, hasOwn(props, key)) {\n            processEnvNODE_ENV !== 'production' &amp;&amp; warn(`The data property &quot;${key}&quot; is already declared as a prop.` +\n                `Use prop default value instead`, vm)\n        } else if (!isReserved(key)) {\n            //proxy 函数的作用 是在第一个参数上设置一个属性名为带三个参数的属性\n            //这个属性的修改和获取操作实际上针对的是与第二个参数相同属性名的属性\n            proxy(vm, `_data`, key)\n        }\n    }\n\n    observe(data, true /*asRootData*/ )\n\n}\n\nconst sharedPropertyDefinition = {\n    enumerable: true,\n    configureable: true,\n    get: noop,\n    set: noop\n}\n\nexport function proxy(target, sourceKey, key) {\n    sharedPropertyDefinition.get = function proxyGetter() {\n        return this[sourceKey][key]\n    }\n\n    sharedPropertyDefinition.set = function proxySetter(val) {\n        this[sourceKey][key] = val\n    }\n    Object.defineProperty(target, key, sharedPropertyDefinition)\n}\n</code></pre>\n"},{"path":"/posts_vue/深入浅出vue_methods.html","title":"深入浅出vue.js笔记 _methods","date":"2022-06-01","fontNum":1277,"description":"\r\njavascript\r\n//初始化methods 循环选项中的methods对象 将每一个属性依次挂在到vm上即可\r\nfunction initMethods(vm, methods) {\r\n    //props 用来判断 methods 中的方法 是否和props发生了重复\r\n    const props = vm.$options.props\r\n    for (const ke","tags":["vue"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">//初始化methods 循环选项中的methods对象 将每一个属性依次挂在到vm上即可\nfunction initMethods(vm, methods) {\n    //props 用来判断 methods 中的方法 是否和props发生了重复\n    const props = vm.$options.props\n    for (const key in methods) {\n        if (processEnvNODE_ENV !== 'production') {\n            //当某个方法只有key没有value时 会发出警告\n            if (methods[key] == null) {\n                warn(\n                    `Method &quot;${key}&quot; has an undefined value in the component definition.` + `Did you reference the function correctly?`, vm\n                )\n            }\n\n            if (props &amp;&amp; hasOwn(props, key)) {\n                warn(\n                    `Method &quot;${key}&quot; has already been defined as a prop.`, vm\n                )\n            }\n            //如果methods中的某个方法已经存在于vm 且方法是以$或者_开头的\n            if ((key in vm) &amp;&amp; isReserved(key)) {\n                warn(\n                    `Method &quot;${key}&quot; conflicts with an existing Vue instance method.` + `Avoid defining component methods that start with _ or $.`\n                )\n            }\n        }\n        //将方法赋值到vm中 判断methods[key]是否存在 如果不存在 则将noop赋值到vm[key]中 如果存在则将该方法通过bind改写他的this后 再赋值到vm[key]中\n        //这样就可以通过vm.x访问到methods中的x方法\n        vm[key] = methods[key] == null ? noop : bind(methods[key], vm)\n    }\n}\n</code></pre>\n"},{"path":"/posts_vue/深入浅出vue_props.html","title":"深入浅出vue.js笔记 _props","date":"2022-06-01","fontNum":6511,"description":"\r\njavascript\r\nfunction normalizeProps(options, vm) {\r\n    //获取props\r\n    const props = options.props\r\n    if (!props) {\r\n        return\r\n    }\r\n    const res = {}\r\n    let i, val, name\r\n\r\n    //判断p","tags":["vue"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">function normalizeProps(options, vm) {\n    //获取props\n    const props = options.props\n    if (!props) {\n        return\n    }\n    const res = {}\n    let i, val, name\n\n    //判断props是否是数组\n    if (Array.isArray(props)) {\n        i = props.length\n        while (i--) {\n            val = props[i]\n                //props 数组中值属性为 string\n            if (typeof val === 'string') {\n                name = camelize(val)\n                res[name] = { type: null }\n            } else if (processEnvNODE_ENV !== 'production') {\n                warn('props must be strings when using array syntax')\n            }\n        }\n        //check props is typeof object\n    } else if (isPlainObject(props)) {\n        for (const key in props) {\n            val = props[key]\n\n            //驼峰化\n            name = camelize(key)\n            res[name] = isPlainObject(val) ? val : { type: val }\n        }\n    } else if (processEnvNODE_ENV !== 'production') {\n        warn(`\nInvalid value\nfor option &quot;props&quot;: expected an Array or an Object, ` + `\nbut got $ { toRawType(props) }.\n`, vm)\n    }\n\n    options.props = res\n}\n//初始化\nfunction initProps(vm, propsOptions) {\n    //vm, propsOptions vue 实例和规格化之后的props\n\n    //propsData中保存的是通过父组件传入或用户通过propsData传入的真实的props数据\n    const propsData = vm.$options.propsData || {}\n\n    //变量props是指向vm._props的指针 所有设置到props变量中的属性最终都会保存到vm._props中\n    const props = vm._props = {}\n\n    // 缓存 props的key 变量keys是指向vm.$options._propKeys的指针 其作用是缓存props对象中的key\n    //将来更新props时只需要遍历vm.$options._propKeys数组即可得到所有props的key\n    const keys = vm.$options._propKeys = []\n\n    //变量isRoot 的作用是判断当前组件是否是根组件\n    const isRoot = !vm.$parent\n\n    //root 实例的props属性应该被转换成响应数据\n    if (!isRoot) {\n        //如果不是根组件就不需要将props数据转换成响应式数据\n        //toggleObserving 函数的作用是确定并控制defineReactive函数调用时所传入的value参数是否需要转换成响应式\n        //toggleObserving是一个闭包函数\n        //所以通过调用他并传入一个参数来控制 observer/index.js文件的作用域中的变量 shouldObserve \n        //这样当数据将要被转换成响应式十，可以通过变量shouldObserve来判断是否需要将数据转换成响应式\n        toggleObserving(false)\n    }\n    //通过 调用validateProp 函数将props数据通过defineReactive 函数设置到vm._props中\n    for (const key in propsOptions) {\n        keys.push(key)\n        const value = validateProp(key, propsOptions, propsData, vm)\n        defineReactive(props, key, value)\n\n        //判断key是否在vm上存在 不存在 则调用proxy 在vm上设置一个以key为属性的代理 当使用vm[key]访问数据时其实访问的是vm._props[key]\n        if (!(key in vm)) {\n            proxy(vm, `\nprops `, key)\n        }\n    }\n    toggleObserving(true)\n\n}\n//validateProp获取props内容\n//validateProp 函数接收4个参数 \n//key propOptions中的属性名 \n//propOptions子组件用户设置的props选项 \n//propsData父组件或或用户提供的props数据 \n//vm vue.js实例上下文 this的别名\nexport function validateProp(key, propOptions, propsData, vm) {\n    //prop保存的内容是当前这个key的prop选项\n    const prop = propOptions[key]\n\n    //absent 表示当前的key在 用户提供的 props 选项是否存在\n    const absent = !hasOwn(propsData, key)\n\n    //表示使用当前这个key在用户提供的props选项中获取的数据\n    let value = propsData[key]\n\n    //处理boolen 类型的props(特殊情况)\n    //布尔值的情况下有两种额外的场景要处理\n    //一种情况下是key不存在的时候 也就是说父组件或者用户并没有提供这个数据\n    //并且props中也没设置默认值 那么这时候将value设置成false \n    //另一种情况是key存在但value是空字符串或者value与key相等\n    //这里的key = value 包含a = 'a' 和 userName='user-name'\n    //包含以下形式\n    //&lt;child name&gt;&lt;/child&gt;\n    //&lt;child name='name'&gt;&lt;/child&gt;\n    //&lt;child userName='user-name'&gt;&lt;/child&gt; \n    //&lt;child user-name='user-name'&gt;&lt;/child&gt; \n    //hyphenate会将key进行驼峰转换 userName 转换为 user-name\n    //除了布尔值需要特殊处理之外其他类型只有一种情况\n    if (isType(Boolean, prop.type)) {\n        if (absent &amp;&amp; !hasOwn(prop, 'default')) {\n            value = false\n        } else if (!isType(String, prop.type) &amp;&amp; (value === '' || value === hyphenate(key))) {\n            value = true\n        }\n    }\n\n    //检查默认值  如果子组件设置的props 在props中并不存在这个时候就会用到默认值\n    if (value === undefined) {\n        //getPropDefaultValue获取prop的默认值 observe函数将其转换成响应式\n        value = getPropDefaultValue(vm, prop, key)\n\n        //因为默认值是新数据 所以需要转换成响应式\n        const prevShouldConvert = observerState.shouldConvert\n        observerState.shouldConvert = true //决定了是否将其转换成响应式\n        observe(value)\n        observerState.shouldConvert = prevShouldConvert //将状态恢复成最初的状态\n    }\n\n    // if (value === undefined) {\n    //     value = getPropDefaultValue(vm, prop, key)\n    //     const prevShouldConvert = shouldObserve\n    //     toggleObserving(true) //决定了是否将其转换成响应式\n    //     observe(value)\n    //     toggleObserving(preShouldConvert) //将状态恢复成最初的状态\n    // }\n    if (processEnvNODE_ENV !== 'production') {\n        assertProp(prop, key, value, vm, absent) //断言prop是否有效 作用当prop验证失败的时候会在控制台产生警告\n    }\n    return value\n}\n//assertProp的作用当prop验证失败的时候在非生产环境下 vue.js会产生一个警告\nfunction assertProp(prop, name, value, vm, absent) {\n    //prop prop选项 ，name props中prop选项的key ，value prop数据(propData) ，vm上下文(this) ，absent prop数据中不存在key属性\n\n    //设置必填且该数据不存在\n    if (prop.required &amp;&amp; absent) {\n        warn(\n            'Missing required prop:&quot;' + name + '&quot;',\n            vm\n        )\n        return\n    }\n    //没有设置必填且数据不存在\n    if (value == null &amp;&amp; !prop.required) {\n        return\n    }\n    //prop的type\n    let type = prop.type\n\n    //valid 表示是否校验成功\n    let valid = !type || type === true\n\n    //通常情况下type是一个原生构造函数 或一个数组 或者没有提供\n\n    //如果用户没有设置type type = ture\n\n    //expectedTypes保存type 列表\n    const expectedTypes = []\n    if (type) {\n        if (!Array.isArray(type)) {\n            type = [type]\n        }\n        //type列表中只要有一个校验成功循环就结束认为是成功\n        for (let i = 0; i &lt; type.length &amp;&amp; !valid; i++) {\n            //assertType 返回 {} -----&gt; {valid:true, expectedType:'Boolen'} 前者表示校验成功 后者表示类型\n\n            //将类型添加到expectedTypes 并将valid 变量置为 assertedType.valid\n            const assertedType = assertType(value, type[i])\n            expectedTypes.push(assertedType.expectedType || '')\n\n            //循环结束 valid 为ture说明校验成功\n            valid = assertedType.valid\n        }\n    }\n    if (!valid) {\n        //capitalize作用是将字符串的一个字母改成大写\n        warn(\n            `\nInvalid prop: type check faild\nfor prop &quot;${name}&quot;\n` +\n            `\nExpected $ { expectedTypes.map(capitalize).join(', ') }\n` +\n            `, got $ { toRawType(value) }\n`\n        )\n        return\n    }\n    //如果用户设置validator就执行\n    const validator = prop.validator\n    if (validator) {\n        if (!validator(value)) {\n            warn(\n                'Invalid prop: custom validator check faild for prop &quot;' + name + '&quot;.', vm\n            )\n        }\n    }\n}\n</code></pre>\n"},{"path":"/posts_vue/深入浅出vue_解析过滤器.html","title":"深入浅出vue.js笔记 _解析过滤器","date":"2022-06-03","fontNum":937,"description":"javascript\r\nexport function parseFilters(exp) { //xxx | xxx\r\n    let filters = exp.split('|')\r\n    let expression = filters.shift().trim()\r\n\r\n    let i\r\n    if (filters) {\r\n        for (i = 0; i < ","tags":["vue"],"imgSrc":"https://tva1.sinaimg.cn/mw690/6833939bly1gicitzannuj20zk0m8b29.jpg","content":"<pre><code class=\"language-javascript\">export function parseFilters(exp) { //xxx | xxx\n    let filters = exp.split('|')\n    let expression = filters.shift().trim()\n\n    let i\n    if (filters) {\n        for (i = 0; i &lt; filters.length; i++) {\n            expression = wrapFilter(expression, filters[i].trim())\n        }\n    }\n    return expression\n}\n\nfunction wrapFilter(exp, filter) { //如果包含说明过滤器携带参数\n    const i = filter.indexof('(')\n\n    if (i &lt; 0) {\n        //_f:resolveFilter\n        return `_f(&quot;${filter}&quot;)(${exp})`\n    } else {\n        const name = filter.slice(0, i)\n        const args = filter.slice(i + 1)\n        return `_f(&quot;${name}&quot;)(${exp},${args})`\n    }\n}\n\n//测试\nparseFilters(`message | capitalize`)\n    //_f(&quot;capitalize&quot;)(message)\n\nparseFilters(`message | filterA | filterB`)\n    //_f(&quot;filterB&quot;)(_f(&quot;filterA&quot;)(message))\n\nparseFilters(`message | filterA('arg1',arg2))`)\n    //_f(&quot;filterA&quot;)(message,'arg1',arg2)\n</code></pre>\n"}]